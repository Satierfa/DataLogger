
DataLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  080110f8  080110f8  000210f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011934  08011934  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  08011934  08011934  00021934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801193c  0801193c  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801193c  0801193c  0002193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011940  08011940  00021940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08011944  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007fe0  2000017c  08011ac0  0003017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000815c  08011ac0  0003815c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c55  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c38  00000000  00000000  00056e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  0005ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  0005e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea2d  00000000  00000000  00060648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c42  00000000  00000000  0007f075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d802  00000000  00000000  000a7cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001454b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008688  00000000  00000000  0014550c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080110e0 	.word	0x080110e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	080110e0 	.word	0x080110e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SDcard_get_queue_handle>:

TaskHandle_t SDCard_get_task_handle(void){
	return SDcard_task_handle;
}

QueueHandle_t SDcard_get_queue_handle(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	return SDcard_queue_handle;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <SDcard_get_queue_handle+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20002204 	.word	0x20002204

080005ac <path_select>:

static bool path_select(char* path, size_t buff_size, data_type_t data_type){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
	if(buff_size < 50*sizeof(char)){
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b31      	cmp	r3, #49	; 0x31
 80005be:	d812      	bhi.n	80005e6 <path_select+0x3a>
		USB_PRINT("path buffer size too small\n");
 80005c0:	4b8e      	ldr	r3, [pc, #568]	; (80007fc <path_select+0x250>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2164      	movs	r1, #100	; 0x64
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d f8b2 	bl	800d730 <xQueueSemaphoreTake>
 80005cc:	211b      	movs	r1, #27
 80005ce:	488c      	ldr	r0, [pc, #560]	; (8000800 <path_select+0x254>)
 80005d0:	f00f fc2a 	bl	800fe28 <CDC_Transmit_FS>
 80005d4:	4b89      	ldr	r3, [pc, #548]	; (80007fc <path_select+0x250>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	f00c fe2d 	bl	800d23c <xQueueGenericSend>
		return false;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e106      	b.n	80007f4 <path_select+0x248>
	}
	*path = '\0';
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	switch(data_type){
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b10      	cmp	r3, #16
 80005f0:	f200 80ec 	bhi.w	80007cc <path_select+0x220>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <path_select+0x50>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000641 	.word	0x08000641
 8000600:	08000657 	.word	0x08000657
 8000604:	0800066f 	.word	0x0800066f
 8000608:	08000685 	.word	0x08000685
 800060c:	0800069d 	.word	0x0800069d
 8000610:	080006b3 	.word	0x080006b3
 8000614:	080006cb 	.word	0x080006cb
 8000618:	080006e3 	.word	0x080006e3
 800061c:	080006ff 	.word	0x080006ff
 8000620:	08000719 	.word	0x08000719
 8000624:	0800072d 	.word	0x0800072d
 8000628:	08000747 	.word	0x08000747
 800062c:	0800075f 	.word	0x0800075f
 8000630:	08000777 	.word	0x08000777
 8000634:	08000787 	.word	0x08000787
 8000638:	0800079b 	.word	0x0800079b
 800063c:	080007af 	.word	0x080007af
				case CORRENTE:
					strcpy(path, "CORRENTE.csv");
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a70      	ldr	r2, [pc, #448]	; (8000804 <path_select+0x258>)
 8000644:	461c      	mov	r4, r3
 8000646:	4613      	mov	r3, r2
 8000648:	cb07      	ldmia	r3!, {r0, r1, r2}
 800064a:	6020      	str	r0, [r4, #0]
 800064c:	6061      	str	r1, [r4, #4]
 800064e:	60a2      	str	r2, [r4, #8]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	7323      	strb	r3, [r4, #12]
					break;
 8000654:	e0cd      	b.n	80007f2 <path_select+0x246>
				case VEL_ANG_MOTOR:
					strcpy(path, "VEL_ANG_MOTOR.csv");
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4a6b      	ldr	r2, [pc, #428]	; (8000808 <path_select+0x25c>)
 800065a:	461d      	mov	r5, r3
 800065c:	4614      	mov	r4, r2
 800065e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000660:	6028      	str	r0, [r5, #0]
 8000662:	6069      	str	r1, [r5, #4]
 8000664:	60aa      	str	r2, [r5, #8]
 8000666:	60eb      	str	r3, [r5, #12]
 8000668:	8823      	ldrh	r3, [r4, #0]
 800066a:	822b      	strh	r3, [r5, #16]
					break;
 800066c:	e0c1      	b.n	80007f2 <path_select+0x246>
				case ACEL_LIN:
					strcpy(path, "ACEL_LIN.csv");
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4a66      	ldr	r2, [pc, #408]	; (800080c <path_select+0x260>)
 8000672:	461c      	mov	r4, r3
 8000674:	4613      	mov	r3, r2
 8000676:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000678:	6020      	str	r0, [r4, #0]
 800067a:	6061      	str	r1, [r4, #4]
 800067c:	60a2      	str	r2, [r4, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	7323      	strb	r3, [r4, #12]
					break;
 8000682:	e0b6      	b.n	80007f2 <path_select+0x246>
				case VEL_ANG_GIRO:
					strcpy(path, "VEL_ANG_GIRO.csv");
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4a62      	ldr	r2, [pc, #392]	; (8000810 <path_select+0x264>)
 8000688:	461d      	mov	r5, r3
 800068a:	4614      	mov	r4, r2
 800068c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800068e:	6028      	str	r0, [r5, #0]
 8000690:	6069      	str	r1, [r5, #4]
 8000692:	60aa      	str	r2, [r5, #8]
 8000694:	60eb      	str	r3, [r5, #12]
 8000696:	7823      	ldrb	r3, [r4, #0]
 8000698:	742b      	strb	r3, [r5, #16]
					break;
 800069a:	e0aa      	b.n	80007f2 <path_select+0x246>
				case CAMPO_MAG:
					strcpy(path, "CAMPO_MAG.csv");
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a5d      	ldr	r2, [pc, #372]	; (8000814 <path_select+0x268>)
 80006a0:	461c      	mov	r4, r3
 80006a2:	4613      	mov	r3, r2
 80006a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006a6:	6020      	str	r0, [r4, #0]
 80006a8:	6061      	str	r1, [r4, #4]
 80006aa:	60a2      	str	r2, [r4, #8]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	81a3      	strh	r3, [r4, #12]
					break;
 80006b0:	e09f      	b.n	80007f2 <path_select+0x246>
				case A_CTRL_TRACAO:
					strcpy(path, "A_CTRL_TRACAO.csv");
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a58      	ldr	r2, [pc, #352]	; (8000818 <path_select+0x26c>)
 80006b6:	461d      	mov	r5, r3
 80006b8:	4614      	mov	r4, r2
 80006ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006bc:	6028      	str	r0, [r5, #0]
 80006be:	6069      	str	r1, [r5, #4]
 80006c0:	60aa      	str	r2, [r5, #8]
 80006c2:	60eb      	str	r3, [r5, #12]
 80006c4:	8823      	ldrh	r3, [r4, #0]
 80006c6:	822b      	strh	r3, [r5, #16]
					break;
 80006c8:	e093      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_TRACAO:
					strcpy(path, "G_CTRL_TRACAO.csv");
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4a53      	ldr	r2, [pc, #332]	; (800081c <path_select+0x270>)
 80006ce:	461d      	mov	r5, r3
 80006d0:	4614      	mov	r4, r2
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	6028      	str	r0, [r5, #0]
 80006d6:	6069      	str	r1, [r5, #4]
 80006d8:	60aa      	str	r2, [r5, #8]
 80006da:	60eb      	str	r3, [r5, #12]
 80006dc:	8823      	ldrh	r3, [r4, #0]
 80006de:	822b      	strh	r3, [r5, #16]
					break;
 80006e0:	e087      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_TRACAO_RX:
					strcpy(path, "G_CTRL_TRACAO_RX.csv");
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4a4e      	ldr	r2, [pc, #312]	; (8000820 <path_select+0x274>)
 80006e6:	461d      	mov	r5, r3
 80006e8:	4614      	mov	r4, r2
 80006ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ec:	6028      	str	r0, [r5, #0]
 80006ee:	6069      	str	r1, [r5, #4]
 80006f0:	60aa      	str	r2, [r5, #8]
 80006f2:	60eb      	str	r3, [r5, #12]
 80006f4:	6820      	ldr	r0, [r4, #0]
 80006f6:	6128      	str	r0, [r5, #16]
 80006f8:	7923      	ldrb	r3, [r4, #4]
 80006fa:	752b      	strb	r3, [r5, #20]
					break;
 80006fc:	e079      	b.n	80007f2 <path_select+0x246>
				case A_CTRL_VEL:
					strcpy(path, "A_CTRL_VEL.csv");
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4a48      	ldr	r2, [pc, #288]	; (8000824 <path_select+0x278>)
 8000702:	461c      	mov	r4, r3
 8000704:	4613      	mov	r3, r2
 8000706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000708:	6020      	str	r0, [r4, #0]
 800070a:	6061      	str	r1, [r4, #4]
 800070c:	60a2      	str	r2, [r4, #8]
 800070e:	881a      	ldrh	r2, [r3, #0]
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	81a2      	strh	r2, [r4, #12]
 8000714:	73a3      	strb	r3, [r4, #14]
					break;
 8000716:	e06c      	b.n	80007f2 <path_select+0x246>
				case S_POINT_VEL:
					strcpy(path, "S_POINT_VEL.csv");
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a43      	ldr	r2, [pc, #268]	; (8000828 <path_select+0x27c>)
 800071c:	461c      	mov	r4, r3
 800071e:	4615      	mov	r5, r2
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	6020      	str	r0, [r4, #0]
 8000724:	6061      	str	r1, [r4, #4]
 8000726:	60a2      	str	r2, [r4, #8]
 8000728:	60e3      	str	r3, [r4, #12]
					break;
 800072a:	e062      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_VEL:
					strcpy(path, "G_CTRL_VEL.csv");
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4a3f      	ldr	r2, [pc, #252]	; (800082c <path_select+0x280>)
 8000730:	461c      	mov	r4, r3
 8000732:	4613      	mov	r3, r2
 8000734:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000736:	6020      	str	r0, [r4, #0]
 8000738:	6061      	str	r1, [r4, #4]
 800073a:	60a2      	str	r2, [r4, #8]
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	81a2      	strh	r2, [r4, #12]
 8000742:	73a3      	strb	r3, [r4, #14]
					break;
 8000744:	e055      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_VEL_RX:
					strcpy(path, "G_CTRL_VEL_RX.csv");
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4a39      	ldr	r2, [pc, #228]	; (8000830 <path_select+0x284>)
 800074a:	461d      	mov	r5, r3
 800074c:	4614      	mov	r4, r2
 800074e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000750:	6028      	str	r0, [r5, #0]
 8000752:	6069      	str	r1, [r5, #4]
 8000754:	60aa      	str	r2, [r5, #8]
 8000756:	60eb      	str	r3, [r5, #12]
 8000758:	8823      	ldrh	r3, [r4, #0]
 800075a:	822b      	strh	r3, [r5, #16]
					break;
 800075c:	e049      	b.n	80007f2 <path_select+0x246>
				case ANG_ROT_BASE:
					strcpy(path, "ANG_ROT_BASE.csv");
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4a34      	ldr	r2, [pc, #208]	; (8000834 <path_select+0x288>)
 8000762:	461d      	mov	r5, r3
 8000764:	4614      	mov	r4, r2
 8000766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000768:	6028      	str	r0, [r5, #0]
 800076a:	6069      	str	r1, [r5, #4]
 800076c:	60aa      	str	r2, [r5, #8]
 800076e:	60eb      	str	r3, [r5, #12]
 8000770:	7823      	ldrb	r3, [r4, #0]
 8000772:	742b      	strb	r3, [r5, #16]
					break;
 8000774:	e03d      	b.n	80007f2 <path_select+0x246>
				case GPS:
					strcpy(path, "GPS.csv");
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	492f      	ldr	r1, [pc, #188]	; (8000838 <path_select+0x28c>)
 800077a:	461a      	mov	r2, r3
 800077c:	460b      	mov	r3, r1
 800077e:	cb03      	ldmia	r3!, {r0, r1}
 8000780:	6010      	str	r0, [r2, #0]
 8000782:	6051      	str	r1, [r2, #4]
					break;
 8000784:	e035      	b.n	80007f2 <path_select+0x246>
				case A_CTRL_POSI:
					strcpy(path, "A_CTRL_POSI.csv");
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4a2c      	ldr	r2, [pc, #176]	; (800083c <path_select+0x290>)
 800078a:	461c      	mov	r4, r3
 800078c:	4615      	mov	r5, r2
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	6020      	str	r0, [r4, #0]
 8000792:	6061      	str	r1, [r4, #4]
 8000794:	60a2      	str	r2, [r4, #8]
 8000796:	60e3      	str	r3, [r4, #12]
					break;
 8000798:	e02b      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_POSI:
					strcpy(path, "G_CTRL_POSI.csv");
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <path_select+0x294>)
 800079e:	461c      	mov	r4, r3
 80007a0:	4615      	mov	r5, r2
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	6020      	str	r0, [r4, #0]
 80007a6:	6061      	str	r1, [r4, #4]
 80007a8:	60a2      	str	r2, [r4, #8]
 80007aa:	60e3      	str	r3, [r4, #12]
					break;
 80007ac:	e021      	b.n	80007f2 <path_select+0x246>
				case G_CTRL_POSI_RX:
					strcpy(path, "G_CTRL_POSI_RX.csv");
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4a24      	ldr	r2, [pc, #144]	; (8000844 <path_select+0x298>)
 80007b2:	461d      	mov	r5, r3
 80007b4:	4614      	mov	r4, r2
 80007b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b8:	6028      	str	r0, [r5, #0]
 80007ba:	6069      	str	r1, [r5, #4]
 80007bc:	60aa      	str	r2, [r5, #8]
 80007be:	60eb      	str	r3, [r5, #12]
 80007c0:	8823      	ldrh	r3, [r4, #0]
 80007c2:	78a2      	ldrb	r2, [r4, #2]
 80007c4:	822b      	strh	r3, [r5, #16]
 80007c6:	4613      	mov	r3, r2
 80007c8:	74ab      	strb	r3, [r5, #18]
					break;
 80007ca:	e012      	b.n	80007f2 <path_select+0x246>
				default:
					USB_PRINT("type not supported\n");
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <path_select+0x250>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00c ffac 	bl	800d730 <xQueueSemaphoreTake>
 80007d8:	2113      	movs	r1, #19
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <path_select+0x29c>)
 80007dc:	f00f fb24 	bl	800fe28 <CDC_Transmit_FS>
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <path_select+0x250>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	f00c fd27 	bl	800d23c <xQueueGenericSend>
					return false;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <path_select+0x248>
			}
	return true;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bdb0      	pop	{r4, r5, r7, pc}
 80007fc:	20002200 	.word	0x20002200
 8000800:	080110f8 	.word	0x080110f8
 8000804:	08011114 	.word	0x08011114
 8000808:	08011124 	.word	0x08011124
 800080c:	08011138 	.word	0x08011138
 8000810:	08011148 	.word	0x08011148
 8000814:	0801115c 	.word	0x0801115c
 8000818:	0801116c 	.word	0x0801116c
 800081c:	08011180 	.word	0x08011180
 8000820:	08011194 	.word	0x08011194
 8000824:	080111ac 	.word	0x080111ac
 8000828:	080111bc 	.word	0x080111bc
 800082c:	080111cc 	.word	0x080111cc
 8000830:	080111dc 	.word	0x080111dc
 8000834:	080111f0 	.word	0x080111f0
 8000838:	08011204 	.word	0x08011204
 800083c:	0801120c 	.word	0x0801120c
 8000840:	0801121c 	.word	0x0801121c
 8000844:	0801122c 	.word	0x0801122c
 8000848:	08011240 	.word	0x08011240

0800084c <reset_files>:

static bool reset_files(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	b0a8      	sub	sp, #160	; 0xa0
 8000850:	af00      	add	r7, sp, #0
	int er = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	char path[50];
	char buffer[100];

	for(int i = 0; i < NumberOfTypes; i++){
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800085e:	e087      	b.n	8000970 <reset_files+0x124>
		er = path_select(path, sizeof(path), i);
 8000860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000864:	b2da      	uxtb	r2, r3
 8000866:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800086a:	2132      	movs	r1, #50	; 0x32
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe9d 	bl	80005ac <path_select>
 8000872:	4603      	mov	r3, r0
 8000874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(!er){
 8000878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800087c:	2b00      	cmp	r3, #0
 800087e:	d112      	bne.n	80008a6 <reset_files+0x5a>
			USB_PRINT("error selecting path\n");
 8000880:	4b40      	ldr	r3, [pc, #256]	; (8000984 <reset_files+0x138>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2164      	movs	r1, #100	; 0x64
 8000886:	4618      	mov	r0, r3
 8000888:	f00c ff52 	bl	800d730 <xQueueSemaphoreTake>
 800088c:	2115      	movs	r1, #21
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <reset_files+0x13c>)
 8000890:	f00f faca 	bl	800fe28 <CDC_Transmit_FS>
 8000894:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <reset_files+0x138>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	f00c fccd 	bl	800d23c <xQueueGenericSend>
			return false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e069      	b.n	800097a <reset_files+0x12e>
		}

		er = f_stat(path, NULL);
 80008a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00b fc82 	bl	800c1b6 <f_stat>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(er != FR_OK){
 80008b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d024      	beq.n	800090a <reset_files+0xbe>
			sprintf(buffer, "error: %d\n", er);
 80008c0:	463b      	mov	r3, r7
 80008c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80008c6:	4931      	ldr	r1, [pc, #196]	; (800098c <reset_files+0x140>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f010 f84f 	bl	801096c <siprintf>
			USB_PRINT(buffer);
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <reset_files+0x138>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2164      	movs	r1, #100	; 0x64
 80008d4:	4618      	mov	r0, r3
 80008d6:	f00c ff2b 	bl	800d730 <xQueueSemaphoreTake>
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc7f 	bl	80001e0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	463b      	mov	r3, r7
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00f fa9c 	bl	800fe28 <CDC_Transmit_FS>
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <reset_files+0x138>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	2300      	movs	r3, #0
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	f00c fc9f 	bl	800d23c <xQueueGenericSend>
			if(er == FR_NO_FILE) continue;
 80008fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000902:	2b04      	cmp	r3, #4
 8000904:	d02e      	beq.n	8000964 <reset_files+0x118>
			return false;
 8000906:	2300      	movs	r3, #0
 8000908:	e037      	b.n	800097a <reset_files+0x12e>
		}

		er = f_unlink(path);
 800090a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800090e:	4618      	mov	r0, r3
 8000910:	f00b fc8a 	bl	800c228 <f_unlink>
 8000914:	4603      	mov	r3, r0
 8000916:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(er != FR_OK){
 800091a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800091e:	2b00      	cmp	r3, #0
 8000920:	d021      	beq.n	8000966 <reset_files+0x11a>
			sprintf(buffer, "error: %d\n", er);
 8000922:	463b      	mov	r3, r7
 8000924:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000928:	4918      	ldr	r1, [pc, #96]	; (800098c <reset_files+0x140>)
 800092a:	4618      	mov	r0, r3
 800092c:	f010 f81e 	bl	801096c <siprintf>
			USB_PRINT(buffer);
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <reset_files+0x138>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	4618      	mov	r0, r3
 8000938:	f00c fefa 	bl	800d730 <xQueueSemaphoreTake>
 800093c:	463b      	mov	r3, r7
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc4e 	bl	80001e0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	463b      	mov	r3, r7
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f00f fa6b 	bl	800fe28 <CDC_Transmit_FS>
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <reset_files+0x138>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	f00c fc6e 	bl	800d23c <xQueueGenericSend>
			return false;
 8000960:	2300      	movs	r3, #0
 8000962:	e00a      	b.n	800097a <reset_files+0x12e>
			if(er == FR_NO_FILE) continue;
 8000964:	bf00      	nop
	for(int i = 0; i < NumberOfTypes; i++){
 8000966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800096a:	3301      	adds	r3, #1
 800096c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000974:	2b10      	cmp	r3, #16
 8000976:	f77f af73 	ble.w	8000860 <reset_files+0x14>
		}
	}
}
 800097a:	4618      	mov	r0, r3
 800097c:	37a0      	adds	r7, #160	; 0xa0
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20002200 	.word	0x20002200
 8000988:	08011254 	.word	0x08011254
 800098c:	0801126c 	.word	0x0801126c

08000990 <SDcard_task>:

static void SDcard_task(void* arg){
 8000990:	b580      	push	{r7, lr}
 8000992:	b0b2      	sub	sp, #200	; 0xc8
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
	SD_data_t data = {0};
 8000998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
	char buffer[100];
	char path[50];
	int er = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	for(;;){
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 80009b0:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <SDcard_task+0x268>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	4618      	mov	r0, r3
 80009be:	f00c fdd7 	bl	800d570 <xQueueReceive>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d011      	beq.n	80009ec <SDcard_task+0x5c>
			USB_PRINT("error receive from queue\n");
 80009c8:	4b8c      	ldr	r3, [pc, #560]	; (8000bfc <SDcard_task+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2164      	movs	r1, #100	; 0x64
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00c feae 	bl	800d730 <xQueueSemaphoreTake>
 80009d4:	2119      	movs	r1, #25
 80009d6:	488a      	ldr	r0, [pc, #552]	; (8000c00 <SDcard_task+0x270>)
 80009d8:	f00f fa26 	bl	800fe28 <CDC_Transmit_FS>
 80009dc:	4b87      	ldr	r3, [pc, #540]	; (8000bfc <SDcard_task+0x26c>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	f00c fc29 	bl	800d23c <xQueueGenericSend>
			continue;
 80009ea:	e104      	b.n	8000bf6 <SDcard_task+0x266>
		}

		er = path_select(path, sizeof(path), data.data_type);
 80009ec:	f897 20b0 	ldrb.w	r2, [r7, #176]	; 0xb0
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2132      	movs	r1, #50	; 0x32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdd8 	bl	80005ac <path_select>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(!er){
 8000a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d111      	bne.n	8000a2e <SDcard_task+0x9e>
			USB_PRINT("error selecting path\n");
 8000a0a:	4b7c      	ldr	r3, [pc, #496]	; (8000bfc <SDcard_task+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2164      	movs	r1, #100	; 0x64
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00c fe8d 	bl	800d730 <xQueueSemaphoreTake>
 8000a16:	2115      	movs	r1, #21
 8000a18:	487a      	ldr	r0, [pc, #488]	; (8000c04 <SDcard_task+0x274>)
 8000a1a:	f00f fa05 	bl	800fe28 <CDC_Transmit_FS>
 8000a1e:	4b77      	ldr	r3, [pc, #476]	; (8000bfc <SDcard_task+0x26c>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	f00c fc08 	bl	800d23c <xQueueGenericSend>
			continue;
 8000a2c:	e0e3      	b.n	8000bf6 <SDcard_task+0x266>
		}

		er = f_stat(path, NULL);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00b fbbe 	bl	800c1b6 <f_stat>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(er == FR_NO_FILE){
 8000a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d12d      	bne.n	8000aa4 <SDcard_task+0x114>
			f_open(&fil, path, FA_CREATE_ALWAYS | FA_WRITE);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	4619      	mov	r1, r3
 8000a50:	486d      	ldr	r0, [pc, #436]	; (8000c08 <SDcard_task+0x278>)
 8000a52:	f00a fc25 	bl	800b2a0 <f_open>
			if(data.array_size == 1){
 8000a56:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <SDcard_task+0xd8>
				f_puts("timestamp,value\n", &fil);
 8000a5e:	496a      	ldr	r1, [pc, #424]	; (8000c08 <SDcard_task+0x278>)
 8000a60:	486a      	ldr	r0, [pc, #424]	; (8000c0c <SDcard_task+0x27c>)
 8000a62:	f00b fd40 	bl	800c4e6 <f_puts>
 8000a66:	e01a      	b.n	8000a9e <SDcard_task+0x10e>
			}
			else if(data.array_size == 3){
 8000a68:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d104      	bne.n	8000a7a <SDcard_task+0xea>
				f_puts("timestamp,value1,value2,value3\n", &fil);
 8000a70:	4965      	ldr	r1, [pc, #404]	; (8000c08 <SDcard_task+0x278>)
 8000a72:	4867      	ldr	r0, [pc, #412]	; (8000c10 <SDcard_task+0x280>)
 8000a74:	f00b fd37 	bl	800c4e6 <f_puts>
 8000a78:	e011      	b.n	8000a9e <SDcard_task+0x10e>
			}
			else{
				USB_PRINT("incompatible array size\n");
 8000a7a:	4b60      	ldr	r3, [pc, #384]	; (8000bfc <SDcard_task+0x26c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2164      	movs	r1, #100	; 0x64
 8000a80:	4618      	mov	r0, r3
 8000a82:	f00c fe55 	bl	800d730 <xQueueSemaphoreTake>
 8000a86:	2118      	movs	r1, #24
 8000a88:	4862      	ldr	r0, [pc, #392]	; (8000c14 <SDcard_task+0x284>)
 8000a8a:	f00f f9cd 	bl	800fe28 <CDC_Transmit_FS>
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <SDcard_task+0x26c>)
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	f00c fbd0 	bl	800d23c <xQueueGenericSend>
				continue;
 8000a9c:	e0ab      	b.n	8000bf6 <SDcard_task+0x266>
			}
			f_close(&fil);
 8000a9e:	485a      	ldr	r0, [pc, #360]	; (8000c08 <SDcard_task+0x278>)
 8000aa0:	f00b f93b 	bl	800bd1a <f_close>
		}

		er = f_open(&fil, path, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2233      	movs	r2, #51	; 0x33
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4856      	ldr	r0, [pc, #344]	; (8000c08 <SDcard_task+0x278>)
 8000aae:	f00a fbf7 	bl	800b2a0 <f_open>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(er != FR_OK){
 8000ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d022      	beq.n	8000b06 <SDcard_task+0x176>
			sprintf(buffer, "error: %d\n", er);
 8000ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ac8:	4953      	ldr	r1, [pc, #332]	; (8000c18 <SDcard_task+0x288>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00f ff4e 	bl	801096c <siprintf>
			USB_PRINT(buffer);
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <SDcard_task+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2164      	movs	r1, #100	; 0x64
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00c fe2a 	bl	800d730 <xQueueSemaphoreTake>
 8000adc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb7d 	bl	80001e0 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00f f999 	bl	800fe28 <CDC_Transmit_FS>
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <SDcard_task+0x26c>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	2300      	movs	r3, #0
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	f00c fb9c 	bl	800d23c <xQueueGenericSend>
			continue;
 8000b04:	e077      	b.n	8000bf6 <SDcard_task+0x266>
		}

		if(data.array_size == 1){
 8000b06:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <SDcard_task+0x190>
			f_printf(&fil, "%u,%d\n", data.timestamp, data.value[0]);
 8000b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b16:	4941      	ldr	r1, [pc, #260]	; (8000c1c <SDcard_task+0x28c>)
 8000b18:	483b      	ldr	r0, [pc, #236]	; (8000c08 <SDcard_task+0x278>)
 8000b1a:	f00b fd09 	bl	800c530 <f_printf>
 8000b1e:	e026      	b.n	8000b6e <SDcard_task+0x1de>
		}
		else if(data.array_size == 3){
 8000b20:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d110      	bne.n	8000b4a <SDcard_task+0x1ba>
			f_printf(&fil, "%u,%d,%d,%d\n", data.timestamp, data.value[0], data.value[1], data.value[2]);
 8000b28:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000b2c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	460a      	mov	r2, r1
 8000b40:	4937      	ldr	r1, [pc, #220]	; (8000c20 <SDcard_task+0x290>)
 8000b42:	4831      	ldr	r0, [pc, #196]	; (8000c08 <SDcard_task+0x278>)
 8000b44:	f00b fcf4 	bl	800c530 <f_printf>
 8000b48:	e011      	b.n	8000b6e <SDcard_task+0x1de>
		}
		else {
			USB_PRINT("incompatible array size\n");
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <SDcard_task+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2164      	movs	r1, #100	; 0x64
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00c fded 	bl	800d730 <xQueueSemaphoreTake>
 8000b56:	2118      	movs	r1, #24
 8000b58:	482e      	ldr	r0, [pc, #184]	; (8000c14 <SDcard_task+0x284>)
 8000b5a:	f00f f965 	bl	800fe28 <CDC_Transmit_FS>
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <SDcard_task+0x26c>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	2300      	movs	r3, #0
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	f00c fb68 	bl	800d23c <xQueueGenericSend>
			continue;
 8000b6c:	e043      	b.n	8000bf6 <SDcard_task+0x266>
		}

		f_lseek(&fil, 0);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4825      	ldr	r0, [pc, #148]	; (8000c08 <SDcard_task+0x278>)
 8000b72:	f00b f8fc 	bl	800bd6e <f_lseek>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000b76:	e020      	b.n	8000bba <SDcard_task+0x22a>
				{
					USB_PRINT(buffer);
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <SDcard_task+0x26c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2164      	movs	r1, #100	; 0x64
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00c fdd6 	bl	800d730 <xQueueSemaphoreTake>
 8000b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fb29 	bl	80001e0 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f00f f945 	bl	800fe28 <CDC_Transmit_FS>
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <SDcard_task+0x26c>)
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f00c fb48 	bl	800d23c <xQueueGenericSend>
					memset(buffer,0,sizeof(buffer));
 8000bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bb0:	2264      	movs	r2, #100	; 0x64
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00f fdc3 	bl	8010740 <memset>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <SDcard_task+0x278>)
 8000bc0:	2164      	movs	r1, #100	; 0x64
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00b fbdb 	bl	800c37e <f_gets>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1d4      	bne.n	8000b78 <SDcard_task+0x1e8>
				}
		f_close(&fil);
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <SDcard_task+0x278>)
 8000bd0:	f00b f8a3 	bl	800bd1a <f_close>
		USB_PRINT("\n");
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <SDcard_task+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2164      	movs	r1, #100	; 0x64
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00c fda8 	bl	800d730 <xQueueSemaphoreTake>
 8000be0:	2101      	movs	r1, #1
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <SDcard_task+0x294>)
 8000be4:	f00f f920 	bl	800fe28 <CDC_Transmit_FS>
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SDcard_task+0x26c>)
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f00c fb23 	bl	800d23c <xQueueGenericSend>
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 8000bf6:	e6db      	b.n	80009b0 <SDcard_task+0x20>
 8000bf8:	20002204 	.word	0x20002204
 8000bfc:	20002200 	.word	0x20002200
 8000c00:	08011278 	.word	0x08011278
 8000c04:	08011254 	.word	0x08011254
 8000c08:	200011d0 	.word	0x200011d0
 8000c0c:	08011294 	.word	0x08011294
 8000c10:	080112a8 	.word	0x080112a8
 8000c14:	080112c8 	.word	0x080112c8
 8000c18:	0801126c 	.word	0x0801126c
 8000c1c:	080112e4 	.word	0x080112e4
 8000c20:	080112ec 	.word	0x080112ec
 8000c24:	080112fc 	.word	0x080112fc

08000c28 <SDcard_start>:
	}
}

int SDcard_start(void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
	BaseType_t ret = pdTRUE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
	print_smpr_handle = xSemaphoreCreateBinary();
 8000c32:	2203      	movs	r2, #3
 8000c34:	2100      	movs	r1, #0
 8000c36:	2001      	movs	r0, #1
 8000c38:	f00c faa2 	bl	800d180 <xQueueGenericCreate>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <SDcard_start+0x80>)
 8000c40:	6013      	str	r3, [r2, #0]
	SDcard_queue_handle = xQueueCreate(10, sizeof(SD_data_t));
 8000c42:	2200      	movs	r2, #0
 8000c44:	2118      	movs	r1, #24
 8000c46:	200a      	movs	r0, #10
 8000c48:	f00c fa9a 	bl	800d180 <xQueueGenericCreate>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <SDcard_start+0x84>)
 8000c50:	6013      	str	r3, [r2, #0]
	ret &= !f_mount(&fs, "", 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	4916      	ldr	r1, [pc, #88]	; (8000cb0 <SDcard_start+0x88>)
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <SDcard_start+0x8c>)
 8000c58:	f00a fadc 	bl	800b214 <f_mount>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	607b      	str	r3, [r7, #4]
	ret &= reset_files();
 8000c70:	f7ff fdec 	bl	800084c <reset_files>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	607b      	str	r3, [r7, #4]
	ret &= xTaskCreate(SDcard_task, "SDcard_task", 128*4, NULL, 25, NULL);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2319      	movs	r3, #25
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c8c:	490a      	ldr	r1, [pc, #40]	; (8000cb8 <SDcard_start+0x90>)
 8000c8e:	480b      	ldr	r0, [pc, #44]	; (8000cbc <SDcard_start+0x94>)
 8000c90:	f00d f83d 	bl	800dd0e <xTaskCreate>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	607b      	str	r3, [r7, #4]
	return ret;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20002200 	.word	0x20002200
 8000cac:	20002204 	.word	0x20002204
 8000cb0:	08011300 	.word	0x08011300
 8000cb4:	20000198 	.word	0x20000198
 8000cb8:	08011304 	.word	0x08011304
 8000cbc:	08000991 	.word	0x08000991

08000cc0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <SELECT+0x18>)
 8000cca:	f001 fc4f 	bl	800256c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f001 f9c2 	bl	8002058 <HAL_Delay>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020000 	.word	0x40020000

08000cdc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <DESELECT+0x18>)
 8000ce6:	f001 fc41 	bl	800256c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f001 f9b4 	bl	8002058 <HAL_Delay>
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d02:	bf00      	nop
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <SPI_TxByte+0x30>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d1f8      	bne.n	8000d04 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d12:	1df9      	adds	r1, r7, #7
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <SPI_TxByte+0x30>)
 8000d1a:	f003 fbbc 	bl	8004496 <HAL_SPI_Transmit>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20002214 	.word	0x20002214

08000d2c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d38:	bf00      	nop
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <SPI_TxBuffer+0x30>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d1f8      	bne.n	8000d3a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <SPI_TxBuffer+0x30>)
 8000d50:	f003 fba1 	bl	8004496 <HAL_SPI_Transmit>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20002214 	.word	0x20002214

08000d60 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000d66:	23ff      	movs	r3, #255	; 0xff
 8000d68:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d6a:	bf00      	nop
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <SPI_RxByte+0x34>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d1f8      	bne.n	8000d6c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d7a:	1dba      	adds	r2, r7, #6
 8000d7c:	1df9      	adds	r1, r7, #7
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2301      	movs	r3, #1
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <SPI_RxByte+0x34>)
 8000d86:	f003 fcc2 	bl	800470e <HAL_SPI_TransmitReceive>

	return data;
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20002214 	.word	0x20002214

08000d98 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000da0:	f7ff ffde 	bl	8000d60 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <SD_ReadyWait+0x30>)
 8000dbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dc0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000dc2:	f7ff ffcd 	bl	8000d60 <SPI_RxByte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d003      	beq.n	8000dd8 <SD_ReadyWait+0x24>
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SD_ReadyWait+0x30>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f4      	bne.n	8000dc2 <SD_ReadyWait+0xe>

	return res;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000220a 	.word	0x2000220a

08000de8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000dee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000df2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000df4:	f7ff ff72 	bl	8000cdc <DESELECT>
	for(int i = 0; i < 10; i++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e005      	b.n	8000e0a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000dfe:	20ff      	movs	r0, #255	; 0xff
 8000e00:	f7ff ff7a 	bl	8000cf8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3301      	adds	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b09      	cmp	r3, #9
 8000e0e:	ddf6      	ble.n	8000dfe <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e10:	f7ff ff56 	bl	8000cc0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e28:	2395      	movs	r3, #149	; 0x95
 8000e2a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2106      	movs	r1, #6
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff7b 	bl	8000d2c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e36:	e002      	b.n	8000e3e <SD_PowerOn+0x56>
	{
		cnt--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e3e:	f7ff ff8f 	bl	8000d60 <SPI_RxByte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d002      	beq.n	8000e4e <SD_PowerOn+0x66>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f4      	bne.n	8000e38 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e4e:	f7ff ff45 	bl	8000cdc <DESELECT>
	SPI_TxByte(0XFF);
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	f7ff ff50 	bl	8000cf8 <SPI_TxByte>

	PowerFlag = 1;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <SD_PowerOn+0x80>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000220d 	.word	0x2000220d

08000e6c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <SD_PowerOff+0x14>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	2000220d 	.word	0x2000220d

08000e84 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <SD_CheckPower+0x14>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000220d 	.word	0x2000220d

08000e9c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <SD_RxDataBlock+0x58>)
 8000ea8:	22c8      	movs	r2, #200	; 0xc8
 8000eaa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000eac:	f7ff ff58 	bl	8000d60 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bff      	cmp	r3, #255	; 0xff
 8000eb8:	d103      	bne.n	8000ec2 <SD_RxDataBlock+0x26>
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <SD_RxDataBlock+0x58>)
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f4      	bne.n	8000eac <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ec6:	d001      	beq.n	8000ecc <SD_RxDataBlock+0x30>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e00f      	b.n	8000eec <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff60 	bl	8000d98 <SPI_RxBytePtr>
	} while(len--);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	603a      	str	r2, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f4      	bne.n	8000ecc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000ee2:	f7ff ff3d 	bl	8000d60 <SPI_RxByte>
	SPI_RxByte();
 8000ee6:	f7ff ff3b 	bl	8000d60 <SPI_RxByte>

	return TRUE;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20002208 	.word	0x20002208

08000ef8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f08:	f7ff ff54 	bl	8000db4 <SD_ReadyWait>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2bff      	cmp	r3, #255	; 0xff
 8000f10:	d001      	beq.n	8000f16 <SD_TxDataBlock+0x1e>
 8000f12:	2300      	movs	r3, #0
 8000f14:	e02f      	b.n	8000f76 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feed 	bl	8000cf8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2bfd      	cmp	r3, #253	; 0xfd
 8000f22:	d020      	beq.n	8000f66 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff feff 	bl	8000d2c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f2e:	f7ff ff17 	bl	8000d60 <SPI_RxByte>
		SPI_RxByte();
 8000f32:	f7ff ff15 	bl	8000d60 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000f36:	e00b      	b.n	8000f50 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000f38:	f7ff ff12 	bl	8000d60 <SPI_RxByte>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d006      	beq.n	8000f58 <SD_TxDataBlock+0x60>
			i++;
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	2b40      	cmp	r3, #64	; 0x40
 8000f54:	d9f0      	bls.n	8000f38 <SD_TxDataBlock+0x40>
 8000f56:	e000      	b.n	8000f5a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000f58:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ff00 	bl	8000d60 <SPI_RxByte>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0fa      	beq.n	8000f5c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d101      	bne.n	8000f74 <SD_TxDataBlock+0x7c>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000f8a:	f7ff ff13 	bl	8000db4 <SD_ReadyWait>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2bff      	cmp	r3, #255	; 0xff
 8000f92:	d001      	beq.n	8000f98 <SD_SendCmd+0x1a>
 8000f94:	23ff      	movs	r3, #255	; 0xff
 8000f96:	e042      	b.n	800101e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff feac 	bl	8000cf8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	0e1b      	lsrs	r3, r3, #24
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fea6 	bl	8000cf8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fea0 	bl	8000cf8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fe9a 	bl	8000cf8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe95 	bl	8000cf8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b40      	cmp	r3, #64	; 0x40
 8000fd2:	d102      	bne.n	8000fda <SD_SendCmd+0x5c>
 8000fd4:	2395      	movs	r3, #149	; 0x95
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e007      	b.n	8000fea <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b48      	cmp	r3, #72	; 0x48
 8000fde:	d102      	bne.n	8000fe6 <SD_SendCmd+0x68>
 8000fe0:	2387      	movs	r3, #135	; 0x87
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e001      	b.n	8000fea <SD_SendCmd+0x6c>
	else crc = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe83 	bl	8000cf8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ff6:	d101      	bne.n	8000ffc <SD_SendCmd+0x7e>
 8000ff8:	f7ff feb2 	bl	8000d60 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001000:	f7ff feae 	bl	8000d60 <SPI_RxByte>
 8001004:	4603      	mov	r3, r0
 8001006:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001008:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da05      	bge.n	800101c <SD_SendCmd+0x9e>
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3b01      	subs	r3, #1
 8001014:	73bb      	strb	r3, [r7, #14]
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f1      	bne.n	8001000 <SD_SendCmd+0x82>

	return res;
 800101c:	7b7b      	ldrb	r3, [r7, #13]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SD_disk_initialize+0x14>
 8001038:	2301      	movs	r3, #1
 800103a:	e0d1      	b.n	80011e0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800103c:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <SD_disk_initialize+0x1c0>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <SD_disk_initialize+0x2a>
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <SD_disk_initialize+0x1c0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	e0c6      	b.n	80011e0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001052:	f7ff fec9 	bl	8000de8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001056:	f7ff fe33 	bl	8000cc0 <SELECT>

	/* check disk type */
	type = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800105e:	2100      	movs	r1, #0
 8001060:	2040      	movs	r0, #64	; 0x40
 8001062:	f7ff ff8c 	bl	8000f7e <SD_SendCmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	f040 80a1 	bne.w	80011b0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800106e:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <SD_disk_initialize+0x1c4>)
 8001070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001074:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001076:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800107a:	2048      	movs	r0, #72	; 0x48
 800107c:	f7ff ff7f 	bl	8000f7e <SD_SendCmd>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d155      	bne.n	8001132 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e00c      	b.n	80010a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800108c:	7bfc      	ldrb	r4, [r7, #15]
 800108e:	f7ff fe67 	bl	8000d60 <SPI_RxByte>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	f104 0310 	add.w	r3, r4, #16
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	3301      	adds	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d9ef      	bls.n	800108c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010ac:	7abb      	ldrb	r3, [r7, #10]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d17e      	bne.n	80011b0 <SD_disk_initialize+0x188>
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	2baa      	cmp	r3, #170	; 0xaa
 80010b6:	d17b      	bne.n	80011b0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010b8:	2100      	movs	r1, #0
 80010ba:	2077      	movs	r0, #119	; 0x77
 80010bc:	f7ff ff5f 	bl	8000f7e <SD_SendCmd>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d807      	bhi.n	80010d6 <SD_disk_initialize+0xae>
 80010c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ca:	2069      	movs	r0, #105	; 0x69
 80010cc:	f7ff ff57 	bl	8000f7e <SD_SendCmd>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <SD_disk_initialize+0x1c4>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ec      	bne.n	80010b8 <SD_disk_initialize+0x90>
 80010de:	e000      	b.n	80010e2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <SD_disk_initialize+0x1c4>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d062      	beq.n	80011b0 <SD_disk_initialize+0x188>
 80010ea:	2100      	movs	r1, #0
 80010ec:	207a      	movs	r0, #122	; 0x7a
 80010ee:	f7ff ff46 	bl	8000f7e <SD_SendCmd>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d15b      	bne.n	80011b0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e00c      	b.n	8001118 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80010fe:	7bfc      	ldrb	r4, [r7, #15]
 8001100:	f7ff fe2e 	bl	8000d60 <SPI_RxByte>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	f104 0310 	add.w	r3, r4, #16
 800110c:	443b      	add	r3, r7
 800110e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	3301      	adds	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d9ef      	bls.n	80010fe <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800111e:	7a3b      	ldrb	r3, [r7, #8]
 8001120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SD_disk_initialize+0x104>
 8001128:	230c      	movs	r3, #12
 800112a:	e000      	b.n	800112e <SD_disk_initialize+0x106>
 800112c:	2304      	movs	r3, #4
 800112e:	73bb      	strb	r3, [r7, #14]
 8001130:	e03e      	b.n	80011b0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001132:	2100      	movs	r1, #0
 8001134:	2077      	movs	r0, #119	; 0x77
 8001136:	f7ff ff22 	bl	8000f7e <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d808      	bhi.n	8001152 <SD_disk_initialize+0x12a>
 8001140:	2100      	movs	r1, #0
 8001142:	2069      	movs	r0, #105	; 0x69
 8001144:	f7ff ff1b 	bl	8000f7e <SD_SendCmd>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d801      	bhi.n	8001152 <SD_disk_initialize+0x12a>
 800114e:	2302      	movs	r3, #2
 8001150:	e000      	b.n	8001154 <SD_disk_initialize+0x12c>
 8001152:	2301      	movs	r3, #1
 8001154:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10e      	bne.n	800117a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800115c:	2100      	movs	r1, #0
 800115e:	2077      	movs	r0, #119	; 0x77
 8001160:	f7ff ff0d 	bl	8000f7e <SD_SendCmd>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d80e      	bhi.n	8001188 <SD_disk_initialize+0x160>
 800116a:	2100      	movs	r1, #0
 800116c:	2069      	movs	r0, #105	; 0x69
 800116e:	f7ff ff06 	bl	8000f7e <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <SD_disk_initialize+0x160>
 8001178:	e00c      	b.n	8001194 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800117a:	2100      	movs	r1, #0
 800117c:	2041      	movs	r0, #65	; 0x41
 800117e:	f7ff fefe 	bl	8000f7e <SD_SendCmd>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <SD_disk_initialize+0x1c4>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d1e2      	bne.n	8001156 <SD_disk_initialize+0x12e>
 8001190:	e000      	b.n	8001194 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001192:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <SD_disk_initialize+0x1c4>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <SD_disk_initialize+0x184>
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	2050      	movs	r0, #80	; 0x50
 80011a2:	f7ff feec 	bl	8000f7e <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SD_disk_initialize+0x188>
 80011ac:	2300      	movs	r3, #0
 80011ae:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <SD_disk_initialize+0x1c8>)
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80011b6:	f7ff fd91 	bl	8000cdc <DESELECT>
	SPI_RxByte();
 80011ba:	f7ff fdd1 	bl	8000d60 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <SD_disk_initialize+0x1c0>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SD_disk_initialize+0x1c0>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e001      	b.n	80011da <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80011d6:	f7ff fe49 	bl	8000e6c <SD_PowerOff>
	}

	return Stat;
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SD_disk_initialize+0x1c0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20002208 	.word	0x20002208
 80011f0:	2000220c 	.word	0x2000220c

080011f4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SD_disk_status+0x14>
 8001204:	2301      	movs	r3, #1
 8001206:	e002      	b.n	800120e <SD_disk_status+0x1a>
	return Stat;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <SD_disk_status+0x28>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000

08001220 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <SD_disk_read+0x1c>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <SD_disk_read+0x20>
 800123c:	2304      	movs	r3, #4
 800123e:	e051      	b.n	80012e4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <SD_disk_read+0xcc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SD_disk_read+0x32>
 800124e:	2303      	movs	r3, #3
 8001250:	e048      	b.n	80012e4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <SD_disk_read+0xd0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <SD_disk_read+0x44>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	607b      	str	r3, [r7, #4]

	SELECT();
 8001264:	f7ff fd2c 	bl	8000cc0 <SELECT>

	if (count == 1)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d111      	bne.n	8001292 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2051      	movs	r0, #81	; 0x51
 8001272:	f7ff fe84 	bl	8000f7e <SD_SendCmd>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d129      	bne.n	80012d0 <SD_disk_read+0xb0>
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f7ff fe0b 	bl	8000e9c <SD_RxDataBlock>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <SD_disk_read+0xb0>
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	e01e      	b.n	80012d0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2052      	movs	r0, #82	; 0x52
 8001296:	f7ff fe72 	bl	8000f7e <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d117      	bne.n	80012d0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	68b8      	ldr	r0, [r7, #8]
 80012a6:	f7ff fdf9 	bl	8000e9c <SD_RxDataBlock>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <SD_disk_read+0xa6>
				buff += 512;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012b6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ed      	bne.n	80012a0 <SD_disk_read+0x80>
 80012c4:	e000      	b.n	80012c8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80012c6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80012c8:	2100      	movs	r1, #0
 80012ca:	204c      	movs	r0, #76	; 0x4c
 80012cc:	f7ff fe57 	bl	8000f7e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80012d0:	f7ff fd04 	bl	8000cdc <DESELECT>
	SPI_RxByte();
 80012d4:	f7ff fd44 	bl	8000d60 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	2000220c 	.word	0x2000220c

080012f4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <SD_disk_write+0x1c>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <SD_disk_write+0x20>
 8001310:	2304      	movs	r3, #4
 8001312:	e06b      	b.n	80013ec <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <SD_disk_write+0x100>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SD_disk_write+0x32>
 8001322:	2303      	movs	r3, #3
 8001324:	e062      	b.n	80013ec <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <SD_disk_write+0x100>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SD_disk_write+0x44>
 8001334:	2302      	movs	r3, #2
 8001336:	e059      	b.n	80013ec <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <SD_disk_write+0x104>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <SD_disk_write+0x56>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	025b      	lsls	r3, r3, #9
 8001348:	607b      	str	r3, [r7, #4]

	SELECT();
 800134a:	f7ff fcb9 	bl	8000cc0 <SELECT>

	if (count == 1)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d110      	bne.n	8001376 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	2058      	movs	r0, #88	; 0x58
 8001358:	f7ff fe11 	bl	8000f7e <SD_SendCmd>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d13a      	bne.n	80013d8 <SD_disk_write+0xe4>
 8001362:	21fe      	movs	r1, #254	; 0xfe
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f7ff fdc7 	bl	8000ef8 <SD_TxDataBlock>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d033      	beq.n	80013d8 <SD_disk_write+0xe4>
			count = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	e030      	b.n	80013d8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <SD_disk_write+0x104>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	2077      	movs	r0, #119	; 0x77
 8001386:	f7ff fdfa 	bl	8000f7e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	2057      	movs	r0, #87	; 0x57
 800138e:	f7ff fdf6 	bl	8000f7e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2059      	movs	r0, #89	; 0x59
 8001396:	f7ff fdf2 	bl	8000f7e <SD_SendCmd>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11b      	bne.n	80013d8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013a0:	21fc      	movs	r1, #252	; 0xfc
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f7ff fda8 	bl	8000ef8 <SD_TxDataBlock>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <SD_disk_write+0xd0>
				buff += 512;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013b4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1ee      	bne.n	80013a0 <SD_disk_write+0xac>
 80013c2:	e000      	b.n	80013c6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013c4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013c6:	21fd      	movs	r1, #253	; 0xfd
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fd95 	bl	8000ef8 <SD_TxDataBlock>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <SD_disk_write+0xe4>
			{
				count = 1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80013d8:	f7ff fc80 	bl	8000cdc <DESELECT>
	SPI_RxByte();
 80013dc:	f7ff fcc0 	bl	8000d60 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	2000220c 	.word	0x2000220c

080013fc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b08b      	sub	sp, #44	; 0x2c
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SD_disk_ioctl+0x1e>
 8001416:	2304      	movs	r3, #4
 8001418:	e115      	b.n	8001646 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b05      	cmp	r3, #5
 8001424:	d124      	bne.n	8001470 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d012      	beq.n	8001454 <SD_disk_ioctl+0x58>
 800142e:	2b02      	cmp	r3, #2
 8001430:	dc1a      	bgt.n	8001468 <SD_disk_ioctl+0x6c>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <SD_disk_ioctl+0x40>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d006      	beq.n	8001448 <SD_disk_ioctl+0x4c>
 800143a:	e015      	b.n	8001468 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800143c:	f7ff fd16 	bl	8000e6c <SD_PowerOff>
			res = RES_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001446:	e0fc      	b.n	8001642 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001448:	f7ff fcce 	bl	8000de8 <SD_PowerOn>
			res = RES_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001452:	e0f6      	b.n	8001642 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	1c5c      	adds	r4, r3, #1
 8001458:	f7ff fd14 	bl	8000e84 <SD_CheckPower>
 800145c:	4603      	mov	r3, r0
 800145e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001466:	e0ec      	b.n	8001642 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001468:	2304      	movs	r3, #4
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800146e:	e0e8      	b.n	8001642 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <SD_disk_ioctl+0x254>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SD_disk_ioctl+0x86>
 800147e:	2303      	movs	r3, #3
 8001480:	e0e1      	b.n	8001646 <SD_disk_ioctl+0x24a>

		SELECT();
 8001482:	f7ff fc1d 	bl	8000cc0 <SELECT>

		switch (ctrl)
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	2b0d      	cmp	r3, #13
 800148a:	f200 80cb 	bhi.w	8001624 <SD_disk_ioctl+0x228>
 800148e:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <SD_disk_ioctl+0x98>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	0800158f 	.word	0x0800158f
 8001498:	080014cd 	.word	0x080014cd
 800149c:	0800157f 	.word	0x0800157f
 80014a0:	08001625 	.word	0x08001625
 80014a4:	08001625 	.word	0x08001625
 80014a8:	08001625 	.word	0x08001625
 80014ac:	08001625 	.word	0x08001625
 80014b0:	08001625 	.word	0x08001625
 80014b4:	08001625 	.word	0x08001625
 80014b8:	08001625 	.word	0x08001625
 80014bc:	08001625 	.word	0x08001625
 80014c0:	080015a1 	.word	0x080015a1
 80014c4:	080015c5 	.word	0x080015c5
 80014c8:	080015e9 	.word	0x080015e9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014cc:	2100      	movs	r1, #0
 80014ce:	2049      	movs	r0, #73	; 0x49
 80014d0:	f7ff fd55 	bl	8000f7e <SD_SendCmd>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 80a8 	bne.w	800162c <SD_disk_ioctl+0x230>
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2110      	movs	r1, #16
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fcda 	bl	8000e9c <SD_RxDataBlock>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 809e 	beq.w	800162c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d10e      	bne.n	8001518 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80014fa:	7d7b      	ldrb	r3, [r7, #21]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	7d3b      	ldrb	r3, [r7, #20]
 8001500:	b29b      	uxth	r3, r3
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b29b      	uxth	r3, r3
 800150a:	3301      	adds	r3, #1
 800150c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800150e:	8bfb      	ldrh	r3, [r7, #30]
 8001510:	029a      	lsls	r2, r3, #10
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e02e      	b.n	8001576 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001518:	7c7b      	ldrb	r3, [r7, #17]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	b2da      	uxtb	r2, r3
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	09db      	lsrs	r3, r3, #7
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4413      	add	r3, r2
 8001528:	b2da      	uxtb	r2, r3
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 0306 	and.w	r3, r3, #6
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3302      	adds	r3, #2
 800153c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	7cfb      	ldrb	r3, [r7, #19]
 800154a:	b29b      	uxth	r3, r3
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	7cbb      	ldrb	r3, [r7, #18]
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	b29b      	uxth	r3, r3
 800155a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800155e:	b29b      	uxth	r3, r3
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001568:	8bfa      	ldrh	r2, [r7, #30]
 800156a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800156e:	3b09      	subs	r3, #9
 8001570:	409a      	lsls	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800157c:	e056      	b.n	800162c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001584:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800158c:	e055      	b.n	800163a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800158e:	f7ff fc11 	bl	8000db4 <SD_ReadyWait>
 8001592:	4603      	mov	r3, r0
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	d14b      	bne.n	8001630 <SD_disk_ioctl+0x234>
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800159e:	e047      	b.n	8001630 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015a0:	2100      	movs	r1, #0
 80015a2:	2049      	movs	r0, #73	; 0x49
 80015a4:	f7ff fceb 	bl	8000f7e <SD_SendCmd>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d142      	bne.n	8001634 <SD_disk_ioctl+0x238>
 80015ae:	2110      	movs	r1, #16
 80015b0:	6a38      	ldr	r0, [r7, #32]
 80015b2:	f7ff fc73 	bl	8000e9c <SD_RxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d03b      	beq.n	8001634 <SD_disk_ioctl+0x238>
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015c2:	e037      	b.n	8001634 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015c4:	2100      	movs	r1, #0
 80015c6:	204a      	movs	r0, #74	; 0x4a
 80015c8:	f7ff fcd9 	bl	8000f7e <SD_SendCmd>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d132      	bne.n	8001638 <SD_disk_ioctl+0x23c>
 80015d2:	2110      	movs	r1, #16
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	f7ff fc61 	bl	8000e9c <SD_RxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02b      	beq.n	8001638 <SD_disk_ioctl+0x23c>
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015e6:	e027      	b.n	8001638 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80015e8:	2100      	movs	r1, #0
 80015ea:	207a      	movs	r0, #122	; 0x7a
 80015ec:	f7ff fcc7 	bl	8000f7e <SD_SendCmd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fc:	e00b      	b.n	8001616 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80015fe:	6a3c      	ldr	r4, [r7, #32]
 8001600:	1c63      	adds	r3, r4, #1
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	f7ff fbac 	bl	8000d60 <SPI_RxByte>
 8001608:	4603      	mov	r3, r0
 800160a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800160c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001616:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800161a:	2b03      	cmp	r3, #3
 800161c:	d9ef      	bls.n	80015fe <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001624:	2304      	movs	r3, #4
 8001626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800162a:	e006      	b.n	800163a <SD_disk_ioctl+0x23e>
			break;
 800162c:	bf00      	nop
 800162e:	e004      	b.n	800163a <SD_disk_ioctl+0x23e>
			break;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <SD_disk_ioctl+0x23e>
			break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <SD_disk_ioctl+0x23e>
			break;
 8001638:	bf00      	nop
		}

		DESELECT();
 800163a:	f7ff fb4f 	bl	8000cdc <DESELECT>
		SPI_RxByte();
 800163e:	f7ff fb8f 	bl	8000d60 <SPI_RxByte>
	}

	return res;
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001646:	4618      	mov	r0, r3
 8001648:	372c      	adds	r7, #44	; 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop
 8001650:	20000000 	.word	0x20000000

08001654 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <MX_FREERTOS_Init+0x18>)
 800165a:	2100      	movs	r1, #0
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_FREERTOS_Init+0x1c>)
 800165e:	f00b fb35 	bl	800cccc <osThreadNew>
 8001662:	4603      	mov	r3, r0
 8001664:	4a03      	ldr	r2, [pc, #12]	; (8001674 <MX_FREERTOS_Init+0x20>)
 8001666:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	08011424 	.word	0x08011424
 8001670:	08001679 	.word	0x08001679
 8001674:	20002210 	.word	0x20002210

08001678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001680:	f00e fb14 	bl	800fcac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  SDcard_start();
 8001684:	f7ff fad0 	bl	8000c28 <SDcard_start>
  if(!start_send_data_tasks()){
 8001688:	f000 f886 	bl	8001798 <start_send_data_tasks>
 800168c:	4603      	mov	r3, r0
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d010      	beq.n	80016ba <StartDefaultTask+0x42>
	  USB_PRINT("error starting send data tasks");
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <StartDefaultTask+0x4c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2164      	movs	r1, #100	; 0x64
 800169e:	4618      	mov	r0, r3
 80016a0:	f00c f846 	bl	800d730 <xQueueSemaphoreTake>
 80016a4:	211e      	movs	r1, #30
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <StartDefaultTask+0x50>)
 80016a8:	f00e fbbe 	bl	800fe28 <CDC_Transmit_FS>
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <StartDefaultTask+0x4c>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	f00b fdc1 	bl	800d23c <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(1000);
 80016ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016be:	f00c fcff 	bl	800e0c0 <vTaskDelay>
 80016c2:	e7fa      	b.n	80016ba <StartDefaultTask+0x42>
 80016c4:	20002200 	.word	0x20002200
 80016c8:	0801131c 	.word	0x0801131c

080016cc <send_data>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void send_data(void* arg){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint32_t settings_in_bits = (uint32_t)arg;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
	QueueHandle_t SDcard_queue = SDcard_get_queue_handle();
 80016d8:	f7fe ff5c 	bl	8000594 <SDcard_get_queue_handle>
 80016dc:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint16_t period_ms = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t array_size = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	data_type_t type = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	if(settings_in_bits>>31){
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da03      	bge.n	80016fc <send_data+0x30>
		array_size = 3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016fa:	e002      	b.n	8001702 <send_data+0x36>
	} else {
		array_size = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	period_ms = (settings_in_bits<<1)>>16;
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	857b      	strh	r3, [r7, #42]	; 0x2a
	type = (settings_in_bits<<16)>>16;
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
//	for(;;){vTaskDelay(1);}
	TickType_t LastWakeTime = xTaskGetTickCount();
 8001710:	f00c fe26 	bl	800e360 <xTaskGetTickCount>
 8001714:	4603      	mov	r3, r0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;){
		vTaskDelayUntil(&LastWakeTime, pdMS_TO_TICKS(period_ms));
 8001718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800171a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1a      	ldr	r2, [pc, #104]	; (800178c <send_data+0xc0>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099a      	lsrs	r2, r3, #6
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f00c fc47 	bl	800dfc4 <vTaskDelayUntil>
		SD_data_t data = {
 8001736:	2320      	movs	r3, #32
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	232c      	movs	r3, #44	; 0x2c
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	233f      	movs	r3, #63	; 0x3f
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001746:	763b      	strb	r3, [r7, #24]
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001750:	f887 3020 	strb.w	r3, [r7, #32]
			.data_type = type,
			.timestamp = LastWakeTime,
			.array_size = array_size,
		};

		if(xQueueSend(SDcard_queue, (void*)&data, pdMS_TO_TICKS(100)) != pdTRUE){
 8001754:	f107 010c 	add.w	r1, r7, #12
 8001758:	2300      	movs	r3, #0
 800175a:	2264      	movs	r2, #100	; 0x64
 800175c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175e:	f00b fd6d 	bl	800d23c <xQueueGenericSend>
 8001762:	4603      	mov	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d0d7      	beq.n	8001718 <send_data+0x4c>
			USB_PRINT("fail send data to queue\n");
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <send_data+0xc4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2164      	movs	r1, #100	; 0x64
 800176e:	4618      	mov	r0, r3
 8001770:	f00b ffde 	bl	800d730 <xQueueSemaphoreTake>
 8001774:	2118      	movs	r1, #24
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <send_data+0xc8>)
 8001778:	f00e fb56 	bl	800fe28 <CDC_Transmit_FS>
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <send_data+0xc4>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	f00b fd59 	bl	800d23c <xQueueGenericSend>
	for(;;){
 800178a:	e7c5      	b.n	8001718 <send_data+0x4c>
 800178c:	10624dd3 	.word	0x10624dd3
 8001790:	20002200 	.word	0x20002200
 8001794:	0801133c 	.word	0x0801133c

08001798 <start_send_data_tasks>:
		}
	}
}


static bool start_send_data_tasks(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af02      	add	r7, sp, #8
	BaseType_t ret = pdTRUE;
 800179e:	2301      	movs	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
	uint32_t settings_in_bits = 0UL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

	settings_in_bits = 0<<31; //1 element array
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 1000<<15; // time in ms
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f103 73fa 	add.w	r3, r3, #32768000	; 0x1f40000
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
 80017b6:	e021      	b.n	80017fc <start_send_data_tasks+0x64>
	  settings_in_bits += one_1[i]; //type of data
 80017b8:	4aa3      	ldr	r2, [pc, #652]	; (8001a48 <start_send_data_tasks+0x2b0>)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	4413      	add	r3, r2
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	2200      	movs	r2, #0
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	2219      	movs	r2, #25
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	499d      	ldr	r1, [pc, #628]	; (8001a4c <start_send_data_tasks+0x2b4>)
 80017d8:	489d      	ldr	r0, [pc, #628]	; (8001a50 <start_send_data_tasks+0x2b8>)
 80017da:	f00c fa98 	bl	800dd0e <xTaskCreate>
 80017de:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <start_send_data_tasks+0x52>
 80017e6:	2300      	movs	r3, #0
 80017e8:	e12a      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	3301      	adds	r3, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d9da      	bls.n	80017b8 <start_send_data_tasks+0x20>
	}

	settings_in_bits = 0<<31; //1 element array
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 800180c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e021      	b.n	800185c <start_send_data_tasks+0xc4>
	  settings_in_bits += one_10[i]; //type of data
 8001818:	4a8e      	ldr	r2, [pc, #568]	; (8001a54 <start_send_data_tasks+0x2bc>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	4413      	add	r3, r2
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	2200      	movs	r2, #0
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	2219      	movs	r2, #25
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001836:	4985      	ldr	r1, [pc, #532]	; (8001a4c <start_send_data_tasks+0x2b4>)
 8001838:	4885      	ldr	r0, [pc, #532]	; (8001a50 <start_send_data_tasks+0x2b8>)
 800183a:	f00c fa68 	bl	800dd0e <xTaskCreate>
 800183e:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <start_send_data_tasks+0xb2>
 8001846:	2300      	movs	r3, #0
 8001848:	e0fa      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3301      	adds	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d9da      	bls.n	8001818 <start_send_data_tasks+0x80>
	}

	settings_in_bits = 0<<31; //1 element array
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 800186c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	e01e      	b.n	80018b6 <start_send_data_tasks+0x11e>
	  settings_in_bits += one_100[i]; //type of data
 8001878:	230e      	movs	r3, #14
 800187a:	461a      	mov	r2, r3
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	4413      	add	r3, r2
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	2200      	movs	r2, #0
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	2219      	movs	r2, #25
 800188a:	9200      	str	r2, [sp, #0]
 800188c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001890:	496e      	ldr	r1, [pc, #440]	; (8001a4c <start_send_data_tasks+0x2b4>)
 8001892:	486f      	ldr	r0, [pc, #444]	; (8001a50 <start_send_data_tasks+0x2b8>)
 8001894:	f00c fa3b 	bl	800dd0e <xTaskCreate>
 8001898:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <start_send_data_tasks+0x10c>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e0cd      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	3301      	adds	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0dd      	beq.n	8001878 <start_send_data_tasks+0xe0>
	}

	settings_in_bits = 1<<31; //3 element array
 80018bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 80018c8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e01e      	b.n	8001912 <start_send_data_tasks+0x17a>
	  settings_in_bits += three_1[i]; //type of data
 80018d4:	2306      	movs	r3, #6
 80018d6:	461a      	mov	r2, r3
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	4413      	add	r3, r2
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	2200      	movs	r2, #0
 80018e2:	9201      	str	r2, [sp, #4]
 80018e4:	2219      	movs	r2, #25
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ec:	4957      	ldr	r1, [pc, #348]	; (8001a4c <start_send_data_tasks+0x2b4>)
 80018ee:	4858      	ldr	r0, [pc, #352]	; (8001a50 <start_send_data_tasks+0x2b8>)
 80018f0:	f00c fa0d 	bl	800dd0e <xTaskCreate>
 80018f4:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <start_send_data_tasks+0x168>
 80018fc:	2300      	movs	r3, #0
 80018fe:	e09f      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001906:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0dd      	beq.n	80018d4 <start_send_data_tasks+0x13c>
	}
	settings_in_bits = 1<<31; //3 element array
 8001918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 8001924:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e021      	b.n	8001974 <start_send_data_tasks+0x1dc>
	  settings_in_bits += three_10[i]; //type of data
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <start_send_data_tasks+0x2c0>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	4413      	add	r3, r2
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	2200      	movs	r2, #0
 8001944:	9201      	str	r2, [sp, #4]
 8001946:	2219      	movs	r2, #25
 8001948:	9200      	str	r2, [sp, #0]
 800194a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800194e:	493f      	ldr	r1, [pc, #252]	; (8001a4c <start_send_data_tasks+0x2b4>)
 8001950:	483f      	ldr	r0, [pc, #252]	; (8001a50 <start_send_data_tasks+0x2b8>)
 8001952:	f00c f9dc 	bl	800dd0e <xTaskCreate>
 8001956:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <start_send_data_tasks+0x1ca>
 800195e:	2300      	movs	r3, #0
 8001960:	e06e      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	3301      	adds	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d9da      	bls.n	8001930 <start_send_data_tasks+0x198>
	}

	settings_in_bits = 1<<31; //3 element array
 800197a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 8001986:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e021      	b.n	80019d6 <start_send_data_tasks+0x23e>
	  settings_in_bits += three_100[i]; //type of data
 8001992:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <start_send_data_tasks+0x2c4>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	4413      	add	r3, r2
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	2200      	movs	r2, #0
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	2219      	movs	r2, #25
 80019aa:	9200      	str	r2, [sp, #0]
 80019ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b0:	4926      	ldr	r1, [pc, #152]	; (8001a4c <start_send_data_tasks+0x2b4>)
 80019b2:	4827      	ldr	r0, [pc, #156]	; (8001a50 <start_send_data_tasks+0x2b8>)
 80019b4:	f00c f9ab 	bl	800dd0e <xTaskCreate>
 80019b8:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <start_send_data_tasks+0x22c>
 80019c0:	2300      	movs	r3, #0
 80019c2:	e03d      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d9da      	bls.n	8001992 <start_send_data_tasks+0x1fa>
	}

	settings_in_bits = 1<<31; //3 element array
 80019dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10000<<15; // time in ms
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f103 539c 	add.w	r3, r3, #327155712	; 0x13800000
 80019e8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	e021      	b.n	8001a38 <start_send_data_tasks+0x2a0>
	  settings_in_bits += three_ap[i]; //type of data
 80019f4:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <start_send_data_tasks+0x2c8>)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	4413      	add	r3, r2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	2200      	movs	r2, #0
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	2219      	movs	r2, #25
 8001a0c:	9200      	str	r2, [sp, #0]
 8001a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <start_send_data_tasks+0x2b4>)
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <start_send_data_tasks+0x2b8>)
 8001a16:	f00c f97a 	bl	800dd0e <xTaskCreate>
 8001a1a:	6078      	str	r0, [r7, #4]
	  if(!ret) return false;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <start_send_data_tasks+0x28e>
 8001a22:	2300      	movs	r3, #0
 8001a24:	e00c      	b.n	8001a40 <start_send_data_tasks+0x2a8>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	3301      	adds	r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d9da      	bls.n	80019f4 <start_send_data_tasks+0x25c>
	}
	return true;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0801140c 	.word	0x0801140c
 8001a4c:	08011358 	.word	0x08011358
 8001a50:	080016cd 	.word	0x080016cd
 8001a54:	08011410 	.word	0x08011410
 8001a58:	08011414 	.word	0x08011414
 8001a5c:	0801141c 	.word	0x0801141c
 8001a60:	08011420 	.word	0x08011420

08001a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MX_GPIO_Init+0xc4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <MX_GPIO_Init+0xc8>)
 8001ad6:	f000 fd49 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2110      	movs	r1, #16
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <MX_GPIO_Init+0xcc>)
 8001ae0:	f000 fd44 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <MX_GPIO_Init+0xc8>)
 8001afe:	f000 fbb1 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b02:	2310      	movs	r3, #16
 8001b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_GPIO_Init+0xcc>)
 8001b1a:	f000 fba3 	bl	8002264 <HAL_GPIO_Init>

}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020000 	.word	0x40020000

08001b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b38:	f000 fa4c 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3c:	f000 f80e 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  int i = SDdcard_ieie();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b40:	f7ff ff90 	bl	8001a64 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b44:	f000 f890 	bl	8001c68 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001b48:	f004 ff1c 	bl	8006984 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b4c:	f00b f874 	bl	800cc38 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b50:	f7ff fd80 	bl	8001654 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b54:	f00b f894 	bl	800cc80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <main+0x24>
	...

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	; 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	2230      	movs	r2, #48	; 0x30
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00e fde8 	bl	8010740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <SystemClock_Config+0xd4>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <SystemClock_Config+0xd4>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <SystemClock_Config+0xd4>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <SystemClock_Config+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <SystemClock_Config+0xd8>)
 8001baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SystemClock_Config+0xd8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001bdc:	2390      	movs	r3, #144	; 0x90
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001be4:	2305      	movs	r3, #5
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 ff53 	bl	8003a98 <HAL_RCC_OscConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001bf8:	f000 f830 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 f9b6 	bl	8003f88 <HAL_RCC_ClockConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c22:	f000 f81b 	bl	8001c5c <Error_Handler>
  }
}
 8001c26:	bf00      	nop
 8001c28:	3750      	adds	r7, #80	; 0x50
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c4a:	f000 f9e5 	bl	8002018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40010000 	.word	0x40010000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <MX_SPI1_Init+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_SPI1_Init+0x64>)
 8001cba:	f002 fb63 	bl	8004384 <HAL_SPI_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cc4:	f7ff ffca 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20002214 	.word	0x20002214
 8001cd0:	40013000 	.word	0x40013000

08001cd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_SPI_MspInit+0x84>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12b      	bne.n	8001d4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_SPI_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d2e:	23e0      	movs	r3, #224	; 0xe0
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_SPI_MspInit+0x8c>)
 8001d4a:	f000 fa8b 	bl	8002264 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40013000 	.word	0x40013000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_MspInit+0x54>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_MspInit+0x54>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_MspInit+0x54>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_MspInit+0x54>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_MspInit+0x54>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_MspInit+0x54>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	210f      	movs	r1, #15
 8001da6:	f06f 0001 	mvn.w	r0, #1
 8001daa:	f000 fa31 	bl	8002210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	2019      	movs	r0, #25
 8001dd2:	f000 fa1d 	bl	8002210 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	f000 fa36 	bl	8002248 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_InitTick+0xa0>)
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_InitTick+0xa0>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6453      	str	r3, [r2, #68]	; 0x44
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_InitTick+0xa0>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df8:	f107 0210 	add.w	r2, r7, #16
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fa8c 	bl	8004320 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e08:	f002 fa76 	bl	80042f8 <HAL_RCC_GetPCLK2Freq>
 8001e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_InitTick+0xa4>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_InitTick+0xac>)
 8001e20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e3e:	f002 fed3 	bl	8004be8 <HAL_TIM_Base_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e48:	4806      	ldr	r0, [pc, #24]	; (8001e64 <HAL_InitTick+0xa8>)
 8001e4a:	f002 ff27 	bl	8004c9c <HAL_TIM_Base_Start_IT>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3730      	adds	r7, #48	; 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	2000226c 	.word	0x2000226c
 8001e68:	40010000 	.word	0x40010000

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler+0x4>

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(Timer1 > 0)
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <TIM1_UP_TIM10_IRQHandler+0x18>
		Timer1--;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001eae:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <TIM1_UP_TIM10_IRQHandler+0x2c>
		Timer2--;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001ec2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001ec6:	f002 ff4b 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20002208 	.word	0x20002208
 8001ed4:	2000220a 	.word	0x2000220a
 8001ed8:	2000226c 	.word	0x2000226c

08001edc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <OTG_FS_IRQHandler+0x10>)
 8001ee2:	f000 fcac 	bl	800283e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20007a20 	.word	0x20007a20

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f00e fbd4 	bl	80106cc <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20010000 	.word	0x20010000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	200022b4 	.word	0x200022b4
 8001f58:	20008160 	.word	0x20008160

08001f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <SystemInit+0x20>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <SystemInit+0x20>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001faa:	f7ff ffd7 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f00e fb93 	bl	80106d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7ff fdbf 	bl	8001b34 <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001fc4:	08011944 	.word	0x08011944
  ldr r2, =_sbss
 8001fc8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001fcc:	2000815c 	.word	0x2000815c

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 f8fc 	bl	80021fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f7ff feda 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff feac 	bl	8001d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c
 800203c:	200022b8 	.word	0x200022b8

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	200022b8 	.word	0x200022b8

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000000c 	.word	0x2000000c

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff4c 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002222:	f7ff ff61 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002226:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7ff ffb1 	bl	8002194 <NVIC_EncodePriority>
 8002232:	4602      	mov	r2, r0
 8002234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff80 	bl	8002140 <__NVIC_SetPriority>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff54 	bl	8002104 <__NVIC_EnableIRQ>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e159      	b.n	8002534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8148 	bne.w	800252e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d005      	beq.n	80022b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d130      	bne.n	8002318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	2203      	movs	r2, #3
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0201 	and.w	r2, r3, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d017      	beq.n	8002354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d123      	bne.n	80023a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0203 	and.w	r2, r3, #3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a2 	beq.w	800252e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_GPIO_Init+0x2e8>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_GPIO_Init+0x2e8>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002406:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_GPIO_Init+0x2ec>)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_GPIO_Init+0x2f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x202>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <HAL_GPIO_Init+0x2f4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x1fe>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a47      	ldr	r2, [pc, #284]	; (800255c <HAL_GPIO_Init+0x2f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x1fa>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a46      	ldr	r2, [pc, #280]	; (8002560 <HAL_GPIO_Init+0x2fc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x1f6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a45      	ldr	r2, [pc, #276]	; (8002564 <HAL_GPIO_Init+0x300>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1f2>
 8002452:	2304      	movs	r3, #4
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002456:	2307      	movs	r3, #7
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x204>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x204>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x204>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	; (8002550 <HAL_GPIO_Init+0x2ec>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <HAL_GPIO_Init+0x304>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_GPIO_Init+0x304>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_GPIO_Init+0x304>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_GPIO_Init+0x304>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_GPIO_Init+0x304>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_GPIO_Init+0x304>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f aea2 	bls.w	8002280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800259e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a0:	b08f      	sub	sp, #60	; 0x3c
 80025a2:	af0a      	add	r7, sp, #40	; 0x28
 80025a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e10f      	b.n	80027d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f00d fd74 	bl	80100b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fe8f 	bl	8005312 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	687e      	ldr	r6, [r7, #4]
 80025fc:	466d      	mov	r5, sp
 80025fe:	f106 0410 	add.w	r4, r6, #16
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800260e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002612:	1d33      	adds	r3, r6, #4
 8002614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f002 fd66 	bl	80050e8 <USB_CoreInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0d0      	b.n	80027d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fe7d 	bl	8005334 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e04a      	b.n	80026d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	333c      	adds	r3, #60	; 0x3c
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	b298      	uxth	r0, r3
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3344      	adds	r3, #68	; 0x44
 800267c:	4602      	mov	r2, r0
 800267e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3340      	adds	r3, #64	; 0x40
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3348      	adds	r3, #72	; 0x48
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	334c      	adds	r3, #76	; 0x4c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3354      	adds	r3, #84	; 0x54
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3af      	bcc.n	8002640 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e044      	b.n	8002770 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3301      	adds	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d3b5      	bcc.n	80026e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	687e      	ldr	r6, [r7, #4]
 8002782:	466d      	mov	r5, sp
 8002784:	f106 0410 	add.w	r4, r6, #16
 8002788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002794:	e885 0003 	stmia.w	r5, {r0, r1}
 8002798:	1d33      	adds	r3, r6, #4
 800279a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279c:	6838      	ldr	r0, [r7, #0]
 800279e:	f002 fe15 	bl	80053cc <USB_DevInit>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e00d      	b.n	80027d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 ff64 	bl	8006696 <USB_DevDisconnect>

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_PCD_Start+0x1c>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e020      	b.n	8002836 <HAL_PCD_Start+0x5e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b01      	cmp	r3, #1
 8002802:	d109      	bne.n	8002818 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002810:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fd67 	bl	80052f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 ff14 	bl	8006654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800283e:	b590      	push	{r4, r7, lr}
 8002840:	b08d      	sub	sp, #52	; 0x34
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 ffd2 	bl	80067fe <USB_GetMode>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 848a 	bne.w	8003176 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f003 ff36 	bl	80066d8 <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8480 	beq.w	8003174 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 ff23 	bl	80066d8 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d107      	bne.n	80028ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 0202 	and.w	r2, r2, #2
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 ff11 	bl	80066d8 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d161      	bne.n	8002984 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0210 	bic.w	r2, r2, #16
 80028ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	0c5b      	lsrs	r3, r3, #17
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d124      	bne.n	8002946 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d035      	beq.n	8002974 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6a38      	ldr	r0, [r7, #32]
 800291c:	f003 fd48 	bl	80063b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800292c:	441a      	add	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800293e:	441a      	add	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
 8002944:	e016      	b.n	8002974 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	0c5b      	lsrs	r3, r3, #17
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	2b06      	cmp	r3, #6
 8002950:	d110      	bne.n	8002974 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002958:	2208      	movs	r2, #8
 800295a:	4619      	mov	r1, r3
 800295c:	6a38      	ldr	r0, [r7, #32]
 800295e:	f003 fd27 	bl	80063b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296e:	441a      	add	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0210 	orr.w	r2, r2, #16
 8002982:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fea5 	bl	80066d8 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002994:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002998:	f040 80a7 	bne.w	8002aea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 feaa 	bl	80066fe <USB_ReadDevAllOutEpInterrupt>
 80029aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029ac:	e099      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 808e 	beq.w	8002ad6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fece 	bl	8006766 <USB_ReadDevOutEPInterrupt>
 80029ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e2:	461a      	mov	r2, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fec2 	bl	8003774 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a06:	461a      	mov	r2, r3
 8002a08:	2308      	movs	r3, #8
 8002a0a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 ff98 	bl	8003944 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d030      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d109      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a58:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	78db      	ldrb	r3, [r3, #3]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f00d fc13 	bl	80102b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	461a      	mov	r2, r3
 8002a98:	2302      	movs	r3, #2
 8002a9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	3301      	adds	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f af62 	bne.w	80029ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fdf2 	bl	80066d8 <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afe:	f040 80db 	bne.w	8002cb8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 fe13 	bl	8006732 <USB_ReadDevAllInEpInterrupt>
 8002b0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b12:	e0cd      	b.n	8002cb0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80c2 	beq.w	8002ca4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fe39 	bl	80067a2 <USB_ReadDevInEPInterrupt>
 8002b30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d057      	beq.n	8002bec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	2201      	movs	r2, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69f9      	ldr	r1, [r7, #28]
 8002b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2301      	movs	r3, #1
 8002b70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d132      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	334c      	adds	r3, #76	; 0x4c
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3348      	adds	r3, #72	; 0x48
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4419      	add	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4403      	add	r3, r0
 8002bae:	334c      	adds	r3, #76	; 0x4c
 8002bb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d113      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x3a2>
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3354      	adds	r3, #84	; 0x54
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2101      	movs	r1, #1
 8002bdc:	f003 fe40 	bl	8006860 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f00d fae7 	bl	80101ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2308      	movs	r3, #8
 8002c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2310      	movs	r3, #16
 8002c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2340      	movs	r3, #64	; 0x40
 8002c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d023      	beq.n	8002c92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4c:	6a38      	ldr	r0, [r7, #32]
 8002c4e:	f002 fd21 	bl	8005694 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	3338      	adds	r3, #56	; 0x38
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	3304      	adds	r3, #4
 8002c64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	78db      	ldrb	r3, [r3, #3]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f00d fb2a 	bl	80102d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2302      	movs	r3, #2
 8002c90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fcdb 	bl	800365a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f af2e 	bne.w	8002b14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fd0b 	bl	80066d8 <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ccc:	d122      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fec2 	bl	8003a80 <HAL_PCDEx_LPM_Callback>
 8002cfc:	e002      	b.n	8002d04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f00d fac8 	bl	8010294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fcdd 	bl	80066d8 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d28:	d112      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f00d fa84 	bl	8010248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d4e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fcbf 	bl	80066d8 <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d64:	f040 80b7 	bne.w	8002ed6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2110      	movs	r1, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fc86 	bl	8005694 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8c:	e046      	b.n	8002e1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002da0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002df4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	3301      	adds	r3, #1
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3b3      	bcc.n	8002d8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e52:	f043 030b 	orr.w	r3, r3, #11
 8002e56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e68:	f043 030b 	orr.w	r3, r3, #11
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	e015      	b.n	8002e9c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f043 030b 	orr.w	r3, r3, #11
 8002e9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f003 fccd 	bl	8006860 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fbfc 	bl	80066d8 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eea:	d124      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fc92 	bl	800681a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fc47 	bl	800578e <USB_GetDevSpeed>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	f001 f9e8 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8002f10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f002 f946 	bl	80051ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f00d f972 	bl	801020a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fbcc 	bl	80066d8 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d10a      	bne.n	8002f60 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f00d f94f 	bl	80101ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f002 0208 	and.w	r2, r2, #8
 8002f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fbb7 	bl	80066d8 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d122      	bne.n	8002fba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f80:	2301      	movs	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e014      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb27 	bl	80035f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3e5      	bcc.n	8002f86 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fb8a 	bl	80066d8 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fce:	d13b      	bne.n	8003048 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd4:	e02b      	b.n	800302e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3340      	adds	r3, #64	; 0x40
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d115      	bne.n	8003028 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da12      	bge.n	8003028 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	333f      	adds	r3, #63	; 0x3f
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fae8 	bl	80035f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3301      	adds	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	429a      	cmp	r2, r3
 8003036:	d3ce      	bcc.n	8002fd6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fb43 	bl	80066d8 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800305c:	d155      	bne.n	800310a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305e:	2301      	movs	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e045      	b.n	80030f0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d12e      	bne.n	80030ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800308c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	da2b      	bge.n	80030ea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800309e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d121      	bne.n	80030ea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6053      	str	r3, [r2, #4]
            break;
 80030e8:	e007      	b.n	80030fa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	3301      	adds	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3b4      	bcc.n	8003064 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fae2 	bl	80066d8 <USB_ReadInterrupts>
 8003114:	4603      	mov	r3, r0
 8003116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d10a      	bne.n	8003136 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f00d f8e9 	bl	80102f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 facc 	bl	80066d8 <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d115      	bne.n	8003176 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f00d f8d9 	bl	8010314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e000      	b.n	8003176 <HAL_PCD_IRQHandler+0x938>
      return;
 8003174:	bf00      	nop
    }
  }
}
 8003176:	3734      	adds	r7, #52	; 0x34
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_PCD_SetAddress+0x1a>
 8003192:	2302      	movs	r3, #2
 8003194:	e013      	b.n	80031be <HAL_PCD_SetAddress+0x42>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fa2a 	bl	8006608 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	4608      	mov	r0, r1
 80031d0:	4611      	mov	r1, r2
 80031d2:	461a      	mov	r2, r3
 80031d4:	4603      	mov	r3, r0
 80031d6:	70fb      	strb	r3, [r7, #3]
 80031d8:	460b      	mov	r3, r1
 80031da:	803b      	strh	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da0f      	bge.n	800320c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	3338      	adds	r3, #56	; 0x38
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	705a      	strb	r2, [r3, #1]
 800320a:	e00f      	b.n	800322c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003238:	883a      	ldrh	r2, [r7, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	78ba      	ldrb	r2, [r7, #2]
 8003242:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003256:	78bb      	ldrb	r3, [r7, #2]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d102      	bne.n	8003262 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_EP_Open+0xaa>
 800326c:	2302      	movs	r3, #2
 800326e:	e00e      	b.n	800328e <HAL_PCD_EP_Open+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f002 faaa 	bl	80057d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800328c:	7afb      	ldrb	r3, [r7, #11]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0f      	bge.n	80032ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	705a      	strb	r2, [r3, #1]
 80032c8:	e00f      	b.n	80032ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_Close+0x6e>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_Close+0x8c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fae8 	bl	80058e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	b2da      	uxtb	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	f002 fdc7 	bl	8005f30 <USB_EP0StartXfer>
 80033a2:	e008      	b.n	80033b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	6979      	ldr	r1, [r7, #20]
 80033b2:	f002 fb75 	bl	8005aa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	f003 020f 	and.w	r2, r3, #15
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3338      	adds	r3, #56	; 0x38
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	f002 fd65 	bl	8005f30 <USB_EP0StartXfer>
 8003466:	e008      	b.n	800347a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	f002 fb13 	bl	8005aa0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d901      	bls.n	80034a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e050      	b.n	8003544 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da0f      	bge.n	80034ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3338      	adds	r3, #56	; 0x38
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	705a      	strb	r2, [r3, #1]
 80034c8:	e00d      	b.n	80034e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_EP_SetStall+0x82>
 8003502:	2302      	movs	r3, #2
 8003504:	e01e      	b.n	8003544 <HAL_PCD_EP_SetStall+0xc0>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f002 ffa3 	bl	8006460 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	b2d9      	uxtb	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003534:	461a      	mov	r2, r3
 8003536:	f003 f993 	bl	8006860 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d901      	bls.n	800356a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e042      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800356a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da0f      	bge.n	8003592 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3338      	adds	r3, #56	; 0x38
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	705a      	strb	r2, [r3, #1]
 8003590:	e00f      	b.n	80035b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_EP_ClrStall+0x86>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e00e      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 ffab 	bl	800653c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0c      	bge.n	8003626 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3338      	adds	r3, #56	; 0x38
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e00c      	b.n	8003640 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fdca 	bl	80061e0 <USB_EPStopXfer>
 800364c:	4603      	mov	r3, r0
 800364e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003650:	7afb      	ldrb	r3, [r7, #11]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08a      	sub	sp, #40	; 0x28
 800365e:	af02      	add	r7, sp, #8
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3338      	adds	r3, #56	; 0x38
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	429a      	cmp	r2, r3
 800368c:	d901      	bls.n	8003692 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06c      	b.n	800376c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d902      	bls.n	80036ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3303      	adds	r3, #3
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b6:	e02b      	b.n	8003710 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d902      	bls.n	80036d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3303      	adds	r3, #3
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6919      	ldr	r1, [r3, #16]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f002 fe1e 	bl	8006334 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	441a      	add	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	b29b      	uxth	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	429a      	cmp	r2, r3
 8003724:	d809      	bhi.n	800373a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800372e:	429a      	cmp	r2, r3
 8003730:	d203      	bcs.n	800373a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1be      	bne.n	80036b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	429a      	cmp	r2, r3
 8003744:	d811      	bhi.n	800376a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	2201      	movs	r2, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	43db      	mvns	r3, r3
 8003760:	6939      	ldr	r1, [r7, #16]
 8003762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003766:	4013      	ands	r3, r2
 8003768:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	333c      	adds	r3, #60	; 0x3c
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d17b      	bne.n	80038a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4a61      	ldr	r2, [pc, #388]	; (800393c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f240 80b9 	bls.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80b3 	beq.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037dc:	6093      	str	r3, [r2, #8]
 80037de:	e0a7      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2320      	movs	r3, #32
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	e098      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8093 	bne.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4a4b      	ldr	r2, [pc, #300]	; (800393c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d90f      	bls.n	8003832 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	e07e      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	440b      	add	r3, r1
 8003854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	1ad2      	subs	r2, r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d114      	bne.n	8003894 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800387c:	461a      	mov	r2, r3
 800387e:	2101      	movs	r1, #1
 8003880:	f002 ffee 	bl	8006860 <USB_EP0_OutStart>
 8003884:	e006      	b.n	8003894 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f00c fc72 	bl	8010184 <HAL_PCD_DataOutStageCallback>
 80038a0:	e046      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d124      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	461a      	mov	r2, r3
 80038c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	e032      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	461a      	mov	r2, r3
 80038e2:	2320      	movs	r3, #32
 80038e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f00c fc49 	bl	8010184 <HAL_PCD_DataOutStageCallback>
 80038f2:	e01d      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d114      	bne.n	8003924 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800391c:	461a      	mov	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f002 ff9e 	bl	8006860 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f00c fc2a 	bl	8010184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	4f54300a 	.word	0x4f54300a
 8003940:	4f54310a 	.word	0x4f54310a

08003944 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	333c      	adds	r3, #60	; 0x3c
 800395c:	3304      	adds	r3, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d90e      	bls.n	8003998 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	461a      	mov	r2, r3
 8003992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003996:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00c fbe1 	bl	8010160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <PCD_EP_OutSetupPacket_int+0x88>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d90c      	bls.n	80039c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d108      	bne.n	80039c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039b8:	461a      	mov	r2, r3
 80039ba:	2101      	movs	r1, #1
 80039bc:	f002 ff50 	bl	8006860 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	4f54300a 	.word	0x4f54300a

080039d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	4613      	mov	r3, r2
 80039de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039ee:	883b      	ldrh	r3, [r7, #0]
 80039f0:	0419      	lsls	r1, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
 80039fc:	e028      	b.n	8003a50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e00d      	b.n	8003a2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3340      	adds	r3, #64	; 0x40
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3ec      	bcc.n	8003a12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a38:	883b      	ldrh	r3, [r7, #0]
 8003a3a:	0418      	lsls	r0, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	4302      	orrs	r2, r0
 8003a48:	3340      	adds	r3, #64	; 0x40
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e267      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab6:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b85      	ldr	r3, [pc, #532]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e242      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b76      	ldr	r3, [pc, #472]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b6d      	ldr	r3, [pc, #436]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6c      	ldr	r2, [pc, #432]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a68      	ldr	r2, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a65      	ldr	r2, [pc, #404]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fa76 	bl	8002040 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fa72 	bl	8002040 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e207      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fa62 	bl	8002040 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fa5e 	bl	8002040 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1f3      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4937      	ldr	r1, [pc, #220]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fa17 	bl	8002040 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe fa13 	bl	8002040 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a8      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4925      	ldr	r1, [pc, #148]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe f9f6 	bl	8002040 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe f9f2 	bl	8002040 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e187      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d036      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe f9d6 	bl	8002040 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe f9d2 	bl	8002040 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e167      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe f9bf 	bl	8002040 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe f9bb 	bl	8002040 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d907      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e150      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	42470000 	.word	0x42470000
 8003ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ea      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8097 	beq.w	8003e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b81      	ldr	r3, [pc, #516]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b7d      	ldr	r3, [pc, #500]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a7c      	ldr	r2, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b77      	ldr	r3, [pc, #476]	; (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b74      	ldr	r3, [pc, #464]	; (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	; (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe f97b 	bl	8002040 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe f977 	bl	8002040 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e10c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2ea>
 8003d74:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a63      	ldr	r2, [pc, #396]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x30c>
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a5e      	ldr	r2, [pc, #376]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003da4:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a54      	ldr	r2, [pc, #336]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f93c 	bl	8002040 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe f938 	bl	8002040 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0cb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCC_OscConfig+0x334>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe f926 	bl	8002040 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe f922 	bl	8002040 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b5      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a1 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e36:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d05c      	beq.n	8003efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d141      	bne.n	8003ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe f8f6 	bl	8002040 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe f8f2 	bl	8002040 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e087      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	491b      	ldr	r1, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe f8cb 	bl	8002040 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe f8c7 	bl	8002040 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e05c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x416>
 8003ecc:	e054      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f8b4 	bl	8002040 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe f8b0 	bl	8002040 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x444>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e038      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d028      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d121      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cc      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b68      	ldr	r3, [pc, #416]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90c      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d044      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d119      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e067      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4934      	ldr	r1, [pc, #208]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd ffe2 	bl	8002040 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd ffde 	bl	8002040 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd fe44 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08011448 	.word	0x08011448
 800414c:	20000004 	.word	0x20000004
 8004150:	20000008 	.word	0x20000008

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b090      	sub	sp, #64	; 0x40
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
 8004160:	2300      	movs	r3, #0
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004164:	2300      	movs	r3, #0
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80a1 	bhi.w	80042c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e09b      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800418c:	e09b      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 8004190:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004192:	e098      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b4f      	ldr	r3, [pc, #316]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b4d      	ldr	r3, [pc, #308]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d028      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b4a      	ldr	r3, [pc, #296]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	627a      	str	r2, [r7, #36]	; 0x24
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041bc:	2100      	movs	r1, #0
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 80041c0:	fb03 f201 	mul.w	r2, r3, r1
 80041c4:	2300      	movs	r3, #0
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	4a43      	ldr	r2, [pc, #268]	; (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 80041ce:	fba0 1202 	umull	r1, r2, r0, r2
 80041d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d4:	460a      	mov	r2, r1
 80041d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	4413      	add	r3, r2
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	2200      	movs	r2, #0
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041ee:	f7fc f84f 	bl	8000290 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4613      	mov	r3, r2
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fa:	e053      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	2200      	movs	r2, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	617a      	str	r2, [r7, #20]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800420e:	f04f 0b00 	mov.w	fp, #0
 8004212:	4652      	mov	r2, sl
 8004214:	465b      	mov	r3, fp
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	ebb2 080a 	subs.w	r8, r2, sl
 800422e:	eb63 090b 	sbc.w	r9, r3, fp
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800423e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004242:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004246:	ebb2 0408 	subs.w	r4, r2, r8
 800424a:	eb63 0509 	sbc.w	r5, r3, r9
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	00eb      	lsls	r3, r5, #3
 8004258:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425c:	00e2      	lsls	r2, r4, #3
 800425e:	4614      	mov	r4, r2
 8004260:	461d      	mov	r5, r3
 8004262:	eb14 030a 	adds.w	r3, r4, sl
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	eb45 030b 	adc.w	r3, r5, fp
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427a:	4629      	mov	r1, r5
 800427c:	028b      	lsls	r3, r1, #10
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004284:	4621      	mov	r1, r4
 8004286:	028a      	lsls	r2, r1, #10
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	2200      	movs	r2, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004298:	f7fb fffa 	bl	8000290 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3740      	adds	r7, #64	; 0x40
 80042cc:	46bd      	mov	sp, r7
 80042ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	017d7840 	.word	0x017d7840

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000004 	.word	0x20000004

080042f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0b5b      	lsrs	r3, r3, #13
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK2Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	08011458 	.word	0x08011458

08004320 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	220f      	movs	r2, #15
 800432e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_GetClockConfig+0x5c>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0203 	and.w	r2, r3, #3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <HAL_RCC_GetClockConfig+0x5c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_GetClockConfig+0x5c>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_GetClockConfig+0x5c>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	08db      	lsrs	r3, r3, #3
 800435a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_RCC_GetClockConfig+0x60>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0207 	and.w	r2, r3, #7
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	601a      	str	r2, [r3, #0]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40023c00 	.word	0x40023c00

08004384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e07b      	b.n	800448e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d009      	beq.n	80043bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	61da      	str	r2, [r3, #28]
 80043ae:	e005      	b.n	80043bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fc7c 	bl	8001cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0104 	and.w	r1, r3, #4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	f003 0210 	and.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b088      	sub	sp, #32
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_SPI_Transmit+0x22>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e126      	b.n	8004706 <HAL_SPI_Transmit+0x270>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c0:	f7fd fdbe 	bl	8002040 <HAL_GetTick>
 80044c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d002      	beq.n	80044dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044da:	e10b      	b.n	80046f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_Transmit+0x52>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044ec:	e102      	b.n	80046f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2203      	movs	r2, #3
 80044f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004534:	d10f      	bne.n	8004556 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004554:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d007      	beq.n	8004574 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457c:	d14b      	bne.n	8004616 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SPI_Transmit+0xf6>
 8004586:	8afb      	ldrh	r3, [r7, #22]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d13e      	bne.n	800460a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045b0:	e02b      	b.n	800460a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d112      	bne.n	80045e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e4:	e011      	b.n	800460a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e6:	f7fd fd2b 	bl	8002040 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d803      	bhi.n	80045fe <HAL_SPI_Transmit+0x168>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d102      	bne.n	8004604 <HAL_SPI_Transmit+0x16e>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004608:	e074      	b.n	80046f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ce      	bne.n	80045b2 <HAL_SPI_Transmit+0x11c>
 8004614:	e04c      	b.n	80046b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_SPI_Transmit+0x18e>
 800461e:	8afb      	ldrh	r3, [r7, #22]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d140      	bne.n	80046a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800464a:	e02c      	b.n	80046a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b02      	cmp	r3, #2
 8004658:	d113      	bne.n	8004682 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004680:	e011      	b.n	80046a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004682:	f7fd fcdd 	bl	8002040 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d803      	bhi.n	800469a <HAL_SPI_Transmit+0x204>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Transmit+0x20a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a4:	e026      	b.n	80046f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1cd      	bne.n	800464c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	6839      	ldr	r1, [r7, #0]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fa55 	bl	8004b64 <SPI_EndRxTxTransaction>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e000      	b.n	80046f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80046f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004704:	7ffb      	ldrb	r3, [r7, #31]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08c      	sub	sp, #48	; 0x30
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800471c:	2301      	movs	r3, #1
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x26>
 8004730:	2302      	movs	r3, #2
 8004732:	e18a      	b.n	8004a4a <HAL_SPI_TransmitReceive+0x33c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800473c:	f7fd fc80 	bl	8002040 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800475a:	2b01      	cmp	r3, #1
 800475c:	d00f      	beq.n	800477e <HAL_SPI_TransmitReceive+0x70>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004764:	d107      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_SPI_TransmitReceive+0x68>
 800476e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004772:	2b04      	cmp	r3, #4
 8004774:	d003      	beq.n	800477e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004776:	2302      	movs	r3, #2
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800477c:	e15b      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x82>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x82>
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004796:	e14e      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d003      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2205      	movs	r2, #5
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	887a      	ldrh	r2, [r7, #2]
 80047ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	d178      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_TransmitReceive+0x10a>
 8004812:	8b7b      	ldrh	r3, [r7, #26]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d166      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	e053      	b.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d11b      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x176>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x176>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d113      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d119      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x1b8>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d014      	beq.n	80048c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	b292      	uxth	r2, r2
 80048a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c2:	2301      	movs	r3, #1
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048c6:	f7fd fbbb 	bl	8002040 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d807      	bhi.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d003      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048e4:	e0a7      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1a6      	bne.n	800483e <HAL_SPI_TransmitReceive+0x130>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1a1      	bne.n	800483e <HAL_SPI_TransmitReceive+0x130>
 80048fa:	e07c      	b.n	80049f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SPI_TransmitReceive+0x1fc>
 8004904:	8b7b      	ldrh	r3, [r7, #26]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d16b      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004930:	e057      	b.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d11c      	bne.n	800497a <HAL_SPI_TransmitReceive+0x26c>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d017      	beq.n	800497a <HAL_SPI_TransmitReceive+0x26c>
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d114      	bne.n	800497a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d119      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x2ae>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049bc:	f7fd fb40 	bl	8002040 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d803      	bhi.n	80049d4 <HAL_SPI_TransmitReceive+0x2c6>
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d102      	bne.n	80049da <HAL_SPI_TransmitReceive+0x2cc>
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049e0:	e029      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1a2      	bne.n	8004932 <HAL_SPI_TransmitReceive+0x224>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d19d      	bne.n	8004932 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f8b2 	bl	8004b64 <SPI_EndRxTxTransaction>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a12:	e010      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	e000      	b.n	8004a36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a64:	f7fd faec 	bl	8002040 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4413      	add	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a74:	f7fd fae4 	bl	8002040 <HAL_GetTick>
 8004a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	0d1b      	lsrs	r3, r3, #20
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8a:	e054      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d050      	beq.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a94:	f7fd fad4 	bl	8002040 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d902      	bls.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d13d      	bne.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ac2:	d111      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004acc:	d004      	beq.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad6:	d107      	bne.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d10f      	bne.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e017      	b.n	8004b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	bf0c      	ite	eq
 8004b46:	2301      	moveq	r3, #1
 8004b48:	2300      	movne	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d19b      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000004 	.word	0x20000004

08004b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b70:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <SPI_EndRxTxTransaction+0x7c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <SPI_EndRxTxTransaction+0x80>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0d5b      	lsrs	r3, r3, #21
 8004b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d112      	bne.n	8004bb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff5a 	bl	8004a54 <SPI_WaitFlagStateUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d0f2      	beq.n	8004bb6 <SPI_EndRxTxTransaction+0x52>
 8004bd0:	e000      	b.n	8004bd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004bd2:	bf00      	nop
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000004 	.word	0x20000004
 8004be4:	165e9f81 	.word	0x165e9f81

08004be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e041      	b.n	8004c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f839 	bl	8004c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f000 f9ca 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d001      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e044      	b.n	8004d3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <HAL_TIM_Base_Start_IT+0xb0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d018      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x6c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cde:	d013      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x6c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00e      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x6c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d009      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x6c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_TIM_Base_Start_IT+0xbc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0x6c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIM_Base_Start_IT+0xc0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d111      	bne.n	8004d2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d010      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e007      	b.n	8004d3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000

08004d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0202 	mvn.w	r2, #2
 8004d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8ee 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8e0 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8f1 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0204 	mvn.w	r2, #4
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8c4 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8b6 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8c7 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0208 	mvn.w	r2, #8
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f89a 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f88c 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f89d 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0210 	mvn.w	r2, #16
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f870 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f862 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f873 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0201 	mvn.w	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc feaa 	bl	8001c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8e2 	bl	80050d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f838 	bl	8004fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0220 	mvn.w	r2, #32
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8ac 	bl	80050c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a31      	ldr	r2, [pc, #196]	; (80050a8 <TIM_Base_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a30      	ldr	r2, [pc, #192]	; (80050ac <TIM_Base_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0x38>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <TIM_Base_SetConfig+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d108      	bne.n	800500a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <TIM_Base_SetConfig+0xe8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a21      	ldr	r2, [pc, #132]	; (80050ac <TIM_Base_SetConfig+0xec>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <TIM_Base_SetConfig+0xf0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <TIM_Base_SetConfig+0xf4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <TIM_Base_SetConfig+0xf8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0x8a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <TIM_Base_SetConfig+0xfc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <TIM_Base_SetConfig+0xe4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 001c 	add.w	r0, r7, #28
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d122      	bne.n	8005146 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d105      	bne.n	800513a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fbee 	bl	800691c <USB_CoreReset>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e01a      	b.n	800517c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 fbe2 	bl	800691c <USB_CoreReset>
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
 800516e:	e005      	b.n	800517c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0206 	orr.w	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
	...

080051ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d165      	bne.n	800528c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4a41      	ldr	r2, [pc, #260]	; (80052c8 <USB_SetTurnaroundTime+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d906      	bls.n	80051d6 <USB_SetTurnaroundTime+0x2a>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d202      	bcs.n	80051d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d0:	230f      	movs	r3, #15
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e062      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a3c      	ldr	r2, [pc, #240]	; (80052cc <USB_SetTurnaroundTime+0x120>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d306      	bcc.n	80051ec <USB_SetTurnaroundTime+0x40>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a3b      	ldr	r2, [pc, #236]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d202      	bcs.n	80051ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051e6:	230e      	movs	r3, #14
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e057      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <USB_SetTurnaroundTime+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d306      	bcc.n	8005202 <USB_SetTurnaroundTime+0x56>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d202      	bcs.n	8005202 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051fc:	230d      	movs	r3, #13
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e04c      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <USB_SetTurnaroundTime+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d306      	bcc.n	8005218 <USB_SetTurnaroundTime+0x6c>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4a32      	ldr	r2, [pc, #200]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d802      	bhi.n	8005218 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005212:	230c      	movs	r3, #12
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e041      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <USB_SetTurnaroundTime+0x12c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d906      	bls.n	800522e <USB_SetTurnaroundTime+0x82>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d802      	bhi.n	800522e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005228:	230b      	movs	r3, #11
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e036      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <USB_SetTurnaroundTime+0x130>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d906      	bls.n	8005244 <USB_SetTurnaroundTime+0x98>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d802      	bhi.n	8005244 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800523e:	230a      	movs	r3, #10
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e02b      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <USB_SetTurnaroundTime+0x134>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d906      	bls.n	800525a <USB_SetTurnaroundTime+0xae>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d202      	bcs.n	800525a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005254:	2309      	movs	r3, #9
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e020      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <USB_SetTurnaroundTime+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d306      	bcc.n	8005270 <USB_SetTurnaroundTime+0xc4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d802      	bhi.n	8005270 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526a:	2308      	movs	r3, #8
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e015      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <USB_SetTurnaroundTime+0x13c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d906      	bls.n	8005286 <USB_SetTurnaroundTime+0xda>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <USB_SetTurnaroundTime+0x140>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d202      	bcs.n	8005286 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005280:	2307      	movs	r3, #7
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e00a      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005286:	2306      	movs	r3, #6
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	e007      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005292:	2309      	movs	r3, #9
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e001      	b.n	800529c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005298:	2309      	movs	r3, #9
 800529a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00d8acbf 	.word	0x00d8acbf
 80052cc:	00e4e1c0 	.word	0x00e4e1c0
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	01067380 	.word	0x01067380
 80052d8:	011a499f 	.word	0x011a499f
 80052dc:	01312cff 	.word	0x01312cff
 80052e0:	014ca43f 	.word	0x014ca43f
 80052e4:	016e3600 	.word	0x016e3600
 80052e8:	01a6ab1f 	.word	0x01a6ab1f
 80052ec:	01e84800 	.word	0x01e84800

080052f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d115      	bne.n	8005382 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005362:	2001      	movs	r0, #1
 8005364:	f7fc fe78 	bl	8002058 <HAL_Delay>
      ms++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 fa45 	bl	80067fe <USB_GetMode>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d01e      	beq.n	80053b8 <USB_SetCurrentMode+0x84>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b31      	cmp	r3, #49	; 0x31
 800537e:	d9f0      	bls.n	8005362 <USB_SetCurrentMode+0x2e>
 8005380:	e01a      	b.n	80053b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d115      	bne.n	80053b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005394:	2001      	movs	r0, #1
 8005396:	f7fc fe5f 	bl	8002058 <HAL_Delay>
      ms++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 fa2c 	bl	80067fe <USB_GetMode>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <USB_SetCurrentMode+0x84>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b31      	cmp	r3, #49	; 0x31
 80053b0:	d9f0      	bls.n	8005394 <USB_SetCurrentMode+0x60>
 80053b2:	e001      	b.n	80053b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e005      	b.n	80053c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b32      	cmp	r3, #50	; 0x32
 80053bc:	d101      	bne.n	80053c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053cc:	b084      	sub	sp, #16
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e009      	b.n	8005400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3340      	adds	r3, #64	; 0x40
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3301      	adds	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0e      	cmp	r3, #14
 8005404:	d9f2      	bls.n	80053ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11c      	bne.n	8005446 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005430:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
 8005444:	e00b      	b.n	800545e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005464:	461a      	mov	r2, r3
 8005466:	2300      	movs	r3, #0
 8005468:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	4619      	mov	r1, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	461a      	mov	r2, r3
 800547a:	680b      	ldr	r3, [r1, #0]
 800547c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10c      	bne.n	800549e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d104      	bne.n	8005494 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f965 	bl	800575c <USB_SetDevSpeed>
 8005492:	e008      	b.n	80054a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005494:	2101      	movs	r1, #1
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f960 	bl	800575c <USB_SetDevSpeed>
 800549c:	e003      	b.n	80054a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800549e:	2103      	movs	r1, #3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f95b 	bl	800575c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054a6:	2110      	movs	r1, #16
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8f3 	bl	8005694 <USB_FlushTxFifo>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f91f 	bl	80056fc <USB_FlushRxFifo>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	461a      	mov	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e043      	b.n	800557a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005508:	d118      	bne.n	800553c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e013      	b.n	800554e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e008      	b.n	800554e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	461a      	mov	r2, r3
 800554a:	2300      	movs	r3, #0
 800554c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	461a      	mov	r2, r3
 800556e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005572:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3301      	adds	r3, #1
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	429a      	cmp	r2, r3
 8005580:	d3b7      	bcc.n	80054f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e043      	b.n	8005610 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559e:	d118      	bne.n	80055d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e013      	b.n	80055e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	461a      	mov	r2, r3
 80055ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	e008      	b.n	80055e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	461a      	mov	r2, r3
 8005604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005608:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3301      	adds	r3, #1
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3b7      	bcc.n	8005588 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005638:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f043 0210 	orr.w	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <USB_DevInit+0x2c4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f043 0208 	orr.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568c:	b004      	add	sp, #16
 800568e:	4770      	bx	lr
 8005690:	803c3800 	.word	0x803c3800

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <USB_FlushTxFifo+0x64>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e01b      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	daf2      	bge.n	80056a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <USB_FlushTxFifo+0x64>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d0f0      	beq.n	80056cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <USB_FlushRxFifo+0x5c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e018      	b.n	800574c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	daf2      	bge.n	8005708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2210      	movs	r2, #16
 800572a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a08      	ldr	r2, [pc, #32]	; (8005758 <USB_FlushRxFifo+0x5c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b10      	cmp	r3, #16
 8005748:	d0f0      	beq.n	800572c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	00030d40 	.word	0x00030d40

0800575c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0306 	and.w	r3, r3, #6
 80057a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]
 80057b2:	e00a      	b.n	80057ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d002      	beq.n	80057c0 <USB_GetDevSpeed+0x32>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d102      	bne.n	80057c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057c0:	2302      	movs	r3, #2
 80057c2:	75fb      	strb	r3, [r7, #23]
 80057c4:	e001      	b.n	80057ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057c6:	230f      	movs	r3, #15
 80057c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d13a      	bne.n	800586a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005812:	4313      	orrs	r3, r2
 8005814:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d155      	bne.n	80058d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005848:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	059b      	lsls	r3, r3, #22
 800584e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005850:	4313      	orrs	r3, r2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e036      	b.n	80058d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	2101      	movs	r1, #1
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005888:	4313      	orrs	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11a      	bne.n	80058d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058be:	430b      	orrs	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d161      	bne.n	80059c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800591a:	d11f      	bne.n	800595c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800593a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	2101      	movs	r1, #1
 800596e:	fa01 f303 	lsl.w	r3, r1, r3
 8005972:	b29b      	uxth	r3, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4013      	ands	r3, r2
 800597e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	2101      	movs	r1, #1
 8005992:	fa01 f303 	lsl.w	r3, r1, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4013      	ands	r3, r2
 80059a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0159      	lsls	r1, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	4619      	mov	r1, r3
 80059c0:	4b35      	ldr	r3, [pc, #212]	; (8005a98 <USB_DeactivateEndpoint+0x1b0>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
 80059c6:	e060      	b.n	8005a8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059de:	d11f      	bne.n	8005a20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	041b      	lsls	r3, r3, #16
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a40:	4013      	ands	r3, r2
 8005a42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	2101      	movs	r1, #1
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a64:	4013      	ands	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	0159      	lsls	r1, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	4619      	mov	r1, r3
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <USB_DeactivateEndpoint+0x1b4>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	ec337800 	.word	0xec337800
 8005a9c:	eff37800 	.word	0xeff37800

08005aa0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 815c 	bne.w	8005d7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d132      	bne.n	8005b30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ae8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	0cdb      	lsrs	r3, r3, #19
 8005b2a:	04db      	lsls	r3, r3, #19
 8005b2c:	6113      	str	r3, [r2, #16]
 8005b2e:	e074      	b.n	8005c1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	0cdb      	lsrs	r3, r3, #19
 8005b4c:	04db      	lsls	r3, r3, #19
 8005b4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	440b      	add	r3, r1
 8005b8c:	1e59      	subs	r1, r3, #1
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b98:	4b9d      	ldr	r3, [pc, #628]	; (8005e10 <USB_EPStartXfer+0x370>)
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	0148      	lsls	r0, r1, #5
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bc2:	69b9      	ldr	r1, [r7, #24]
 8005bc4:	0148      	lsls	r0, r1, #5
 8005bc6:	69f9      	ldr	r1, [r7, #28]
 8005bc8:	4401      	add	r1, r0
 8005bca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	791b      	ldrb	r3, [r3, #4]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d11f      	bne.n	8005c1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d14b      	bne.n	8005cb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c34:	461a      	mov	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	791b      	ldrb	r3, [r3, #4]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d128      	bne.n	8005c96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d110      	bne.n	8005c76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e00f      	b.n	8005c96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e133      	b.n	8005f20 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	791b      	ldrb	r3, [r3, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d015      	beq.n	8005d0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 811b 	beq.w	8005f20 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d06:	4313      	orrs	r3, r2
 8005d08:	634b      	str	r3, [r1, #52]	; 0x34
 8005d0a:	e109      	b.n	8005f20 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d110      	bne.n	8005d3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e00f      	b.n	8005d5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6919      	ldr	r1, [r3, #16]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	b298      	uxth	r0, r3
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	4603      	mov	r3, r0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fade 	bl	8006334 <USB_WritePacket>
 8005d78:	e0d2      	b.n	8005f20 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	0cdb      	lsrs	r3, r3, #19
 8005d96:	04db      	lsls	r3, r3, #19
 8005d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	69fa      	ldr	r2, [r7, #28]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d126      	bne.n	8005e14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ddc:	69b9      	ldr	r1, [r7, #24]
 8005dde:	0148      	lsls	r0, r1, #5
 8005de0:	69f9      	ldr	r1, [r7, #28]
 8005de2:	4401      	add	r1, r0
 8005de4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005de8:	4313      	orrs	r3, r2
 8005dea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e0a:	6113      	str	r3, [r2, #16]
 8005e0c:	e03a      	b.n	8005e84 <USB_EPStartXfer+0x3e4>
 8005e0e:	bf00      	nop
 8005e10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	1e5a      	subs	r2, r3, #1
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	8afa      	ldrh	r2, [r7, #22]
 8005e30:	fb03 f202 	mul.w	r2, r3, r2
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	8afb      	ldrh	r3, [r7, #22]
 8005e48:	04d9      	lsls	r1, r3, #19
 8005e4a:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <USB_EPStartXfer+0x48c>)
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	0148      	lsls	r0, r1, #5
 8005e52:	69f9      	ldr	r1, [r7, #28]
 8005e54:	4401      	add	r1, r0
 8005e56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	0148      	lsls	r0, r1, #5
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e80:	4313      	orrs	r3, r2
 8005e82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10d      	bne.n	8005ea6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d128      	bne.n	8005f00 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d110      	bne.n	8005ee0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e00f      	b.n	8005f00 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	1ff80000 	.word	0x1ff80000

08005f30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	f040 80ce 	bne.w	80060ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d132      	bne.n	8005fc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb8:	0cdb      	lsrs	r3, r3, #19
 8005fba:	04db      	lsls	r3, r3, #19
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	e04e      	b.n	800605e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fda:	0cdb      	lsrs	r3, r3, #19
 8005fdc:	04db      	lsls	r3, r3, #19
 8005fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006002:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	699a      	ldr	r2, [r3, #24]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d903      	bls.n	8006018 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604e:	6939      	ldr	r1, [r7, #16]
 8006050:	0148      	lsls	r0, r1, #5
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	4401      	add	r1, r0
 8006056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605a:	4313      	orrs	r3, r2
 800605c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d11e      	bne.n	80060a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	440a      	add	r2, r1
 8006096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e097      	b.n	80061d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8083 	beq.w	80061d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e8:	4313      	orrs	r3, r2
 80060ea:	634b      	str	r3, [r1, #52]	; 0x34
 80060ec:	e071      	b.n	80061d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	0cdb      	lsrs	r3, r3, #19
 800610a:	04db      	lsls	r3, r3, #19
 800610c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800612c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006130:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006180:	6939      	ldr	r1, [r7, #16]
 8006182:	0148      	lsls	r0, r1, #5
 8006184:	6979      	ldr	r1, [r7, #20]
 8006186:	4401      	add	r1, r0
 8006188:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800618c:	4313      	orrs	r3, r2
 800618e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10d      	bne.n	80061b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6919      	ldr	r1, [r3, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	460a      	mov	r2, r1
 80061b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d14a      	bne.n	8006294 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006216:	f040 8086 	bne.w	8006326 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006238:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800623c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006260:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f242 7210 	movw	r2, #10000	; 0x2710
 800626e:	4293      	cmp	r3, r2
 8006270:	d902      	bls.n	8006278 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
          break;
 8006276:	e056      	b.n	8006326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800628c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006290:	d0e7      	beq.n	8006262 <USB_EPStopXfer+0x82>
 8006292:	e048      	b.n	8006326 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ac:	d13b      	bne.n	8006326 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3301      	adds	r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006302:	4293      	cmp	r3, r2
 8006304:	d902      	bls.n	800630c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
          break;
 800630a:	e00c      	b.n	8006326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006324:	d0e7      	beq.n	80062f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	460b      	mov	r3, r1
 8006344:	71fb      	strb	r3, [r7, #7]
 8006346:	4613      	mov	r3, r2
 8006348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d123      	bne.n	80063a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800635a:	88bb      	ldrh	r3, [r7, #4]
 800635c:	3303      	adds	r3, #3
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e018      	b.n	800639a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	031a      	lsls	r2, r3, #12
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006374:	461a      	mov	r2, r3
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	3301      	adds	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	3301      	adds	r3, #1
 800638c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3301      	adds	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	3301      	adds	r3, #1
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3e2      	bcc.n	8006368 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b08b      	sub	sp, #44	; 0x2c
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	e014      	b.n	8006406 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	3301      	adds	r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	3301      	adds	r3, #1
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	3301      	adds	r3, #1
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	3301      	adds	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	3301      	adds	r3, #1
 8006404:	623b      	str	r3, [r7, #32]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	429a      	cmp	r2, r3
 800640c:	d3e6      	bcc.n	80063dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800640e:	8bfb      	ldrh	r3, [r7, #30]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01e      	beq.n	8006452 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641e:	461a      	mov	r2, r3
 8006420:	f107 0310 	add.w	r3, r7, #16
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
 8006434:	b2da      	uxtb	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	701a      	strb	r2, [r3, #0]
      i++;
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	3301      	adds	r3, #1
 800643e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	3301      	adds	r3, #1
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006446:	8bfb      	ldrh	r3, [r7, #30]
 8006448:	3b01      	subs	r3, #1
 800644a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800644c:	8bfb      	ldrh	r3, [r7, #30]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ea      	bne.n	8006428 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006454:	4618      	mov	r0, r3
 8006456:	372c      	adds	r7, #44	; 0x2c
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d12c      	bne.n	80064d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	db12      	blt.n	80064b4 <USB_EPSetStall+0x54>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00f      	beq.n	80064b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e02b      	b.n	800652e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	db12      	blt.n	800650e <USB_EPSetStall+0xae>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00f      	beq.n	800650e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800650c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	0151      	lsls	r1, r2, #5
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	440a      	add	r2, r1
 8006524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800652c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d128      	bne.n	80065aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006576:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	791b      	ldrb	r3, [r3, #4]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d003      	beq.n	8006588 <USB_EPClearStall+0x4c>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	791b      	ldrb	r3, [r3, #4]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d138      	bne.n	80065fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e027      	b.n	80065fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	791b      	ldrb	r3, [r3, #4]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d003      	beq.n	80065da <USB_EPClearStall+0x9e>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	791b      	ldrb	r3, [r3, #4]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d10f      	bne.n	80065fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800662a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006682:	f023 0302 	bic.w	r3, r3, #2
 8006686:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c4:	f043 0302 	orr.w	r3, r3, #2
 80066c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0c1b      	lsrs	r3, r3, #16
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	b29b      	uxth	r3, r3
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4013      	ands	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006794:	68bb      	ldr	r3, [r7, #8]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4013      	ands	r3, r2
 80067ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067f0:	68bb      	ldr	r3, [r7, #8]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0301 	and.w	r3, r3, #1
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006834:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006838:	f023 0307 	bic.w	r3, r3, #7
 800683c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	460b      	mov	r3, r1
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	333c      	adds	r3, #60	; 0x3c
 8006876:	3304      	adds	r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	4a26      	ldr	r2, [pc, #152]	; (8006918 <USB_EP0_OutStart+0xb8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d90a      	bls.n	800689a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006894:	d101      	bne.n	800689a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e037      	b.n	800690a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	f043 0318 	orr.w	r3, r3, #24
 80068cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80068e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10f      	bne.n	8006908 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006902:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	4f54300a 	.word	0x4f54300a

0800691c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <USB_CoreReset+0x64>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e01b      	b.n	8006972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	daf2      	bge.n	8006928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f043 0201 	orr.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <USB_CoreReset+0x64>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e006      	b.n	8006972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d0f0      	beq.n	8006952 <USB_CoreReset+0x36>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	00030d40 	.word	0x00030d40

08006984 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006988:	4904      	ldr	r1, [pc, #16]	; (800699c <MX_FATFS_Init+0x18>)
 800698a:	4805      	ldr	r0, [pc, #20]	; (80069a0 <MX_FATFS_Init+0x1c>)
 800698c:	f006 f83a 	bl	800ca04 <FATFS_LinkDriver>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <MX_FATFS_Init+0x20>)
 8006996:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006998:	bf00      	nop
 800699a:	bd80      	pop	{r7, pc}
 800699c:	200022c0 	.word	0x200022c0
 80069a0:	20000010 	.word	0x20000010
 80069a4:	200022bc 	.word	0x200022bc

080069a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fa fb2f 	bl	8001028 <SD_disk_initialize>
 80069ca:	4603      	mov	r3, r0
 80069cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	4603      	mov	r3, r0
 80069de:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fa fc06 	bl	80011f4 <SD_disk_status>
 80069e8:	4603      	mov	r3, r0
 80069ea:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006a04:	7bf8      	ldrb	r0, [r7, #15]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	f7fa fc08 	bl	8001220 <SD_disk_read>
 8006a10:	4603      	mov	r3, r0
 8006a12:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	4603      	mov	r3, r0
 8006a2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006a2c:	7bf8      	ldrb	r0, [r7, #15]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	f7fa fc5e 	bl	80012f4 <SD_disk_write>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	603a      	str	r2, [r7, #0]
 8006a4e:	71fb      	strb	r3, [r7, #7]
 8006a50:	460b      	mov	r3, r1
 8006a52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	79b9      	ldrb	r1, [r7, #6]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa fcce 	bl	80013fc <SD_disk_ioctl>
 8006a60:	4603      	mov	r3, r0
 8006a62:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a7c:	f009 fde2 	bl	8010644 <USBD_static_malloc>
 8006a80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	32b0      	adds	r2, #176	; 0xb0
 8006a92:	2100      	movs	r1, #0
 8006a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e0d4      	b.n	8006c46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f009 fe4c 	bl	8010740 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32b0      	adds	r2, #176	; 0xb0
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	32b0      	adds	r2, #176	; 0xb0
 8006ac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7c1b      	ldrb	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d138      	bne.n	8006b46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ad4:	4b5e      	ldr	r3, [pc, #376]	; (8006c50 <USBD_CDC_Init+0x1e4>)
 8006ad6:	7819      	ldrb	r1, [r3, #0]
 8006ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006adc:	2202      	movs	r2, #2
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f009 fc8d 	bl	80103fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ae4:	4b5a      	ldr	r3, [pc, #360]	; (8006c50 <USBD_CDC_Init+0x1e4>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	3324      	adds	r3, #36	; 0x24
 8006afa:	2201      	movs	r2, #1
 8006afc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006afe:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006b00:	7819      	ldrb	r1, [r3, #0]
 8006b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b06:	2202      	movs	r2, #2
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f009 fc78 	bl	80103fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b0e:	4b51      	ldr	r3, [pc, #324]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 020f 	and.w	r2, r3, #15
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b26:	2201      	movs	r2, #1
 8006b28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b2a:	4b4b      	ldr	r3, [pc, #300]	; (8006c58 <USBD_CDC_Init+0x1ec>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f003 020f 	and.w	r2, r3, #15
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3326      	adds	r3, #38	; 0x26
 8006b40:	2210      	movs	r2, #16
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e035      	b.n	8006bb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b46:	4b42      	ldr	r3, [pc, #264]	; (8006c50 <USBD_CDC_Init+0x1e4>)
 8006b48:	7819      	ldrb	r1, [r3, #0]
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f009 fc55 	bl	80103fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b54:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <USBD_CDC_Init+0x1e4>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3324      	adds	r3, #36	; 0x24
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b6e:	4b39      	ldr	r3, [pc, #228]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006b70:	7819      	ldrb	r1, [r3, #0]
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	2202      	movs	r2, #2
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f009 fc41 	bl	80103fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b7c:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b94:	2201      	movs	r2, #1
 8006b96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b98:	4b2f      	ldr	r3, [pc, #188]	; (8006c58 <USBD_CDC_Init+0x1ec>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3326      	adds	r3, #38	; 0x26
 8006bae:	2210      	movs	r2, #16
 8006bb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <USBD_CDC_Init+0x1ec>)
 8006bb4:	7819      	ldrb	r1, [r3, #0]
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	2203      	movs	r2, #3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f009 fc1f 	bl	80103fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006bc0:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <USBD_CDC_Init+0x1ec>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 020f 	and.w	r2, r3, #15
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	33b0      	adds	r3, #176	; 0xb0
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e018      	b.n	8006c46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7c1b      	ldrb	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006c1e:	7819      	ldrb	r1, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f009 fcd6 	bl	80105dc <USBD_LL_PrepareReceive>
 8006c30:	e008      	b.n	8006c44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <USBD_CDC_Init+0x1e8>)
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3c:	2340      	movs	r3, #64	; 0x40
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f009 fccc 	bl	80105dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200000ab 	.word	0x200000ab
 8006c54:	200000ac 	.word	0x200000ac
 8006c58:	200000ad 	.word	0x200000ad

08006c5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c68:	4b3a      	ldr	r3, [pc, #232]	; (8006d54 <USBD_CDC_DeInit+0xf8>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f009 fbeb 	bl	801044a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c74:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <USBD_CDC_DeInit+0xf8>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	f003 020f 	and.w	r2, r3, #15
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c8e:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <USBD_CDC_DeInit+0xfc>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f009 fbd8 	bl	801044a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <USBD_CDC_DeInit+0xfc>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f003 020f 	and.w	r2, r3, #15
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006cb6:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <USBD_CDC_DeInit+0x100>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f009 fbc4 	bl	801044a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006cc2:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <USBD_CDC_DeInit+0x100>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	f003 020f 	and.w	r2, r3, #15
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3324      	adds	r3, #36	; 0x24
 8006cd8:	2200      	movs	r2, #0
 8006cda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006cdc:	4b1f      	ldr	r3, [pc, #124]	; (8006d5c <USBD_CDC_DeInit+0x100>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	3326      	adds	r3, #38	; 0x26
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	32b0      	adds	r2, #176	; 0xb0
 8006d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01f      	beq.n	8006d48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	33b0      	adds	r3, #176	; 0xb0
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	; 0xb0
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f009 fc98 	bl	8010660 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32b0      	adds	r2, #176	; 0xb0
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	200000ab 	.word	0x200000ab
 8006d58:	200000ac 	.word	0x200000ac
 8006d5c:	200000ad 	.word	0x200000ad

08006d60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32b0      	adds	r2, #176	; 0xb0
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e0bf      	b.n	8006f10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d050      	beq.n	8006e3e <USBD_CDC_Setup+0xde>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	f040 80af 	bne.w	8006f00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03a      	beq.n	8006e20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	da1b      	bge.n	8006dec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	33b0      	adds	r3, #176	; 0xb0
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006dca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	88d2      	ldrh	r2, [r2, #6]
 8006dd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b07      	cmp	r3, #7
 8006dd8:	bf28      	it	cs
 8006dda:	2307      	movcs	r3, #7
 8006ddc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	89fa      	ldrh	r2, [r7, #14]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fd89 	bl	80088fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006dea:	e090      	b.n	8006f0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	785a      	ldrb	r2, [r3, #1]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b3f      	cmp	r3, #63	; 0x3f
 8006dfc:	d803      	bhi.n	8006e06 <USBD_CDC_Setup+0xa6>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	e000      	b.n	8006e08 <USBD_CDC_Setup+0xa8>
 8006e06:	2240      	movs	r2, #64	; 0x40
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e0e:	6939      	ldr	r1, [r7, #16]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e16:	461a      	mov	r2, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fd9b 	bl	8008954 <USBD_CtlPrepareRx>
      break;
 8006e1e:	e076      	b.n	8006f0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	33b0      	adds	r3, #176	; 0xb0
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	7850      	ldrb	r0, [r2, #1]
 8006e36:	2200      	movs	r2, #0
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	4798      	blx	r3
      break;
 8006e3c:	e067      	b.n	8006f0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b0b      	cmp	r3, #11
 8006e44:	d851      	bhi.n	8006eea <USBD_CDC_Setup+0x18a>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <USBD_CDC_Setup+0xec>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006ef9 	.word	0x08006ef9
 8006e54:	08006eeb 	.word	0x08006eeb
 8006e58:	08006eeb 	.word	0x08006eeb
 8006e5c:	08006eeb 	.word	0x08006eeb
 8006e60:	08006eeb 	.word	0x08006eeb
 8006e64:	08006eeb 	.word	0x08006eeb
 8006e68:	08006eeb 	.word	0x08006eeb
 8006e6c:	08006eeb 	.word	0x08006eeb
 8006e70:	08006eeb 	.word	0x08006eeb
 8006e74:	08006ea7 	.word	0x08006ea7
 8006e78:	08006ed1 	.word	0x08006ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d107      	bne.n	8006e98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e88:	f107 030a 	add.w	r3, r7, #10
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fd33 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e96:	e032      	b.n	8006efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 fcbd 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea4:	e02b      	b.n	8006efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d107      	bne.n	8006ec2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eb2:	f107 030d 	add.w	r3, r7, #13
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fd1e 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec0:	e01d      	b.n	8006efe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fca8 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ece:	e016      	b.n	8006efe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d00f      	beq.n	8006efc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fc9b 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ee8:	e008      	b.n	8006efc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fc94 	bl	800881a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ef6:	e002      	b.n	8006efe <USBD_CDC_Setup+0x19e>
          break;
 8006ef8:	bf00      	nop
 8006efa:	e008      	b.n	8006f0e <USBD_CDC_Setup+0x1ae>
          break;
 8006efc:	bf00      	nop
      }
      break;
 8006efe:	e006      	b.n	8006f0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f001 fc89 	bl	800881a <USBD_CtlError>
      ret = USBD_FAIL;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	32b0      	adds	r2, #176	; 0xb0
 8006f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e065      	b.n	800700e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32b0      	adds	r2, #176	; 0xb0
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3318      	adds	r3, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d02f      	beq.n	8006fcc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	3318      	adds	r3, #24
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 010f 	and.w	r1, r3, #15
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	440b      	add	r3, r1
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4403      	add	r3, r0
 8006f94:	3348      	adds	r3, #72	; 0x48
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d112      	bne.n	8006fcc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	f003 020f 	and.w	r2, r3, #15
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3318      	adds	r3, #24
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fbe:	78f9      	ldrb	r1, [r7, #3]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f009 fae8 	bl	801059a <USBD_LL_Transmit>
 8006fca:	e01f      	b.n	800700c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	33b0      	adds	r3, #176	; 0xb0
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	33b0      	adds	r3, #176	; 0xb0
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	; 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32b0      	adds	r2, #176	; 0xb0
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e01a      	b.n	800707e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f009 fae6 	bl	801061e <USBD_LL_GetRxDataSize>
 8007052:	4602      	mov	r2, r0
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	33b0      	adds	r3, #176	; 0xb0
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007078:	4611      	mov	r1, r2
 800707a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	32b0      	adds	r2, #176	; 0xb0
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e025      	b.n	80070f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	33b0      	adds	r3, #176	; 0xb0
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <USBD_CDC_EP0_RxReady+0x6c>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070c2:	2bff      	cmp	r3, #255	; 0xff
 80070c4:	d015      	beq.n	80070f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	33b0      	adds	r3, #176	; 0xb0
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80070de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070e6:	b292      	uxth	r2, r2
 80070e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	22ff      	movs	r2, #255	; 0xff
 80070ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007104:	2182      	movs	r1, #130	; 0x82
 8007106:	4818      	ldr	r0, [pc, #96]	; (8007168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007108:	f000 fd4f 	bl	8007baa <USBD_GetEpDesc>
 800710c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800710e:	2101      	movs	r1, #1
 8007110:	4815      	ldr	r0, [pc, #84]	; (8007168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007112:	f000 fd4a 	bl	8007baa <USBD_GetEpDesc>
 8007116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007118:	2181      	movs	r1, #129	; 0x81
 800711a:	4813      	ldr	r0, [pc, #76]	; (8007168 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800711c:	f000 fd45 	bl	8007baa <USBD_GetEpDesc>
 8007120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2210      	movs	r2, #16
 800712c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d006      	beq.n	8007142 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2200      	movs	r2, #0
 8007138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713c:	711a      	strb	r2, [r3, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d006      	beq.n	8007156 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007150:	711a      	strb	r2, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2243      	movs	r2, #67	; 0x43
 800715a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000068 	.word	0x20000068

0800716c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007174:	2182      	movs	r1, #130	; 0x82
 8007176:	4818      	ldr	r0, [pc, #96]	; (80071d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007178:	f000 fd17 	bl	8007baa <USBD_GetEpDesc>
 800717c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800717e:	2101      	movs	r1, #1
 8007180:	4815      	ldr	r0, [pc, #84]	; (80071d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007182:	f000 fd12 	bl	8007baa <USBD_GetEpDesc>
 8007186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007188:	2181      	movs	r1, #129	; 0x81
 800718a:	4813      	ldr	r0, [pc, #76]	; (80071d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800718c:	f000 fd0d 	bl	8007baa <USBD_GetEpDesc>
 8007190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2210      	movs	r2, #16
 800719c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d006      	beq.n	80071b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2200      	movs	r2, #0
 80071a8:	711a      	strb	r2, [r3, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f042 0202 	orr.w	r2, r2, #2
 80071b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	711a      	strb	r2, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f042 0202 	orr.w	r2, r2, #2
 80071c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2243      	movs	r2, #67	; 0x43
 80071ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000068 	.word	0x20000068

080071dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071e4:	2182      	movs	r1, #130	; 0x82
 80071e6:	4818      	ldr	r0, [pc, #96]	; (8007248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071e8:	f000 fcdf 	bl	8007baa <USBD_GetEpDesc>
 80071ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ee:	2101      	movs	r1, #1
 80071f0:	4815      	ldr	r0, [pc, #84]	; (8007248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071f2:	f000 fcda 	bl	8007baa <USBD_GetEpDesc>
 80071f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071f8:	2181      	movs	r1, #129	; 0x81
 80071fa:	4813      	ldr	r0, [pc, #76]	; (8007248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071fc:	f000 fcd5 	bl	8007baa <USBD_GetEpDesc>
 8007200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2210      	movs	r2, #16
 800720c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d006      	beq.n	8007222 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2200      	movs	r2, #0
 8007218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800721c:	711a      	strb	r2, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007230:	711a      	strb	r2, [r3, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2243      	movs	r2, #67	; 0x43
 800723a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000068 	.word	0x20000068

0800724c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220a      	movs	r2, #10
 8007258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800725a:	4b03      	ldr	r3, [pc, #12]	; (8007268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20000024 	.word	0x20000024

0800726c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800727c:	2303      	movs	r3, #3
 800727e:	e009      	b.n	8007294 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	33b0      	adds	r3, #176	; 0xb0
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	32b0      	adds	r2, #176	; 0xb0
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e008      	b.n	80072d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	32b0      	adds	r2, #176	; 0xb0
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	e004      	b.n	8007312 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32b0      	adds	r2, #176	; 0xb0
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32b0      	adds	r2, #176	; 0xb0
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	e025      	b.n	800739e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007358:	2b00      	cmp	r3, #0
 800735a:	d11f      	bne.n	800739c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2201      	movs	r2, #1
 8007360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007364:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <USBD_CDC_TransmitPacket+0x88>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	f003 020f 	and.w	r2, r3, #15
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4403      	add	r3, r0
 800737e:	3318      	adds	r3, #24
 8007380:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <USBD_CDC_TransmitPacket+0x88>)
 8007384:	7819      	ldrb	r1, [r3, #0]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f009 f901 	bl	801059a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200000ab 	.word	0x200000ab

080073ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32b0      	adds	r2, #176	; 0xb0
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32b0      	adds	r2, #176	; 0xb0
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e018      	b.n	800740c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <USBD_CDC_ReceivePacket+0x68>)
 80073e4:	7819      	ldrb	r1, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f009 f8f3 	bl	80105dc <USBD_LL_PrepareReceive>
 80073f6:	e008      	b.n	800740a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <USBD_CDC_ReceivePacket+0x68>)
 80073fa:	7819      	ldrb	r1, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f009 f8e9 	bl	80105dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200000ac 	.word	0x200000ac

08007418 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e01f      	b.n	8007470 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f008 ff63 	bl	8010330 <USBD_LL_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e025      	b.n	80074dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32ae      	adds	r2, #174	; 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32ae      	adds	r2, #174	; 0xae
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f107 020e 	add.w	r2, r7, #14
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	4602      	mov	r2, r0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f008 ff6b 	bl	80103c8 <USBD_LL_Start>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f908 	bl	80087a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d01a      	beq.n	80075f0 <USBD_LL_SetupStage+0x72>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d822      	bhi.n	8007604 <USBD_LL_SetupStage+0x86>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <USBD_LL_SetupStage+0x4a>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00a      	beq.n	80075dc <USBD_LL_SetupStage+0x5e>
 80075c6:	e01d      	b.n	8007604 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb5f 	bl	8007c94 <USBD_StdDevReq>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	e020      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fbc7 	bl	8007d78 <USBD_StdItfReq>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	e016      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc29 	bl	8007e50 <USBD_StdEPReq>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
      break;
 8007602:	e00c      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f008 ff38 	bl	8010488 <USBD_LL_StallEP>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      break;
 800761c:	bf00      	nop
  }

  return ret;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	460b      	mov	r3, r1
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d16e      	bne.n	800771e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007646:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 8098 	bne.w	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	429a      	cmp	r2, r3
 800765e:	d913      	bls.n	8007688 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4293      	cmp	r3, r2
 8007678:	bf28      	it	cs
 800767a:	4613      	movcs	r3, r2
 800767c:	461a      	mov	r2, r3
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 f984 	bl	800898e <USBD_CtlContinueRx>
 8007686:	e07d      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2b02      	cmp	r3, #2
 8007694:	d014      	beq.n	80076c0 <USBD_LL_DataOutStage+0x98>
 8007696:	2b02      	cmp	r3, #2
 8007698:	d81d      	bhi.n	80076d6 <USBD_LL_DataOutStage+0xae>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <USBD_LL_DataOutStage+0x7c>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d003      	beq.n	80076aa <USBD_LL_DataOutStage+0x82>
 80076a2:	e018      	b.n	80076d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75bb      	strb	r3, [r7, #22]
            break;
 80076a8:	e018      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa5e 	bl	8007b76 <USBD_CoreFindIF>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75bb      	strb	r3, [r7, #22]
            break;
 80076be:	e00d      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa60 	bl	8007b90 <USBD_CoreFindEP>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]
            break;
 80076d4:	e002      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75bb      	strb	r3, [r7, #22]
            break;
 80076da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d119      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d113      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076ee:	7dba      	ldrb	r2, [r7, #22]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f001 f94a 	bl	80089b0 <USBD_CtlSendStatus>
 800771c:	e032      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa31 	bl	8007b90 <USBD_CoreFindEP>
 800772e:	4603      	mov	r3, r0
 8007730:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007732:	7dbb      	ldrb	r3, [r7, #22]
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d025      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
 8007738:	7dbb      	ldrb	r3, [r7, #22]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d122      	bne.n	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d117      	bne.n	800777a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800774a:	7dba      	ldrb	r2, [r7, #22]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	32ae      	adds	r2, #174	; 0xae
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00f      	beq.n	800777a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800775a:	7dba      	ldrb	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007762:	7dba      	ldrb	r2, [r7, #22]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	; 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	7afa      	ldrb	r2, [r7, #11]
 8007770:	4611      	mov	r1, r2
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	4798      	blx	r3
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	e000      	b.n	8007786 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	460b      	mov	r3, r1
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d16f      	bne.n	8007882 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3314      	adds	r3, #20
 80077a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d15a      	bne.n	8007868 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d914      	bls.n	80077e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 f8ac 	bl	8008932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f008 fefb 	bl	80105dc <USBD_LL_PrepareReceive>
 80077e6:	e03f      	b.n	8007868 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d11c      	bne.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d316      	bcc.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800780a:	429a      	cmp	r2, r3
 800780c:	d20f      	bcs.n	800782e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f88d 	bl	8008932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007820:	2300      	movs	r3, #0
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f008 fed8 	bl	80105dc <USBD_LL_PrepareReceive>
 800782c:	e01c      	b.n	8007868 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d10f      	bne.n	800785a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f008 fe13 	bl	8010488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f8b7 	bl	80089d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03a      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff fe42 	bl	80074fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007880:	e032      	b.n	80078e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f97f 	bl	8007b90 <USBD_CoreFindEP>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2bff      	cmp	r3, #255	; 0xff
 800789a:	d025      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d122      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d11c      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078ae:	7dfa      	ldrb	r2, [r7, #23]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	32ae      	adds	r2, #174	; 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078be:	7dfa      	ldrb	r2, [r7, #23]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078c6:	7dfa      	ldrb	r2, [r7, #23]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	32ae      	adds	r2, #174	; 0xae
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	7afa      	ldrb	r2, [r7, #11]
 80078d4:	4611      	mov	r1, r2
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078de:	7dbb      	ldrb	r3, [r7, #22]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
 80078e6:	e000      	b.n	80078ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d014      	beq.n	8007958 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00e      	beq.n	8007958 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6852      	ldr	r2, [r2, #4]
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	4611      	mov	r1, r2
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f008 fd4d 	bl	80103fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2200      	movs	r2, #0
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f008 fd3f 	bl	80103fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2240      	movs	r2, #64	; 0x40
 800798a:	621a      	str	r2, [r3, #32]

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d106      	bne.n	8007a04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d110      	bne.n	8007a48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e01c      	b.n	8007aae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d115      	bne.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32ae      	adds	r2, #174	; 0xae
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	32ae      	adds	r2, #174	; 0xae
 8007acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01c      	b.n	8007b12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d115      	bne.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d920      	bls.n	8007c14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bda:	e013      	b.n	8007c04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bdc:	f107 030a 	add.w	r3, r7, #10
 8007be0:	4619      	mov	r1, r3
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f000 f81b 	bl	8007c1e <USBD_GetNextDesc>
 8007be8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d108      	bne.n	8007c04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d008      	beq.n	8007c12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	885b      	ldrh	r3, [r3, #2]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	897b      	ldrh	r3, [r7, #10]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d8e5      	bhi.n	8007bdc <USBD_GetEpDesc+0x32>
 8007c10:	e000      	b.n	8007c14 <USBD_GetEpDesc+0x6a>
          break;
 8007c12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c14:	693b      	ldr	r3, [r7, #16]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c76:	8a3b      	ldrh	r3, [r7, #16]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c86:	89fb      	ldrh	r3, [r7, #14]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d005      	beq.n	8007cba <USBD_StdDevReq+0x26>
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d857      	bhi.n	8007d62 <USBD_StdDevReq+0xce>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <USBD_StdDevReq+0x42>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d153      	bne.n	8007d62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32ae      	adds	r2, #174	; 0xae
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd4:	e04a      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d83b      	bhi.n	8007d56 <USBD_StdDevReq+0xc2>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_StdDevReq+0x50>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d39 	.word	0x08007d39
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d57 	.word	0x08007d57
 8007cf0:	08007d43 	.word	0x08007d43
 8007cf4:	08007d57 	.word	0x08007d57
 8007cf8:	08007d17 	.word	0x08007d17
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d57 	.word	0x08007d57
 8007d04:	08007d2f 	.word	0x08007d2f
 8007d08:	08007d21 	.word	0x08007d21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa3c 	bl	800818c <USBD_GetDescriptor>
          break;
 8007d14:	e024      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fba1 	bl	8008460 <USBD_SetAddress>
          break;
 8007d1e:	e01f      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fbe0 	bl	80084e8 <USBD_SetConfig>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d2c:	e018      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc83 	bl	800863c <USBD_GetConfig>
          break;
 8007d36:	e013      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fcb4 	bl	80086a8 <USBD_GetStatus>
          break;
 8007d40:	e00e      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fce3 	bl	8008710 <USBD_SetFeature>
          break;
 8007d4a:	e009      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fd07 	bl	8008762 <USBD_ClrFeature>
          break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fd5e 	bl	800881a <USBD_CtlError>
          break;
 8007d5e:	bf00      	nop
      }
      break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd58 	bl	800881a <USBD_CtlError>
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop

08007d78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d005      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d852      	bhi.n	8007e3c <USBD_StdItfReq+0xc4>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d14e      	bne.n	8007e3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d840      	bhi.n	8007e2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	889b      	ldrh	r3, [r3, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d836      	bhi.n	8007e24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fed9 	bl	8007b76 <USBD_CoreFindIF>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2bff      	cmp	r3, #255	; 0xff
 8007dcc:	d01d      	beq.n	8007e0a <USBD_StdItfReq+0x92>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11a      	bne.n	8007e0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd4:	7bba      	ldrb	r2, [r7, #14]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	; 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007de4:	7bba      	ldrb	r2, [r7, #14]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dec:	7bba      	ldrb	r2, [r7, #14]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e02:	e004      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e08:	e001      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d110      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fdc7 	bl	80089b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fcf7 	bl	800881a <USBD_CtlError>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcf2 	bl	800881a <USBD_CtlError>
          break;
 8007e36:	e000      	b.n	8007e3a <USBD_StdItfReq+0xc2>
          break;
 8007e38:	bf00      	nop
      }
      break;
 8007e3a:	e004      	b.n	8007e46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fceb 	bl	800881a <USBD_CtlError>
      break;
 8007e44:	bf00      	nop
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d007      	beq.n	8007e80 <USBD_StdEPReq+0x30>
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	f200 817f 	bhi.w	8008174 <USBD_StdEPReq+0x324>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02a      	beq.n	8007ed0 <USBD_StdEPReq+0x80>
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	f040 817a 	bne.w	8008174 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fe83 	bl	8007b90 <USBD_CoreFindEP>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	2bff      	cmp	r3, #255	; 0xff
 8007e92:	f000 8174 	beq.w	800817e <USBD_StdEPReq+0x32e>
 8007e96:	7b7b      	ldrb	r3, [r7, #13]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 8170 	bne.w	800817e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ea6:	7b7a      	ldrb	r2, [r7, #13]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	32ae      	adds	r2, #174	; 0xae
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 8163 	beq.w	800817e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007eb8:	7b7a      	ldrb	r2, [r7, #13]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	32ae      	adds	r2, #174	; 0xae
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ece:	e156      	b.n	800817e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d008      	beq.n	8007eea <USBD_StdEPReq+0x9a>
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	f300 8145 	bgt.w	8008168 <USBD_StdEPReq+0x318>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 809b 	beq.w	800801a <USBD_StdEPReq+0x1ca>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d03c      	beq.n	8007f62 <USBD_StdEPReq+0x112>
 8007ee8:	e13e      	b.n	8008168 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d002      	beq.n	8007efc <USBD_StdEPReq+0xac>
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d016      	beq.n	8007f28 <USBD_StdEPReq+0xd8>
 8007efa:	e02c      	b.n	8007f56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <USBD_StdEPReq+0xce>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d00a      	beq.n	8007f1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f008 fabb 	bl	8010488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f008 fab7 	bl	8010488 <USBD_LL_StallEP>
 8007f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f1c:	e020      	b.n	8007f60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc7a 	bl	800881a <USBD_CtlError>
              break;
 8007f26:	e01b      	b.n	8007f60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	885b      	ldrh	r3, [r3, #2]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10e      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d008      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f008 fa9d 	bl	8010488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fd2e 	bl	80089b0 <USBD_CtlSendStatus>

              break;
 8007f54:	e004      	b.n	8007f60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc5e 	bl	800881a <USBD_CtlError>
              break;
 8007f5e:	bf00      	nop
          }
          break;
 8007f60:	e107      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d002      	beq.n	8007f74 <USBD_StdEPReq+0x124>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d016      	beq.n	8007fa0 <USBD_StdEPReq+0x150>
 8007f72:	e04b      	b.n	800800c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <USBD_StdEPReq+0x146>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d00a      	beq.n	8007f96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f008 fa7f 	bl	8010488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f008 fa7b 	bl	8010488 <USBD_LL_StallEP>
 8007f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e040      	b.n	8008018 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc3e 	bl	800881a <USBD_CtlError>
              break;
 8007f9e:	e03b      	b.n	8008018 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d136      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f008 fa85 	bl	80104c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fcf7 	bl	80089b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fde2 	bl	8007b90 <USBD_CoreFindEP>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fd0:	7b7b      	ldrb	r3, [r7, #13]
 8007fd2:	2bff      	cmp	r3, #255	; 0xff
 8007fd4:	d01f      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11c      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fe4:	7b7a      	ldrb	r2, [r7, #13]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32ae      	adds	r2, #174	; 0xae
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ff4:	7b7a      	ldrb	r2, [r7, #13]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	; 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc03 	bl	800881a <USBD_CtlError>
              break;
 8008014:	e000      	b.n	8008018 <USBD_StdEPReq+0x1c8>
              break;
 8008016:	bf00      	nop
          }
          break;
 8008018:	e0ab      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d002      	beq.n	800802c <USBD_StdEPReq+0x1dc>
 8008026:	2b03      	cmp	r3, #3
 8008028:	d032      	beq.n	8008090 <USBD_StdEPReq+0x240>
 800802a:	e097      	b.n	800815c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d004      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbed 	bl	800881a <USBD_CtlError>
                break;
 8008040:	e091      	b.n	8008166 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da0b      	bge.n	8008062 <USBD_StdEPReq+0x212>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	3304      	adds	r3, #4
 8008060:	e00b      	b.n	800807a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2202      	movs	r2, #2
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc37 	bl	80088fc <USBD_CtlSendData>
              break;
 800808e:	e06a      	b.n	8008166 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da11      	bge.n	80080bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d117      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fbb0 	bl	800881a <USBD_CtlError>
                  break;
 80080ba:	e054      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fb9d 	bl	800881a <USBD_CtlError>
                  break;
 80080e0:	e041      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da0b      	bge.n	8008102 <USBD_StdEPReq+0x2b2>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3310      	adds	r3, #16
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	e00b      	b.n	800811a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	3304      	adds	r3, #4
 800811a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <USBD_StdEPReq+0x2d8>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d103      	bne.n	8008130 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e00e      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f008 f9e5 	bl	8010504 <USBD_LL_IsStallEP>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2201      	movs	r2, #1
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e002      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2202      	movs	r2, #2
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbd1 	bl	80088fc <USBD_CtlSendData>
              break;
 800815a:	e004      	b.n	8008166 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb5b 	bl	800881a <USBD_CtlError>
              break;
 8008164:	bf00      	nop
          }
          break;
 8008166:	e004      	b.n	8008172 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fb55 	bl	800881a <USBD_CtlError>
          break;
 8008170:	bf00      	nop
      }
      break;
 8008172:	e005      	b.n	8008180 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb4f 	bl	800881a <USBD_CtlError>
      break;
 800817c:	e000      	b.n	8008180 <USBD_StdEPReq+0x330>
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	f200 8128 	bhi.w	8008402 <USBD_GetDescriptor+0x276>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_GetDescriptor+0x2c>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	08008403 	.word	0x08008403
 80081c8:	08008403 	.word	0x08008403
 80081cc:	080083a3 	.word	0x080083a3
 80081d0:	080083cf 	.word	0x080083cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	7c12      	ldrb	r2, [r2, #16]
 80081e0:	f107 0108 	add.w	r1, r7, #8
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	60f8      	str	r0, [r7, #12]
      break;
 80081ea:	e112      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	f107 0208 	add.w	r2, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800820e:	e100      	b.n	8008412 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f107 0208 	add.w	r2, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e0f2      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	885b      	ldrh	r3, [r3, #2]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b05      	cmp	r3, #5
 8008234:	f200 80ac 	bhi.w	8008390 <USBD_GetDescriptor+0x204>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USBD_GetDescriptor+0xb4>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008259 	.word	0x08008259
 8008244:	0800828d 	.word	0x0800828d
 8008248:	080082c1 	.word	0x080082c1
 800824c:	080082f5 	.word	0x080082f5
 8008250:	08008329 	.word	0x08008329
 8008254:	0800835d 	.word	0x0800835d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e091      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 facb 	bl	800881a <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e089      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7c12      	ldrb	r2, [r2, #16]
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ae:	e077      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fab1 	bl	800881a <USBD_CtlError>
            err++;
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	3301      	adds	r3, #1
 80082bc:	72fb      	strb	r3, [r7, #11]
          break;
 80082be:	e06f      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e05d      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa97 	bl	800881a <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e055      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e043      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa7d 	bl	800881a <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e03b      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e029      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa63 	bl	800881a <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e021      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e00f      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa49 	bl	800881a <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e007      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa41 	bl	800881a <USBD_CtlError>
          err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800839e:	bf00      	nop
      }
      break;
 80083a0:	e037      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7c1b      	ldrb	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	4610      	mov	r0, r2
 80083b8:	4798      	blx	r3
 80083ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083bc:	e029      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa2a 	bl	800881a <USBD_CtlError>
        err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	e021      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7c1b      	ldrb	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f107 0208 	add.w	r2, r7, #8
 80083e2:	4610      	mov	r0, r2
 80083e4:	4798      	blx	r3
 80083e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	2207      	movs	r2, #7
 80083ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f0:	e00f      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fa10 	bl	800881a <USBD_CtlError>
        err++;
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	3301      	adds	r3, #1
 80083fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008400:	e007      	b.n	8008412 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa08 	bl	800881a <USBD_CtlError>
      err++;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3301      	adds	r3, #1
 800840e:	72fb      	strb	r3, [r7, #11]
      break;
 8008410:	bf00      	nop
  }

  if (err != 0U)
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11e      	bne.n	8008456 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	88db      	ldrh	r3, [r3, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d016      	beq.n	800844e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88da      	ldrh	r2, [r3, #6]
 800842a:	893b      	ldrh	r3, [r7, #8]
 800842c:	4293      	cmp	r3, r2
 800842e:	bf28      	it	cs
 8008430:	4613      	movcs	r3, r2
 8008432:	b29b      	uxth	r3, r3
 8008434:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008436:	893b      	ldrh	r3, [r7, #8]
 8008438:	461a      	mov	r2, r3
 800843a:	68f9      	ldr	r1, [r7, #12]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa5d 	bl	80088fc <USBD_CtlSendData>
 8008442:	e009      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9e7 	bl	800881a <USBD_CtlError>
 800844c:	e004      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 faae 	bl	80089b0 <USBD_CtlSendStatus>
 8008454:	e000      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    return;
 8008456:	bf00      	nop
  }
}
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d131      	bne.n	80084d6 <USBD_SetAddress+0x76>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d12d      	bne.n	80084d6 <USBD_SetAddress+0x76>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	2b7f      	cmp	r3, #127	; 0x7f
 8008480:	d829      	bhi.n	80084d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	885b      	ldrh	r3, [r3, #2]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d104      	bne.n	80084a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9bc 	bl	800881a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	e01d      	b.n	80084e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7bfa      	ldrb	r2, [r7, #15]
 80084a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f008 f853 	bl	801055c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa7a 	bl	80089b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e009      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d4:	e004      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f99e 	bl	800881a <USBD_CtlError>
  }
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	4b4e      	ldr	r3, [pc, #312]	; (8008638 <USBD_SetConfig+0x150>)
 80084fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008500:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <USBD_SetConfig+0x150>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d905      	bls.n	8008514 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f985 	bl	800881a <USBD_CtlError>
    return USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	e08c      	b.n	800862e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d002      	beq.n	8008526 <USBD_SetConfig+0x3e>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d029      	beq.n	8008578 <USBD_SetConfig+0x90>
 8008524:	e075      	b.n	8008612 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008526:	4b44      	ldr	r3, [pc, #272]	; (8008638 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d020      	beq.n	8008570 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800852e:	4b42      	ldr	r3, [pc, #264]	; (8008638 <USBD_SetConfig+0x150>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008538:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe ffe7 	bl	8007512 <USBD_SetClassConfig>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f962 	bl	800881a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800855e:	e065      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa25 	bl	80089b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2203      	movs	r2, #3
 800856a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800856e:	e05d      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fa1d 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008576:	e059      	b.n	800862c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008578:	4b2f      	ldr	r3, [pc, #188]	; (8008638 <USBD_SetConfig+0x150>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d112      	bne.n	80085a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008592:	4b29      	ldr	r3, [pc, #164]	; (8008638 <USBD_SetConfig+0x150>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fe ffd6 	bl	800754a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa06 	bl	80089b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a4:	e042      	b.n	800862c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <USBD_SetConfig+0x150>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d02a      	beq.n	800860a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fe ffc4 	bl	800754a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe ff9d 	bl	8007512 <USBD_SetClassConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00f      	beq.n	8008602 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f918 	bl	800881a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe ffa9 	bl	800754a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008600:	e014      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9d4 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008608:	e010      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f9d0 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008610:	e00c      	b.n	800862c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f900 	bl	800881a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fe ff92 	bl	800754a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	73fb      	strb	r3, [r7, #15]
      break;
 800862a:	bf00      	nop
  }

  return ret;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	200022c4 	.word	0x200022c4

0800863c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d004      	beq.n	8008658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8e2 	bl	800881a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008656:	e023      	b.n	80086a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	dc02      	bgt.n	800866a <USBD_GetConfig+0x2e>
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc03      	bgt.n	8008670 <USBD_GetConfig+0x34>
 8008668:	e015      	b.n	8008696 <USBD_GetConfig+0x5a>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d00b      	beq.n	8008686 <USBD_GetConfig+0x4a>
 800866e:	e012      	b.n	8008696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3308      	adds	r3, #8
 800867a:	2201      	movs	r2, #1
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f93c 	bl	80088fc <USBD_CtlSendData>
        break;
 8008684:	e00c      	b.n	80086a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	2201      	movs	r2, #1
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f934 	bl	80088fc <USBD_CtlSendData>
        break;
 8008694:	e004      	b.n	80086a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8be 	bl	800881a <USBD_CtlError>
        break;
 800869e:	bf00      	nop
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d81e      	bhi.n	80086fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d004      	beq.n	80086d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8a5 	bl	800881a <USBD_CtlError>
        break;
 80086d0:	e01a      	b.n	8008708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	330c      	adds	r3, #12
 80086f2:	2202      	movs	r2, #2
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f900 	bl	80088fc <USBD_CtlSendData>
      break;
 80086fc:	e004      	b.n	8008708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f88a 	bl	800881a <USBD_CtlError>
      break;
 8008706:	bf00      	nop
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d107      	bne.n	8008732 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f940 	bl	80089b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008730:	e013      	b.n	800875a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	885b      	ldrh	r3, [r3, #2]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d10b      	bne.n	8008752 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f930 	bl	80089b0 <USBD_CtlSendStatus>
}
 8008750:	e003      	b.n	800875a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f860 	bl	800881a <USBD_CtlError>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	2b02      	cmp	r3, #2
 8008778:	d80b      	bhi.n	8008792 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d10c      	bne.n	800879c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f910 	bl	80089b0 <USBD_CtlSendStatus>
      }
      break;
 8008790:	e004      	b.n	800879c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f840 	bl	800881a <USBD_CtlError>
      break;
 800879a:	e000      	b.n	800879e <USBD_ClrFeature+0x3c>
      break;
 800879c:	bf00      	nop
  }
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff fa41 	bl	8007c58 <SWAPBYTE>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fa34 	bl	8007c58 <SWAPBYTE>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fa27 	bl	8007c58 <SWAPBYTE>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	80da      	strh	r2, [r3, #6]
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008824:	2180      	movs	r1, #128	; 0x80
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f007 fe2e 	bl	8010488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f007 fe2a 	bl	8010488 <USBD_LL_StallEP>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d036      	beq.n	80088c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008856:	6938      	ldr	r0, [r7, #16]
 8008858:	f000 f836 	bl	80088c8 <USBD_GetLen>
 800885c:	4603      	mov	r3, r0
 800885e:	3301      	adds	r3, #1
 8008860:	b29b      	uxth	r3, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	4413      	add	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	701a      	strb	r2, [r3, #0]
  idx++;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	3301      	adds	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	2203      	movs	r2, #3
 8008884:	701a      	strb	r2, [r3, #0]
  idx++;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	3301      	adds	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800888c:	e013      	b.n	80088b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
    idx++;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	3301      	adds	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4413      	add	r3, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	3301      	adds	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e7      	bne.n	800888e <USBD_GetString+0x52>
 80088be:	e000      	b.n	80088c2 <USBD_GetString+0x86>
    return;
 80088c0:	bf00      	nop
  }
}
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088d8:	e005      	b.n	80088e6 <USBD_GetLen+0x1e>
  {
    len++;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	3301      	adds	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f5      	bne.n	80088da <USBD_GetLen+0x12>
  }

  return len;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f007 fe39 	bl	801059a <USBD_LL_Transmit>

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	2100      	movs	r1, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f007 fe28 	bl	801059a <USBD_LL_Transmit>

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2203      	movs	r2, #3
 8008964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f007 fe2c 	bl	80105dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	2100      	movs	r1, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f007 fe1b 	bl	80105dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2204      	movs	r2, #4
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089c0:	2300      	movs	r3, #0
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f007 fde7 	bl	801059a <USBD_LL_Transmit>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2205      	movs	r2, #5
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	2100      	movs	r1, #0
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f007 fdf5 	bl	80105dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	4a08      	ldr	r2, [pc, #32]	; (8008a2c <disk_status+0x30>)
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	79fa      	ldrb	r2, [r7, #7]
 8008a14:	4905      	ldr	r1, [pc, #20]	; (8008a2c <disk_status+0x30>)
 8008a16:	440a      	add	r2, r1
 8008a18:	7a12      	ldrb	r2, [r2, #8]
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20002358 	.word	0x20002358

08008a30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	4a0d      	ldr	r2, [pc, #52]	; (8008a78 <disk_initialize+0x48>)
 8008a42:	5cd3      	ldrb	r3, [r2, r3]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d111      	bne.n	8008a6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <disk_initialize+0x48>)
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <disk_initialize+0x48>)
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	4906      	ldr	r1, [pc, #24]	; (8008a78 <disk_initialize+0x48>)
 8008a60:	440a      	add	r2, r1
 8008a62:	7a12      	ldrb	r2, [r2, #8]
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20002358 	.word	0x20002358

08008a7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <disk_read+0x3c>)
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	689c      	ldr	r4, [r3, #8]
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4a07      	ldr	r2, [pc, #28]	; (8008ab8 <disk_read+0x3c>)
 8008a9c:	4413      	add	r3, r2
 8008a9e:	7a18      	ldrb	r0, [r3, #8]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	47a0      	blx	r4
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd90      	pop	{r4, r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20002358 	.word	0x20002358

08008abc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <disk_write+0x3c>)
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68dc      	ldr	r4, [r3, #12]
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4a07      	ldr	r2, [pc, #28]	; (8008af8 <disk_write+0x3c>)
 8008adc:	4413      	add	r3, r2
 8008ade:	7a18      	ldrb	r0, [r3, #8]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	47a0      	blx	r4
 8008ae8:	4603      	mov	r3, r0
 8008aea:	75fb      	strb	r3, [r7, #23]
  return res;
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd90      	pop	{r4, r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20002358 	.word	0x20002358

08008afc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	603a      	str	r2, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <disk_ioctl+0x38>)
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	79fa      	ldrb	r2, [r7, #7]
 8008b1a:	4906      	ldr	r1, [pc, #24]	; (8008b34 <disk_ioctl+0x38>)
 8008b1c:	440a      	add	r2, r1
 8008b1e:	7a10      	ldrb	r0, [r2, #8]
 8008b20:	79b9      	ldrb	r1, [r7, #6]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4798      	blx	r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20002358 	.word	0x20002358

08008b38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3301      	adds	r3, #1
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b48:	89fb      	ldrh	r3, [r7, #14]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	b21a      	sxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b21b      	sxth	r3, r3
 8008b58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3303      	adds	r3, #3
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	3202      	adds	r2, #2
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	7812      	ldrb	r2, [r2, #0]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7812      	ldrb	r2, [r2, #0]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	887a      	ldrh	r2, [r7, #2]
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	887b      	ldrh	r3, [r7, #2]
 8008bc8:	0a1b      	lsrs	r3, r3, #8
 8008bca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	887a      	ldrh	r2, [r7, #2]
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	701a      	strb	r2, [r3, #0]
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00d      	beq.n	8008c72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	1c53      	adds	r3, r2, #1
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	1c59      	adds	r1, r3, #1
 8008c60:	6179      	str	r1, [r7, #20]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	607b      	str	r3, [r7, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f1      	bne.n	8008c56 <mem_cpy+0x1a>
	}
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c7e:	b480      	push	{r7}
 8008c80:	b087      	sub	sp, #28
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	617a      	str	r2, [r7, #20]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f3      	bne.n	8008c8e <mem_set+0x10>
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008cb4:	b480      	push	{r7}
 8008cb6:	b089      	sub	sp, #36	; 0x24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	61fa      	str	r2, [r7, #28]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	61ba      	str	r2, [r7, #24]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	1acb      	subs	r3, r1, r3
 8008ce0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	607b      	str	r3, [r7, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <mem_cmp+0x40>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0eb      	beq.n	8008ccc <mem_cmp+0x18>

	return r;
 8008cf4:	697b      	ldr	r3, [r7, #20]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3724      	adds	r7, #36	; 0x24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008d0c:	e002      	b.n	8008d14 <chk_chr+0x12>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3301      	adds	r3, #1
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <chk_chr+0x26>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d1f2      	bne.n	8008d0e <chk_chr+0xc>
	return *str;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e029      	b.n	8008da0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d4c:	4a27      	ldr	r2, [pc, #156]	; (8008dec <chk_lock+0xb4>)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	4413      	add	r3, r2
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01d      	beq.n	8008d96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d5a:	4a24      	ldr	r2, [pc, #144]	; (8008dec <chk_lock+0xb4>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	4413      	add	r3, r2
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d116      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <chk_lock+0xb4>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	011b      	lsls	r3, r3, #4
 8008d72:	4413      	add	r3, r2
 8008d74:	3304      	adds	r3, #4
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d10c      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d80:	4a1a      	ldr	r2, [pc, #104]	; (8008dec <chk_lock+0xb4>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	4413      	add	r3, r2
 8008d88:	3308      	adds	r3, #8
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d102      	bne.n	8008d9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d94:	e007      	b.n	8008da6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d9d2      	bls.n	8008d4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d109      	bne.n	8008dc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <chk_lock+0x80>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d101      	bne.n	8008dbc <chk_lock+0x84>
 8008db8:	2300      	movs	r3, #0
 8008dba:	e010      	b.n	8008dde <chk_lock+0xa6>
 8008dbc:	2312      	movs	r3, #18
 8008dbe:	e00e      	b.n	8008dde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d108      	bne.n	8008dd8 <chk_lock+0xa0>
 8008dc6:	4a09      	ldr	r2, [pc, #36]	; (8008dec <chk_lock+0xb4>)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	4413      	add	r3, r2
 8008dce:	330c      	adds	r3, #12
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d101      	bne.n	8008ddc <chk_lock+0xa4>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	e000      	b.n	8008dde <chk_lock+0xa6>
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	200022d0 	.word	0x200022d0

08008df0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	e002      	b.n	8008e02 <enq_lock+0x12>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d806      	bhi.n	8008e16 <enq_lock+0x26>
 8008e08:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <enq_lock+0x40>)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	4413      	add	r3, r2
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f2      	bne.n	8008dfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	200022d0 	.word	0x200022d0

08008e34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e01f      	b.n	8008e84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e44:	4a41      	ldr	r2, [pc, #260]	; (8008f4c <inc_lock+0x118>)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	4413      	add	r3, r2
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d113      	bne.n	8008e7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e56:	4a3d      	ldr	r2, [pc, #244]	; (8008f4c <inc_lock+0x118>)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	4413      	add	r3, r2
 8008e5e:	3304      	adds	r3, #4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d109      	bne.n	8008e7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e6a:	4a38      	ldr	r2, [pc, #224]	; (8008f4c <inc_lock+0x118>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	4413      	add	r3, r2
 8008e72:	3308      	adds	r3, #8
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d006      	beq.n	8008e8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d9dc      	bls.n	8008e44 <inc_lock+0x10>
 8008e8a:	e000      	b.n	8008e8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d132      	bne.n	8008efa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e002      	b.n	8008ea0 <inc_lock+0x6c>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d806      	bhi.n	8008eb4 <inc_lock+0x80>
 8008ea6:	4a29      	ldr	r2, [pc, #164]	; (8008f4c <inc_lock+0x118>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	4413      	add	r3, r2
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f2      	bne.n	8008e9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d101      	bne.n	8008ebe <inc_lock+0x8a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e040      	b.n	8008f40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4922      	ldr	r1, [pc, #136]	; (8008f4c <inc_lock+0x118>)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	440b      	add	r3, r1
 8008eca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	491e      	ldr	r1, [pc, #120]	; (8008f4c <inc_lock+0x118>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3304      	adds	r3, #4
 8008eda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	695a      	ldr	r2, [r3, #20]
 8008ee0:	491a      	ldr	r1, [pc, #104]	; (8008f4c <inc_lock+0x118>)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	440b      	add	r3, r1
 8008ee8:	3308      	adds	r3, #8
 8008eea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008eec:	4a17      	ldr	r2, [pc, #92]	; (8008f4c <inc_lock+0x118>)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	4413      	add	r3, r2
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <inc_lock+0xe0>
 8008f00:	4a12      	ldr	r2, [pc, #72]	; (8008f4c <inc_lock+0x118>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	4413      	add	r3, r2
 8008f08:	330c      	adds	r3, #12
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <inc_lock+0xe0>
 8008f10:	2300      	movs	r3, #0
 8008f12:	e015      	b.n	8008f40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d108      	bne.n	8008f2c <inc_lock+0xf8>
 8008f1a:	4a0c      	ldr	r2, [pc, #48]	; (8008f4c <inc_lock+0x118>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	330c      	adds	r3, #12
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	e001      	b.n	8008f30 <inc_lock+0xfc>
 8008f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f30:	4906      	ldr	r1, [pc, #24]	; (8008f4c <inc_lock+0x118>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	440b      	add	r3, r1
 8008f38:	330c      	adds	r3, #12
 8008f3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200022d0 	.word	0x200022d0

08008f50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	607b      	str	r3, [r7, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d825      	bhi.n	8008fb0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f64:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <dec_lock+0x74>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	4413      	add	r3, r2
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f72:	89fb      	ldrh	r3, [r7, #14]
 8008f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f78:	d101      	bne.n	8008f7e <dec_lock+0x2e>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f7e:	89fb      	ldrh	r3, [r7, #14]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <dec_lock+0x3a>
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008f8a:	4a0e      	ldr	r2, [pc, #56]	; (8008fc4 <dec_lock+0x74>)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	4413      	add	r3, r2
 8008f92:	330c      	adds	r3, #12
 8008f94:	89fa      	ldrh	r2, [r7, #14]
 8008f96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f98:	89fb      	ldrh	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <dec_lock+0x5a>
 8008f9e:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <dec_lock+0x74>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	737b      	strb	r3, [r7, #13]
 8008fae:	e001      	b.n	8008fb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008fb4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	200022d0 	.word	0x200022d0

08008fc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e010      	b.n	8008ff8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008fd6:	4a0d      	ldr	r2, [pc, #52]	; (800900c <clear_lock+0x44>)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	4413      	add	r3, r2
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d105      	bne.n	8008ff2 <clear_lock+0x2a>
 8008fe6:	4a09      	ldr	r2, [pc, #36]	; (800900c <clear_lock+0x44>)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	4413      	add	r3, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d9eb      	bls.n	8008fd6 <clear_lock+0xe>
	}
}
 8008ffe:	bf00      	nop
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	200022d0 	.word	0x200022d0

08009010 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	78db      	ldrb	r3, [r3, #3]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d034      	beq.n	800908e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009028:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7858      	ldrb	r0, [r3, #1]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009034:	2301      	movs	r3, #1
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	f7ff fd40 	bl	8008abc <disk_write>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d002      	beq.n	8009048 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009042:	2301      	movs	r3, #1
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	e022      	b.n	800908e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	429a      	cmp	r2, r3
 800905c:	d217      	bcs.n	800908e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	789b      	ldrb	r3, [r3, #2]
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	e010      	b.n	8009088 <sync_window+0x78>
					wsect += fs->fsize;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7858      	ldrb	r0, [r3, #1]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800907a:	2301      	movs	r3, #1
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	f7ff fd1d 	bl	8008abc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3b01      	subs	r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d8eb      	bhi.n	8009066 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d01b      	beq.n	80090e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff ffad 	bl	8009010 <sync_window>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d113      	bne.n	80090e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7858      	ldrb	r0, [r3, #1]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80090ca:	2301      	movs	r3, #1
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	f7ff fcd5 	bl	8008a7c <disk_read>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80090de:	2301      	movs	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff87 	bl	8009010 <sync_window>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d159      	bne.n	80091c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d149      	bne.n	80091a8 <sync_fs+0xb4>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	791b      	ldrb	r3, [r3, #4]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d145      	bne.n	80091a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	899b      	ldrh	r3, [r3, #12]
 8009126:	461a      	mov	r2, r3
 8009128:	2100      	movs	r1, #0
 800912a:	f7ff fda8 	bl	8008c7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3338      	adds	r3, #56	; 0x38
 8009132:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009136:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fd37 	bl	8008bae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3338      	adds	r3, #56	; 0x38
 8009144:	4921      	ldr	r1, [pc, #132]	; (80091cc <sync_fs+0xd8>)
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fd4c 	bl	8008be4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3338      	adds	r3, #56	; 0x38
 8009150:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009154:	491e      	ldr	r1, [pc, #120]	; (80091d0 <sync_fs+0xdc>)
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fd44 	bl	8008be4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3338      	adds	r3, #56	; 0x38
 8009160:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7ff fd3a 	bl	8008be4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3338      	adds	r3, #56	; 0x38
 8009174:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7ff fd30 	bl	8008be4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7858      	ldrb	r0, [r3, #1]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800919c:	2301      	movs	r3, #1
 800919e:	f7ff fc8d 	bl	8008abc <disk_write>
			fs->fsi_flag = 0;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fca3 	bl	8008afc <disk_ioctl>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <sync_fs+0xcc>
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	41615252 	.word	0x41615252
 80091d0:	61417272 	.word	0x61417272

080091d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3b02      	subs	r3, #2
 80091e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	3b02      	subs	r3, #2
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d301      	bcc.n	80091f4 <clust2sect+0x20>
 80091f0:	2300      	movs	r3, #0
 80091f2:	e008      	b.n	8009206 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	895b      	ldrh	r3, [r3, #10]
 80091f8:	461a      	mov	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	fb03 f202 	mul.w	r2, r3, r2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	4413      	add	r3, r2
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d904      	bls.n	8009232 <get_fat+0x20>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009232:	2301      	movs	r3, #1
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e0bb      	b.n	80093b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	f000 8083 	beq.w	800934e <get_fat+0x13c>
 8009248:	2b03      	cmp	r3, #3
 800924a:	f300 80a7 	bgt.w	800939c <get_fat+0x18a>
 800924e:	2b01      	cmp	r3, #1
 8009250:	d002      	beq.n	8009258 <get_fat+0x46>
 8009252:	2b02      	cmp	r3, #2
 8009254:	d056      	beq.n	8009304 <get_fat+0xf2>
 8009256:	e0a1      	b.n	800939c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	085b      	lsrs	r3, r3, #1
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	899b      	ldrh	r3, [r3, #12]
 800926e:	4619      	mov	r1, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	fbb3 f3f1 	udiv	r3, r3, r1
 8009276:	4413      	add	r3, r2
 8009278:	4619      	mov	r1, r3
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f7ff ff0c 	bl	8009098 <move_window>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	f040 808d 	bne.w	80093a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	60fa      	str	r2, [r7, #12]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	8992      	ldrh	r2, [r2, #12]
 8009292:	fbb3 f1f2 	udiv	r1, r3, r2
 8009296:	fb01 f202 	mul.w	r2, r1, r2
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4413      	add	r3, r2
 80092a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	899b      	ldrh	r3, [r3, #12]
 80092ae:	4619      	mov	r1, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80092b6:	4413      	add	r3, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	6938      	ldr	r0, [r7, #16]
 80092bc:	f7ff feec 	bl	8009098 <move_window>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d16f      	bne.n	80093a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	899b      	ldrh	r3, [r3, #12]
 80092ca:	461a      	mov	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80092d2:	fb01 f202 	mul.w	r2, r1, r2
 80092d6:	1a9b      	subs	r3, r3, r2
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4413      	add	r3, r2
 80092dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	f003 0301 	and.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <get_fat+0xe8>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	091b      	lsrs	r3, r3, #4
 80092f8:	e002      	b.n	8009300 <get_fat+0xee>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009300:	617b      	str	r3, [r7, #20]
			break;
 8009302:	e055      	b.n	80093b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	899b      	ldrh	r3, [r3, #12]
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	b29b      	uxth	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	fbb3 f3f1 	udiv	r3, r3, r1
 8009318:	4413      	add	r3, r2
 800931a:	4619      	mov	r1, r3
 800931c:	6938      	ldr	r0, [r7, #16]
 800931e:	f7ff febb 	bl	8009098 <move_window>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d140      	bne.n	80093aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	8992      	ldrh	r2, [r2, #12]
 8009336:	fbb3 f0f2 	udiv	r0, r3, r2
 800933a:	fb00 f202 	mul.w	r2, r0, r2
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	440b      	add	r3, r1
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fbf8 	bl	8008b38 <ld_word>
 8009348:	4603      	mov	r3, r0
 800934a:	617b      	str	r3, [r7, #20]
			break;
 800934c:	e030      	b.n	80093b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	899b      	ldrh	r3, [r3, #12]
 8009356:	089b      	lsrs	r3, r3, #2
 8009358:	b29b      	uxth	r3, r3
 800935a:	4619      	mov	r1, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009362:	4413      	add	r3, r2
 8009364:	4619      	mov	r1, r3
 8009366:	6938      	ldr	r0, [r7, #16]
 8009368:	f7ff fe96 	bl	8009098 <move_window>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d11d      	bne.n	80093ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	8992      	ldrh	r2, [r2, #12]
 8009380:	fbb3 f0f2 	udiv	r0, r3, r2
 8009384:	fb00 f202 	mul.w	r2, r0, r2
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	440b      	add	r3, r1
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fbeb 	bl	8008b68 <ld_dword>
 8009392:	4603      	mov	r3, r0
 8009394:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009398:	617b      	str	r3, [r7, #20]
			break;
 800939a:	e009      	b.n	80093b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800939c:	2301      	movs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e006      	b.n	80093b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093a2:	bf00      	nop
 80093a4:	e004      	b.n	80093b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093a6:	bf00      	nop
 80093a8:	e002      	b.n	80093b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093aa:	bf00      	nop
 80093ac:	e000      	b.n	80093b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80093ae:	bf00      	nop
		}
	}

	return val;
 80093b0:	697b      	ldr	r3, [r7, #20]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80093ba:	b590      	push	{r4, r7, lr}
 80093bc:	b089      	sub	sp, #36	; 0x24
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80093c6:	2302      	movs	r3, #2
 80093c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	f240 8102 	bls.w	80095d6 <put_fat+0x21c>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	429a      	cmp	r2, r3
 80093da:	f080 80fc 	bcs.w	80095d6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	f000 80b6 	beq.w	8009554 <put_fat+0x19a>
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	f300 80fd 	bgt.w	80095e8 <put_fat+0x22e>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <put_fat+0x40>
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	f000 8083 	beq.w	80094fe <put_fat+0x144>
 80093f8:	e0f6      	b.n	80095e8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	61bb      	str	r3, [r7, #24]
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	085b      	lsrs	r3, r3, #1
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	4413      	add	r3, r2
 8009406:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	899b      	ldrh	r3, [r3, #12]
 8009410:	4619      	mov	r1, r3
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	fbb3 f3f1 	udiv	r3, r3, r1
 8009418:	4413      	add	r3, r2
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff fe3b 	bl	8009098 <move_window>
 8009422:	4603      	mov	r3, r0
 8009424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 80d6 	bne.w	80095da <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	61ba      	str	r2, [r7, #24]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	8992      	ldrh	r2, [r2, #12]
 800943e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009442:	fb00 f202 	mul.w	r2, r0, r2
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	440b      	add	r3, r1
 800944a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <put_fat+0xb8>
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b25b      	sxtb	r3, r3
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	b25a      	sxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	b25b      	sxtb	r3, r3
 800946a:	4313      	orrs	r3, r2
 800946c:	b25b      	sxtb	r3, r3
 800946e:	b2db      	uxtb	r3, r3
 8009470:	e001      	b.n	8009476 <put_fat+0xbc>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	899b      	ldrh	r3, [r3, #12]
 8009488:	4619      	mov	r1, r3
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009490:	4413      	add	r3, r2
 8009492:	4619      	mov	r1, r3
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f7ff fdff 	bl	8009098 <move_window>
 800949a:	4603      	mov	r3, r0
 800949c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800949e:	7ffb      	ldrb	r3, [r7, #31]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f040 809c 	bne.w	80095de <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	899b      	ldrh	r3, [r3, #12]
 80094b0:	461a      	mov	r2, r3
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80094b8:	fb00 f202 	mul.w	r2, r0, r2
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	440b      	add	r3, r1
 80094c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <put_fat+0x11a>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	091b      	lsrs	r3, r3, #4
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	e00e      	b.n	80094f2 <put_fat+0x138>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	b25b      	sxtb	r3, r3
 80094da:	f023 030f 	bic.w	r3, r3, #15
 80094de:	b25a      	sxtb	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	4313      	orrs	r3, r2
 80094ee:	b25b      	sxtb	r3, r3
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2201      	movs	r2, #1
 80094fa:	70da      	strb	r2, [r3, #3]
			break;
 80094fc:	e074      	b.n	80095e8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	899b      	ldrh	r3, [r3, #12]
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	b29b      	uxth	r3, r3
 800950a:	4619      	mov	r1, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009512:	4413      	add	r3, r2
 8009514:	4619      	mov	r1, r3
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fdbe 	bl	8009098 <move_window>
 800951c:	4603      	mov	r3, r0
 800951e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d15d      	bne.n	80095e2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	8992      	ldrh	r2, [r2, #12]
 8009534:	fbb3 f0f2 	udiv	r0, r3, r2
 8009538:	fb00 f202 	mul.w	r2, r0, r2
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	440b      	add	r3, r1
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	b292      	uxth	r2, r2
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fb31 	bl	8008bae <st_word>
			fs->wflag = 1;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	70da      	strb	r2, [r3, #3]
			break;
 8009552:	e049      	b.n	80095e8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	899b      	ldrh	r3, [r3, #12]
 800955c:	089b      	lsrs	r3, r3, #2
 800955e:	b29b      	uxth	r3, r3
 8009560:	4619      	mov	r1, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	fbb3 f3f1 	udiv	r3, r3, r1
 8009568:	4413      	add	r3, r2
 800956a:	4619      	mov	r1, r3
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff fd93 	bl	8009098 <move_window>
 8009572:	4603      	mov	r3, r0
 8009574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009576:	7ffb      	ldrb	r3, [r7, #31]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d134      	bne.n	80095e6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	8992      	ldrh	r2, [r2, #12]
 8009590:	fbb3 f0f2 	udiv	r0, r3, r2
 8009594:	fb00 f202 	mul.w	r2, r0, r2
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	440b      	add	r3, r1
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff fae3 	bl	8008b68 <ld_dword>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095a8:	4323      	orrs	r3, r4
 80095aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	8992      	ldrh	r2, [r2, #12]
 80095ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80095be:	fb00 f202 	mul.w	r2, r0, r2
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	440b      	add	r3, r1
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff fb0b 	bl	8008be4 <st_dword>
			fs->wflag = 1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	70da      	strb	r2, [r3, #3]
			break;
 80095d4:	e008      	b.n	80095e8 <put_fat+0x22e>
		}
	}
 80095d6:	bf00      	nop
 80095d8:	e006      	b.n	80095e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80095da:	bf00      	nop
 80095dc:	e004      	b.n	80095e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80095de:	bf00      	nop
 80095e0:	e002      	b.n	80095e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80095e6:	bf00      	nop
	return res;
 80095e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3724      	adds	r7, #36	; 0x24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd90      	pop	{r4, r7, pc}

080095f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b088      	sub	sp, #32
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d904      	bls.n	8009618 <remove_chain+0x26>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	429a      	cmp	r2, r3
 8009616:	d301      	bcc.n	800961c <remove_chain+0x2a>
 8009618:	2302      	movs	r3, #2
 800961a:	e04b      	b.n	80096b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00c      	beq.n	800963c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	69b8      	ldr	r0, [r7, #24]
 800962a:	f7ff fec6 	bl	80093ba <put_fat>
 800962e:	4603      	mov	r3, r0
 8009630:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009632:	7ffb      	ldrb	r3, [r7, #31]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <remove_chain+0x4a>
 8009638:	7ffb      	ldrb	r3, [r7, #31]
 800963a:	e03b      	b.n	80096b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fde7 	bl	8009212 <get_fat>
 8009644:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d031      	beq.n	80096b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d101      	bne.n	8009656 <remove_chain+0x64>
 8009652:	2302      	movs	r3, #2
 8009654:	e02e      	b.n	80096b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965c:	d101      	bne.n	8009662 <remove_chain+0x70>
 800965e:	2301      	movs	r3, #1
 8009660:	e028      	b.n	80096b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009662:	2200      	movs	r2, #0
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	69b8      	ldr	r0, [r7, #24]
 8009668:	f7ff fea7 	bl	80093ba <put_fat>
 800966c:	4603      	mov	r3, r0
 800966e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009670:	7ffb      	ldrb	r3, [r7, #31]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <remove_chain+0x88>
 8009676:	7ffb      	ldrb	r3, [r7, #31]
 8009678:	e01c      	b.n	80096b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	3b02      	subs	r3, #2
 8009684:	429a      	cmp	r2, r3
 8009686:	d20b      	bcs.n	80096a0 <remove_chain+0xae>
			fs->free_clst++;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	791b      	ldrb	r3, [r3, #4]
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d3c6      	bcc.n	800963c <remove_chain+0x4a>
 80096ae:	e000      	b.n	80096b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3720      	adds	r7, #32
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10d      	bne.n	80096ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <create_chain+0x2c>
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d31b      	bcc.n	8009720 <create_chain+0x64>
 80096e8:	2301      	movs	r3, #1
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	e018      	b.n	8009720 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fd8e 	bl	8009212 <get_fat>
 80096f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d801      	bhi.n	8009702 <create_chain+0x46>
 80096fe:	2301      	movs	r3, #1
 8009700:	e070      	b.n	80097e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d101      	bne.n	800970e <create_chain+0x52>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	e06a      	b.n	80097e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	429a      	cmp	r2, r3
 8009716:	d201      	bcs.n	800971c <create_chain+0x60>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	e063      	b.n	80097e4 <create_chain+0x128>
		scl = clst;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	3301      	adds	r3, #1
 8009728:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	429a      	cmp	r2, r3
 8009732:	d307      	bcc.n	8009744 <create_chain+0x88>
				ncl = 2;
 8009734:	2302      	movs	r3, #2
 8009736:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009738:	69fa      	ldr	r2, [r7, #28]
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	429a      	cmp	r2, r3
 800973e:	d901      	bls.n	8009744 <create_chain+0x88>
 8009740:	2300      	movs	r3, #0
 8009742:	e04f      	b.n	80097e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009744:	69f9      	ldr	r1, [r7, #28]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff fd63 	bl	8009212 <get_fat>
 800974c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00e      	beq.n	8009772 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d003      	beq.n	8009762 <create_chain+0xa6>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009760:	d101      	bne.n	8009766 <create_chain+0xaa>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	e03e      	b.n	80097e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	429a      	cmp	r2, r3
 800976c:	d1da      	bne.n	8009724 <create_chain+0x68>
 800976e:	2300      	movs	r3, #0
 8009770:	e038      	b.n	80097e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009772:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	69f9      	ldr	r1, [r7, #28]
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f7ff fe1d 	bl	80093ba <put_fat>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <create_chain+0xe2>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6938      	ldr	r0, [r7, #16]
 8009796:	f7ff fe10 	bl	80093ba <put_fat>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d116      	bne.n	80097d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	3b02      	subs	r3, #2
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d804      	bhi.n	80097c2 <create_chain+0x106>
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	711a      	strb	r2, [r3, #4]
 80097d0:	e007      	b.n	80097e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d102      	bne.n	80097de <create_chain+0x122>
 80097d8:	f04f 33ff 	mov.w	r3, #4294967295
 80097dc:	e000      	b.n	80097e0 <create_chain+0x124>
 80097de:	2301      	movs	r3, #1
 80097e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	3304      	adds	r3, #4
 8009802:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	899b      	ldrh	r3, [r3, #12]
 8009808:	461a      	mov	r2, r3
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	8952      	ldrh	r2, [r2, #10]
 8009814:	fbb3 f3f2 	udiv	r3, r3, r2
 8009818:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	613a      	str	r2, [r7, #16]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <clmt_clust+0x42>
 800982a:	2300      	movs	r3, #0
 800982c:	e010      	b.n	8009850 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d307      	bcc.n	8009846 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	3304      	adds	r3, #4
 8009842:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009844:	e7e9      	b.n	800981a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009846:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4413      	add	r3, r2
}
 8009850:	4618      	mov	r0, r3
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009872:	d204      	bcs.n	800987e <dir_sdi+0x22>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	f003 031f 	and.w	r3, r3, #31
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <dir_sdi+0x26>
		return FR_INT_ERR;
 800987e:	2302      	movs	r3, #2
 8009880:	e071      	b.n	8009966 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <dir_sdi+0x46>
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d902      	bls.n	80098a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10c      	bne.n	80098c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	095b      	lsrs	r3, r3, #5
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	8912      	ldrh	r2, [r2, #8]
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d301      	bcc.n	80098b8 <dir_sdi+0x5c>
 80098b4:	2302      	movs	r3, #2
 80098b6:	e056      	b.n	8009966 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	61da      	str	r2, [r3, #28]
 80098c0:	e02d      	b.n	800991e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	895b      	ldrh	r3, [r3, #10]
 80098c6:	461a      	mov	r2, r3
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	899b      	ldrh	r3, [r3, #12]
 80098cc:	fb02 f303 	mul.w	r3, r2, r3
 80098d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098d2:	e019      	b.n	8009908 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fc9a 	bl	8009212 <get_fat>
 80098de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d101      	bne.n	80098ec <dir_sdi+0x90>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e03c      	b.n	8009966 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d904      	bls.n	80098fc <dir_sdi+0xa0>
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d301      	bcc.n	8009900 <dir_sdi+0xa4>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e032      	b.n	8009966 <dir_sdi+0x10a>
			ofs -= csz;
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	429a      	cmp	r2, r3
 800990e:	d2e1      	bcs.n	80098d4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009910:	6979      	ldr	r1, [r7, #20]
 8009912:	6938      	ldr	r0, [r7, #16]
 8009914:	f7ff fc5e 	bl	80091d4 <clust2sect>
 8009918:	4602      	mov	r2, r0
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <dir_sdi+0xd4>
 800992c:	2302      	movs	r3, #2
 800992e:	e01a      	b.n	8009966 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	69da      	ldr	r2, [r3, #28]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	899b      	ldrh	r3, [r3, #12]
 8009938:	4619      	mov	r1, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009940:	441a      	add	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	461a      	mov	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	fbb3 f0f2 	udiv	r0, r3, r2
 8009958:	fb00 f202 	mul.w	r2, r0, r2
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	18ca      	adds	r2, r1, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	3320      	adds	r3, #32
 8009984:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <dir_next+0x28>
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009994:	d301      	bcc.n	800999a <dir_next+0x2c>
 8009996:	2304      	movs	r3, #4
 8009998:	e0bb      	b.n	8009b12 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	899b      	ldrh	r3, [r3, #12]
 800999e:	461a      	mov	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80099a6:	fb01 f202 	mul.w	r2, r1, r2
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 809d 	bne.w	8009aec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	1c5a      	adds	r2, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10b      	bne.n	80099dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	8912      	ldrh	r2, [r2, #8]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	f0c0 808d 	bcc.w	8009aec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	61da      	str	r2, [r3, #28]
 80099d8:	2304      	movs	r3, #4
 80099da:	e09a      	b.n	8009b12 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	899b      	ldrh	r3, [r3, #12]
 80099e0:	461a      	mov	r2, r3
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	8952      	ldrh	r2, [r2, #10]
 80099ec:	3a01      	subs	r2, #1
 80099ee:	4013      	ands	r3, r2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d17b      	bne.n	8009aec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	4619      	mov	r1, r3
 80099fc:	4610      	mov	r0, r2
 80099fe:	f7ff fc08 	bl	8009212 <get_fat>
 8009a02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d801      	bhi.n	8009a0e <dir_next+0xa0>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e081      	b.n	8009b12 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d101      	bne.n	8009a1a <dir_next+0xac>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e07b      	b.n	8009b12 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d359      	bcc.n	8009ad8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	61da      	str	r2, [r3, #28]
 8009a30:	2304      	movs	r3, #4
 8009a32:	e06e      	b.n	8009b12 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7ff fe3d 	bl	80096bc <create_chain>
 8009a42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <dir_next+0xe0>
 8009a4a:	2307      	movs	r3, #7
 8009a4c:	e061      	b.n	8009b12 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <dir_next+0xea>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e05c      	b.n	8009b12 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d101      	bne.n	8009a64 <dir_next+0xf6>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e056      	b.n	8009b12 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff fad3 	bl	8009010 <sync_window>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <dir_next+0x106>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e04e      	b.n	8009b12 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	899b      	ldrh	r3, [r3, #12]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2100      	movs	r1, #0
 8009a82:	f7ff f8fc 	bl	8008c7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	6979      	ldr	r1, [r7, #20]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff fba1 	bl	80091d4 <clust2sect>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	635a      	str	r2, [r3, #52]	; 0x34
 8009a98:	e012      	b.n	8009ac0 <dir_next+0x152>
						fs->wflag = 1;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7ff fab5 	bl	8009010 <sync_window>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <dir_next+0x142>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e030      	b.n	8009b12 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	635a      	str	r2, [r3, #52]	; 0x34
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	895b      	ldrh	r3, [r3, #10]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d3e6      	bcc.n	8009a9a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ade:	6979      	ldr	r1, [r7, #20]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f7ff fb77 	bl	80091d4 <clust2sect>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	899b      	ldrh	r3, [r3, #12]
 8009afc:	461a      	mov	r2, r3
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b04:	fb00 f202 	mul.w	r2, r0, r2
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	18ca      	adds	r2, r1, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b086      	sub	sp, #24
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff fe95 	bl	800985c <dir_sdi>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d12b      	bne.n	8009b94 <dir_alloc+0x7a>
		n = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	4619      	mov	r1, r3
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f7ff faa6 	bl	8009098 <move_window>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d11d      	bne.n	8009b92 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2be5      	cmp	r3, #229	; 0xe5
 8009b5e:	d004      	beq.n	8009b6a <dir_alloc+0x50>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d107      	bne.n	8009b7a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d102      	bne.n	8009b7e <dir_alloc+0x64>
 8009b78:	e00c      	b.n	8009b94 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b7e:	2101      	movs	r1, #1
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fef4 	bl	800996e <dir_next>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0d7      	beq.n	8009b40 <dir_alloc+0x26>
 8009b90:	e000      	b.n	8009b94 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d101      	bne.n	8009b9e <dir_alloc+0x84>
 8009b9a:	2307      	movs	r3, #7
 8009b9c:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	331a      	adds	r3, #26
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe ffbe 	bl	8008b38 <ld_word>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d109      	bne.n	8009bdc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe ffb3 	bl	8008b38 <ld_word>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	331a      	adds	r3, #26
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	b292      	uxth	r2, r2
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe ffd6 	bl	8008bae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d109      	bne.n	8009c1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f103 0214 	add.w	r2, r3, #20
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	0c1b      	lsrs	r3, r3, #16
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe ffc8 	bl	8008bae <st_word>
	}
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	331a      	adds	r3, #26
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe ff7e 	bl	8008b38 <ld_word>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <cmp_lfn+0x1e>
 8009c42:	2300      	movs	r3, #0
 8009c44:	e059      	b.n	8009cfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c4e:	1e5a      	subs	r2, r3, #1
 8009c50:	4613      	mov	r3, r2
 8009c52:	005b      	lsls	r3, r3, #1
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	81fb      	strh	r3, [r7, #14]
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	e033      	b.n	8009cce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009c66:	4a27      	ldr	r2, [pc, #156]	; (8009d04 <cmp_lfn+0xdc>)
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	4413      	add	r3, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe ff5f 	bl	8008b38 <ld_word>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009c7e:	89fb      	ldrh	r3, [r7, #14]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d01a      	beq.n	8009cba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	2b31      	cmp	r3, #49	; 0x31
 8009c88:	d812      	bhi.n	8009cb0 <cmp_lfn+0x88>
 8009c8a:	89bb      	ldrh	r3, [r7, #12]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f002 ff05 	bl	800ca9c <ff_wtoupper>
 8009c92:	4603      	mov	r3, r0
 8009c94:	461c      	mov	r4, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	617a      	str	r2, [r7, #20]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f002 fef9 	bl	800ca9c <ff_wtoupper>
 8009caa:	4603      	mov	r3, r0
 8009cac:	429c      	cmp	r4, r3
 8009cae:	d001      	beq.n	8009cb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e022      	b.n	8009cfa <cmp_lfn+0xd2>
			}
			wc = uc;
 8009cb4:	89bb      	ldrh	r3, [r7, #12]
 8009cb6:	81fb      	strh	r3, [r7, #14]
 8009cb8:	e006      	b.n	8009cc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009cba:	89bb      	ldrh	r3, [r7, #12]
 8009cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d001      	beq.n	8009cc8 <cmp_lfn+0xa0>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e018      	b.n	8009cfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2b0c      	cmp	r3, #12
 8009cd2:	d9c8      	bls.n	8009c66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00b      	beq.n	8009cf8 <cmp_lfn+0xd0>
 8009ce0:	89fb      	ldrh	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d008      	beq.n	8009cf8 <cmp_lfn+0xd0>
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <cmp_lfn+0xd0>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e000      	b.n	8009cfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009cf8:	2301      	movs	r3, #1
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd90      	pop	{r4, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	080114e0 	.word	0x080114e0

08009d08 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	331a      	adds	r3, #26
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe ff0e 	bl	8008b38 <ld_word>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <pick_lfn+0x1e>
 8009d22:	2300      	movs	r3, #0
 8009d24:	e04d      	b.n	8009dc2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2e:	1e5a      	subs	r2, r3, #1
 8009d30:	4613      	mov	r3, r2
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	81fb      	strh	r3, [r7, #14]
 8009d40:	2300      	movs	r3, #0
 8009d42:	613b      	str	r3, [r7, #16]
 8009d44:	e028      	b.n	8009d98 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009d46:	4a21      	ldr	r2, [pc, #132]	; (8009dcc <pick_lfn+0xc4>)
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	4413      	add	r3, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe feef 	bl	8008b38 <ld_word>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009d5e:	89fb      	ldrh	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00f      	beq.n	8009d84 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2b31      	cmp	r3, #49	; 0x31
 8009d68:	d901      	bls.n	8009d6e <pick_lfn+0x66>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e029      	b.n	8009dc2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009d6e:	89bb      	ldrh	r3, [r7, #12]
 8009d70:	81fb      	strh	r3, [r7, #14]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	617a      	str	r2, [r7, #20]
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	89fa      	ldrh	r2, [r7, #14]
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	e006      	b.n	8009d92 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009d84:	89bb      	ldrh	r3, [r7, #12]
 8009d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d001      	beq.n	8009d92 <pick_lfn+0x8a>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e017      	b.n	8009dc2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	3301      	adds	r3, #1
 8009d96:	613b      	str	r3, [r7, #16]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2b0c      	cmp	r3, #12
 8009d9c:	d9d3      	bls.n	8009d46 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b31      	cmp	r3, #49	; 0x31
 8009dae:	d901      	bls.n	8009db4 <pick_lfn+0xac>
 8009db0:	2300      	movs	r3, #0
 8009db2:	e006      	b.n	8009dc2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	4413      	add	r3, r2
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009dc0:	2301      	movs	r3, #1
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	080114e0 	.word	0x080114e0

08009dd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4611      	mov	r1, r2
 8009ddc:	461a      	mov	r2, r3
 8009dde:	460b      	mov	r3, r1
 8009de0:	71fb      	strb	r3, [r7, #7]
 8009de2:	4613      	mov	r3, r2
 8009de4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	330d      	adds	r3, #13
 8009dea:	79ba      	ldrb	r2, [r7, #6]
 8009dec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	330b      	adds	r3, #11
 8009df2:	220f      	movs	r2, #15
 8009df4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	331a      	adds	r3, #26
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fed2 	bl	8008bae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	4613      	mov	r3, r2
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	82fb      	strh	r3, [r7, #22]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009e22:	8afb      	ldrh	r3, [r7, #22]
 8009e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d007      	beq.n	8009e3c <put_lfn+0x6c>
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	61fa      	str	r2, [r7, #28]
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009e3c:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <put_lfn+0xcc>)
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	4413      	add	r3, r2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	4413      	add	r3, r2
 8009e4a:	8afa      	ldrh	r2, [r7, #22]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fead 	bl	8008bae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009e54:	8afb      	ldrh	r3, [r7, #22]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d102      	bne.n	8009e60 <put_lfn+0x90>
 8009e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e5e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b0c      	cmp	r3, #12
 8009e6a:	d9da      	bls.n	8009e22 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009e6c:	8afb      	ldrh	r3, [r7, #22]
 8009e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d006      	beq.n	8009e84 <put_lfn+0xb4>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d103      	bne.n	8009e8c <put_lfn+0xbc>
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	79fa      	ldrb	r2, [r7, #7]
 8009e90:	701a      	strb	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	080114e0 	.word	0x080114e0

08009ea0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	; 0x30
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009eae:	220b      	movs	r2, #11
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7fe fec2 	bl	8008c3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b05      	cmp	r3, #5
 8009ebc:	d92b      	bls.n	8009f16 <gen_numname+0x76>
		sr = seq;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009ec2:	e022      	b.n	8009f0a <gen_numname+0x6a>
			wc = *lfn++;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	1c9a      	adds	r2, r3, #2
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009ece:	2300      	movs	r3, #0
 8009ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed2:	e017      	b.n	8009f04 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	005a      	lsls	r2, r3, #1
 8009ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	4413      	add	r3, r2
 8009ee0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d005      	beq.n	8009efe <gen_numname+0x5e>
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009ef8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009efc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	3301      	adds	r3, #1
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d9e4      	bls.n	8009ed4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1d8      	bne.n	8009ec4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009f16:	2307      	movs	r3, #7
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	3330      	adds	r3, #48	; 0x30
 8009f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f2e:	2b39      	cmp	r3, #57	; 0x39
 8009f30:	d904      	bls.n	8009f3c <gen_numname+0x9c>
 8009f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f36:	3307      	adds	r3, #7
 8009f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f42:	3330      	adds	r3, #48	; 0x30
 8009f44:	443b      	add	r3, r7
 8009f46:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009f4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	091b      	lsrs	r3, r3, #4
 8009f52:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1df      	bne.n	8009f1a <gen_numname+0x7a>
	ns[i] = '~';
 8009f5a:	f107 0214 	add.w	r2, r7, #20
 8009f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f60:	4413      	add	r3, r2
 8009f62:	227e      	movs	r2, #126	; 0x7e
 8009f64:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6a:	e002      	b.n	8009f72 <gen_numname+0xd2>
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	3301      	adds	r3, #1
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
 8009f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d205      	bcs.n	8009f86 <gen_numname+0xe6>
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	4413      	add	r3, r2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d1f2      	bne.n	8009f6c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	2b07      	cmp	r3, #7
 8009f8a:	d807      	bhi.n	8009f9c <gen_numname+0xfc>
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	62ba      	str	r2, [r7, #40]	; 0x28
 8009f92:	3330      	adds	r3, #48	; 0x30
 8009f94:	443b      	add	r3, r7
 8009f96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009f9a:	e000      	b.n	8009f9e <gen_numname+0xfe>
 8009f9c:	2120      	movs	r1, #32
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	627a      	str	r2, [r7, #36]	; 0x24
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	460a      	mov	r2, r1
 8009faa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	2b07      	cmp	r3, #7
 8009fb0:	d9e9      	bls.n	8009f86 <gen_numname+0xe6>
}
 8009fb2:	bf00      	nop
 8009fb4:	bf00      	nop
 8009fb6:	3730      	adds	r7, #48	; 0x30
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009fc8:	230b      	movs	r3, #11
 8009fca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	0852      	lsrs	r2, r2, #1
 8009fd2:	01db      	lsls	r3, r3, #7
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	6079      	str	r1, [r7, #4]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	60bb      	str	r3, [r7, #8]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1ed      	bne.n	8009fcc <sum_sfn+0x10>
	return sum;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b086      	sub	sp, #24
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a008:	2304      	movs	r3, #4
 800a00a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a012:	23ff      	movs	r3, #255	; 0xff
 800a014:	757b      	strb	r3, [r7, #21]
 800a016:	23ff      	movs	r3, #255	; 0xff
 800a018:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a01a:	e081      	b.n	800a120 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	4619      	mov	r1, r3
 800a022:	6938      	ldr	r0, [r7, #16]
 800a024:	f7ff f838 	bl	8009098 <move_window>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d17c      	bne.n	800a12c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a03a:	7dbb      	ldrb	r3, [r7, #22]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a040:	2304      	movs	r3, #4
 800a042:	75fb      	strb	r3, [r7, #23]
 800a044:	e077      	b.n	800a136 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	330b      	adds	r3, #11
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a052:	73fb      	strb	r3, [r7, #15]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	7bfa      	ldrb	r2, [r7, #15]
 800a058:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a05a:	7dbb      	ldrb	r3, [r7, #22]
 800a05c:	2be5      	cmp	r3, #229	; 0xe5
 800a05e:	d00e      	beq.n	800a07e <dir_read+0x80>
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	2b2e      	cmp	r3, #46	; 0x2e
 800a064:	d00b      	beq.n	800a07e <dir_read+0x80>
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	f023 0320 	bic.w	r3, r3, #32
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	bf0c      	ite	eq
 800a070:	2301      	moveq	r3, #1
 800a072:	2300      	movne	r3, #0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d002      	beq.n	800a084 <dir_read+0x86>
				ord = 0xFF;
 800a07e:	23ff      	movs	r3, #255	; 0xff
 800a080:	757b      	strb	r3, [r7, #21]
 800a082:	e044      	b.n	800a10e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	2b0f      	cmp	r3, #15
 800a088:	d12f      	bne.n	800a0ea <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a08a:	7dbb      	ldrb	r3, [r7, #22]
 800a08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00d      	beq.n	800a0b0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	7b5b      	ldrb	r3, [r3, #13]
 800a09a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a09c:	7dbb      	ldrb	r3, [r7, #22]
 800a09e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a2:	75bb      	strb	r3, [r7, #22]
 800a0a4:	7dbb      	ldrb	r3, [r7, #22]
 800a0a6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	695a      	ldr	r2, [r3, #20]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a0b0:	7dba      	ldrb	r2, [r7, #22]
 800a0b2:	7d7b      	ldrb	r3, [r7, #21]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d115      	bne.n	800a0e4 <dir_read+0xe6>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	330d      	adds	r3, #13
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	7d3a      	ldrb	r2, [r7, #20]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d10e      	bne.n	800a0e4 <dir_read+0xe6>
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7ff fe19 	bl	8009d08 <pick_lfn>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <dir_read+0xe6>
 800a0dc:	7d7b      	ldrb	r3, [r7, #21]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	e000      	b.n	800a0e6 <dir_read+0xe8>
 800a0e4:	23ff      	movs	r3, #255	; 0xff
 800a0e6:	757b      	strb	r3, [r7, #21]
 800a0e8:	e011      	b.n	800a10e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a0ea:	7d7b      	ldrb	r3, [r7, #21]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <dir_read+0x106>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ff61 	bl	8009fbc <sum_sfn>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	7d3b      	ldrb	r3, [r7, #20]
 800a100:	4293      	cmp	r3, r2
 800a102:	d015      	beq.n	800a130 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800a10c:	e010      	b.n	800a130 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a10e:	2100      	movs	r1, #0
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fc2c 	bl	800996e <dir_next>
 800a116:	4603      	mov	r3, r0
 800a118:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d109      	bne.n	800a134 <dir_read+0x136>
	while (dp->sect) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f47f af79 	bne.w	800a01c <dir_read+0x1e>
 800a12a:	e004      	b.n	800a136 <dir_read+0x138>
		if (res != FR_OK) break;
 800a12c:	bf00      	nop
 800a12e:	e002      	b.n	800a136 <dir_read+0x138>
					break;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <dir_read+0x138>
		if (res != FR_OK) break;
 800a134:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <dir_read+0x144>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	61da      	str	r2, [r3, #28]
	return res;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fb7d 	bl	800985c <dir_sdi>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <dir_find+0x24>
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	e0a9      	b.n	800a2c4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a170:	23ff      	movs	r3, #255	; 0xff
 800a172:	753b      	strb	r3, [r7, #20]
 800a174:	7d3b      	ldrb	r3, [r7, #20]
 800a176:	757b      	strb	r3, [r7, #21]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f04f 32ff 	mov.w	r2, #4294967295
 800a17e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	4619      	mov	r1, r3
 800a186:	6938      	ldr	r0, [r7, #16]
 800a188:	f7fe ff86 	bl	8009098 <move_window>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 8090 	bne.w	800a2b8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1a0:	7dbb      	ldrb	r3, [r7, #22]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <dir_find+0x60>
 800a1a6:	2304      	movs	r3, #4
 800a1a8:	75fb      	strb	r3, [r7, #23]
 800a1aa:	e08a      	b.n	800a2c2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	330b      	adds	r3, #11
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1b8:	73fb      	strb	r3, [r7, #15]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a1c0:	7dbb      	ldrb	r3, [r7, #22]
 800a1c2:	2be5      	cmp	r3, #229	; 0xe5
 800a1c4:	d007      	beq.n	800a1d6 <dir_find+0x8a>
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <dir_find+0x98>
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d006      	beq.n	800a1e4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a1d6:	23ff      	movs	r3, #255	; 0xff
 800a1d8:	757b      	strb	r3, [r7, #21]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a1e2:	e05e      	b.n	800a2a2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d136      	bne.n	800a258 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d154      	bne.n	800a2a2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a1f8:	7dbb      	ldrb	r3, [r7, #22]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00d      	beq.n	800a21e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	7b5b      	ldrb	r3, [r3, #13]
 800a208:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
 800a20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a210:	75bb      	strb	r3, [r7, #22]
 800a212:	7dbb      	ldrb	r3, [r7, #22]
 800a214:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695a      	ldr	r2, [r3, #20]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a21e:	7dba      	ldrb	r2, [r7, #22]
 800a220:	7d7b      	ldrb	r3, [r7, #21]
 800a222:	429a      	cmp	r2, r3
 800a224:	d115      	bne.n	800a252 <dir_find+0x106>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	330d      	adds	r3, #13
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	7d3a      	ldrb	r2, [r7, #20]
 800a230:	429a      	cmp	r2, r3
 800a232:	d10e      	bne.n	800a252 <dir_find+0x106>
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7ff fcf2 	bl	8009c28 <cmp_lfn>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <dir_find+0x106>
 800a24a:	7d7b      	ldrb	r3, [r7, #21]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	e000      	b.n	800a254 <dir_find+0x108>
 800a252:	23ff      	movs	r3, #255	; 0xff
 800a254:	757b      	strb	r3, [r7, #21]
 800a256:	e024      	b.n	800a2a2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a258:	7d7b      	ldrb	r3, [r7, #21]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <dir_find+0x126>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff feaa 	bl	8009fbc <sum_sfn>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	7d3b      	ldrb	r3, [r7, #20]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d024      	beq.n	800a2bc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <dir_find+0x14a>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a18      	ldr	r0, [r3, #32]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3324      	adds	r3, #36	; 0x24
 800a288:	220b      	movs	r2, #11
 800a28a:	4619      	mov	r1, r3
 800a28c:	f7fe fd12 	bl	8008cb4 <mem_cmp>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d014      	beq.n	800a2c0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a296:	23ff      	movs	r3, #255	; 0xff
 800a298:	757b      	strb	r3, [r7, #21]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fb62 	bl	800996e <dir_next>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f43f af65 	beq.w	800a180 <dir_find+0x34>
 800a2b6:	e004      	b.n	800a2c2 <dir_find+0x176>
		if (res != FR_OK) break;
 800a2b8:	bf00      	nop
 800a2ba:	e002      	b.n	800a2c2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a2bc:	bf00      	nop
 800a2be:	e000      	b.n	800a2c2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a2c0:	bf00      	nop

	return res;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08c      	sub	sp, #48	; 0x30
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a2e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <dir_register+0x20>
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	e0e0      	b.n	800a4ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f0:	e002      	b.n	800a2f8 <dir_register+0x2c>
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f4      	bne.n	800a2f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	220c      	movs	r2, #12
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fc91 	bl	8008c3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d032      	beq.n	800a38a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2240      	movs	r2, #64	; 0x40
 800a328:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a32c:	2301      	movs	r3, #1
 800a32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a330:	e016      	b.n	800a360 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	f107 010c 	add.w	r1, r7, #12
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	f7ff fdad 	bl	8009ea0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ff00 	bl	800a14c <dir_find>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a356:	2b00      	cmp	r3, #0
 800a358:	d106      	bne.n	800a368 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	3301      	adds	r3, #1
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	2b63      	cmp	r3, #99	; 0x63
 800a364:	d9e5      	bls.n	800a332 <dir_register+0x66>
 800a366:	e000      	b.n	800a36a <dir_register+0x9e>
			if (res != FR_OK) break;
 800a368:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2b64      	cmp	r3, #100	; 0x64
 800a36e:	d101      	bne.n	800a374 <dir_register+0xa8>
 800a370:	2307      	movs	r3, #7
 800a372:	e09c      	b.n	800a4ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d002      	beq.n	800a382 <dir_register+0xb6>
 800a37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a380:	e095      	b.n	800a4ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a382:	7dfa      	ldrb	r2, [r7, #23]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <dir_register+0xd8>
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	330c      	adds	r3, #12
 800a398:	4a47      	ldr	r2, [pc, #284]	; (800a4b8 <dir_register+0x1ec>)
 800a39a:	fba2 2303 	umull	r2, r3, r2, r3
 800a39e:	089b      	lsrs	r3, r3, #2
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <dir_register+0xda>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a3a8:	6a39      	ldr	r1, [r7, #32]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fbb5 	bl	8009b1a <dir_alloc>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d148      	bne.n	800a450 <dir_register+0x184>
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	623b      	str	r3, [r7, #32]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d042      	beq.n	800a450 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695a      	ldr	r2, [r3, #20]
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	015b      	lsls	r3, r3, #5
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fa40 	bl	800985c <dir_sdi>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d132      	bne.n	800a450 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fde4 	bl	8009fbc <sum_sfn>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	69f8      	ldr	r0, [r7, #28]
 800a400:	f7fe fe4a 	bl	8009098 <move_window>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a40a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11d      	bne.n	800a44e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	6918      	ldr	r0, [r3, #16]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a19      	ldr	r1, [r3, #32]
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	7efb      	ldrb	r3, [r7, #27]
 800a420:	f7ff fcd6 	bl	8009dd0 <put_lfn>
				fs->wflag = 1;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2201      	movs	r2, #1
 800a428:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a42a:	2100      	movs	r1, #0
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff fa9e 	bl	800996e <dir_next>
 800a432:	4603      	mov	r3, r0
 800a434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <dir_register+0x184>
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	3b01      	subs	r3, #1
 800a444:	623b      	str	r3, [r7, #32]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1d5      	bne.n	800a3f8 <dir_register+0x12c>
 800a44c:	e000      	b.n	800a450 <dir_register+0x184>
				if (res != FR_OK) break;
 800a44e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a454:	2b00      	cmp	r3, #0
 800a456:	d128      	bne.n	800a4aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	4619      	mov	r1, r3
 800a45e:	69f8      	ldr	r0, [r7, #28]
 800a460:	f7fe fe1a 	bl	8009098 <move_window>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d11b      	bne.n	800a4aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	2220      	movs	r2, #32
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fbff 	bl	8008c7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a18      	ldr	r0, [r3, #32]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	220b      	movs	r2, #11
 800a48a:	4619      	mov	r1, r3
 800a48c:	f7fe fbd6 	bl	8008c3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	330c      	adds	r3, #12
 800a49c:	f002 0218 	and.w	r2, r2, #24
 800a4a0:	b2d2      	uxtb	r2, r2
 800a4a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a4aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3730      	adds	r7, #48	; 0x30
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800a4bc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d007      	beq.n	800a4ea <dir_remove+0x2e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff f9bb 	bl	800985c <dir_sdi>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	e000      	b.n	800a4ec <dir_remove+0x30>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d128      	bne.n	800a546 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6938      	ldr	r0, [r7, #16]
 800a4fc:	f7fe fdcc 	bl	8009098 <move_window>
 800a500:	4603      	mov	r3, r0
 800a502:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d115      	bne.n	800a536 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	22e5      	movs	r2, #229	; 0xe5
 800a510:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2201      	movs	r2, #1
 800a516:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d90b      	bls.n	800a53a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800a522:	2100      	movs	r1, #0
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fa22 	bl	800996e <dir_next>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0df      	beq.n	800a4f4 <dir_remove+0x38>
 800a534:	e002      	b.n	800a53c <dir_remove+0x80>
			if (res != FR_OK) break;
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a53a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d101      	bne.n	800a546 <dir_remove+0x8a>
 800a542:	2302      	movs	r3, #2
 800a544:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3718      	adds	r7, #24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2200      	movs	r2, #0
 800a564:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 80c9 	beq.w	800a702 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a578:	d032      	beq.n	800a5e0 <get_fileinfo+0x90>
			i = j = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a582:	e01b      	b.n	800a5bc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a584:	89fb      	ldrh	r3, [r7, #14]
 800a586:	2100      	movs	r1, #0
 800a588:	4618      	mov	r0, r3
 800a58a:	f002 fa4b 	bl	800ca24 <ff_convert>
 800a58e:	4603      	mov	r3, r0
 800a590:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a592:	89fb      	ldrh	r3, [r7, #14]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <get_fileinfo+0x4e>
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
 800a59c:	e01a      	b.n	800a5d4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2b31      	cmp	r3, #49	; 0x31
 800a5a2:	d902      	bls.n	800a5aa <get_fileinfo+0x5a>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	61fb      	str	r3, [r7, #28]
 800a5a8:	e014      	b.n	800a5d4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	1c5a      	adds	r2, r3, #1
 800a5ae:	61fa      	str	r2, [r7, #28]
 800a5b0:	89fa      	ldrh	r2, [r7, #14]
 800a5b2:	b2d1      	uxtb	r1, r2
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	460a      	mov	r2, r1
 800a5ba:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	1c59      	adds	r1, r3, #1
 800a5c4:	61b9      	str	r1, [r7, #24]
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	81fb      	strh	r3, [r7, #14]
 800a5ce:	89fb      	ldrh	r3, [r7, #14]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1d7      	bne.n	800a584 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3316      	adds	r3, #22
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3316      	adds	r3, #22
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a5f4:	e04c      	b.n	800a690 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	1c59      	adds	r1, r3, #1
 800a5fe:	61f9      	str	r1, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d100      	bne.n	800a60e <get_fileinfo+0xbe>
 800a60c:	e040      	b.n	800a690 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2b05      	cmp	r3, #5
 800a612:	d101      	bne.n	800a618 <get_fileinfo+0xc8>
 800a614:	23e5      	movs	r3, #229	; 0xe5
 800a616:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d10f      	bne.n	800a63e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800a61e:	89bb      	ldrh	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <get_fileinfo+0xe0>
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	4413      	add	r3, r2
 800a62a:	3316      	adds	r3, #22
 800a62c:	222e      	movs	r2, #46	; 0x2e
 800a62e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	61ba      	str	r2, [r7, #24]
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4413      	add	r3, r2
 800a63a:	222e      	movs	r2, #46	; 0x2e
 800a63c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	4413      	add	r3, r2
 800a644:	3309      	adds	r3, #9
 800a646:	7dfa      	ldrb	r2, [r7, #23]
 800a648:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a64a:	89bb      	ldrh	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d11c      	bne.n	800a68a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	2b40      	cmp	r3, #64	; 0x40
 800a654:	d913      	bls.n	800a67e <get_fileinfo+0x12e>
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	2b5a      	cmp	r3, #90	; 0x5a
 800a65a:	d810      	bhi.n	800a67e <get_fileinfo+0x12e>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	330c      	adds	r3, #12
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d901      	bls.n	800a670 <get_fileinfo+0x120>
 800a66c:	2310      	movs	r3, #16
 800a66e:	e000      	b.n	800a672 <get_fileinfo+0x122>
 800a670:	2308      	movs	r3, #8
 800a672:	4013      	ands	r3, r2
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800a678:	7dfb      	ldrb	r3, [r7, #23]
 800a67a:	3320      	adds	r3, #32
 800a67c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	4413      	add	r3, r2
 800a684:	3316      	adds	r3, #22
 800a686:	7dfa      	ldrb	r2, [r7, #23]
 800a688:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	3301      	adds	r3, #1
 800a68e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b0a      	cmp	r3, #10
 800a694:	d9af      	bls.n	800a5f6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a696:	89bb      	ldrh	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10d      	bne.n	800a6b8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3316      	adds	r3, #22
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	330c      	adds	r3, #12
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <get_fileinfo+0x168>
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	4413      	add	r3, r2
 800a6be:	3309      	adds	r3, #9
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	7ada      	ldrb	r2, [r3, #11]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	331c      	adds	r3, #28
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fa47 	bl	8008b68 <ld_dword>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	3316      	adds	r3, #22
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fa3e 	bl	8008b68 <ld_dword>
 800a6ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	80da      	strh	r2, [r3, #6]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	809a      	strh	r2, [r3, #4]
 800a700:	e000      	b.n	800a704 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a702:	bf00      	nop
}
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	61ba      	str	r2, [r7, #24]
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4413      	add	r3, r2
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a73c:	2b1f      	cmp	r3, #31
 800a73e:	d940      	bls.n	800a7c2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a742:	2b2f      	cmp	r3, #47	; 0x2f
 800a744:	d006      	beq.n	800a754 <create_name+0x48>
 800a746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a748:	2b5c      	cmp	r3, #92	; 0x5c
 800a74a:	d110      	bne.n	800a76e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a74c:	e002      	b.n	800a754 <create_name+0x48>
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	3301      	adds	r3, #1
 800a752:	61bb      	str	r3, [r7, #24]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	4413      	add	r3, r2
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b2f      	cmp	r3, #47	; 0x2f
 800a75e:	d0f6      	beq.n	800a74e <create_name+0x42>
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	4413      	add	r3, r2
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b5c      	cmp	r3, #92	; 0x5c
 800a76a:	d0f0      	beq.n	800a74e <create_name+0x42>
			break;
 800a76c:	e02a      	b.n	800a7c4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b31      	cmp	r3, #49	; 0x31
 800a772:	d901      	bls.n	800a778 <create_name+0x6c>
 800a774:	2306      	movs	r3, #6
 800a776:	e17d      	b.n	800aa74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a780:	2101      	movs	r1, #1
 800a782:	4618      	mov	r0, r3
 800a784:	f002 f94e 	bl	800ca24 <ff_convert>
 800a788:	4603      	mov	r3, r0
 800a78a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a78c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <create_name+0x8a>
 800a792:	2306      	movs	r3, #6
 800a794:	e16e      	b.n	800aa74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a798:	2b7f      	cmp	r3, #127	; 0x7f
 800a79a:	d809      	bhi.n	800a7b0 <create_name+0xa4>
 800a79c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a79e:	4619      	mov	r1, r3
 800a7a0:	488d      	ldr	r0, [pc, #564]	; (800a9d8 <create_name+0x2cc>)
 800a7a2:	f7fe faae 	bl	8008d02 <chk_chr>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <create_name+0xa4>
 800a7ac:	2306      	movs	r3, #6
 800a7ae:	e161      	b.n	800aa74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	617a      	str	r2, [r7, #20]
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7be:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a7c0:	e7b4      	b.n	800a72c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a7c2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	441a      	add	r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a7ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d0:	2b1f      	cmp	r3, #31
 800a7d2:	d801      	bhi.n	800a7d8 <create_name+0xcc>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	e000      	b.n	800a7da <create_name+0xce>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a7de:	e011      	b.n	800a804 <create_name+0xf8>
		w = lfn[di - 1];
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7f4:	2b20      	cmp	r3, #32
 800a7f6:	d002      	beq.n	800a7fe <create_name+0xf2>
 800a7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800a7fc:	d106      	bne.n	800a80c <create_name+0x100>
		di--;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	3b01      	subs	r3, #1
 800a802:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1ea      	bne.n	800a7e0 <create_name+0xd4>
 800a80a:	e000      	b.n	800a80e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a80c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	005b      	lsls	r3, r3, #1
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	4413      	add	r3, r2
 800a816:	2200      	movs	r2, #0
 800a818:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <create_name+0x118>
 800a820:	2306      	movs	r3, #6
 800a822:	e127      	b.n	800aa74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	220b      	movs	r2, #11
 800a82a:	2120      	movs	r1, #32
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fa26 	bl	8008c7e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a832:	2300      	movs	r3, #0
 800a834:	61bb      	str	r3, [r7, #24]
 800a836:	e002      	b.n	800a83e <create_name+0x132>
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	3301      	adds	r3, #1
 800a83c:	61bb      	str	r3, [r7, #24]
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	2b20      	cmp	r3, #32
 800a84a:	d0f5      	beq.n	800a838 <create_name+0x12c>
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4413      	add	r3, r2
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	2b2e      	cmp	r3, #46	; 0x2e
 800a858:	d0ee      	beq.n	800a838 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d009      	beq.n	800a874 <create_name+0x168>
 800a860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a864:	f043 0303 	orr.w	r3, r3, #3
 800a868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a86c:	e002      	b.n	800a874 <create_name+0x168>
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	3b01      	subs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <create_name+0x182>
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a880:	3b01      	subs	r3, #1
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4413      	add	r3, r2
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	2b2e      	cmp	r3, #46	; 0x2e
 800a88c:	d1ef      	bne.n	800a86e <create_name+0x162>

	i = b = 0; ni = 8;
 800a88e:	2300      	movs	r3, #0
 800a890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a894:	2300      	movs	r3, #0
 800a896:	623b      	str	r3, [r7, #32]
 800a898:	2308      	movs	r3, #8
 800a89a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	61ba      	str	r2, [r7, #24]
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a8ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 8090 	beq.w	800a9d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a8b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d006      	beq.n	800a8c8 <create_name+0x1bc>
 800a8ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a8be:	d10a      	bne.n	800a8d6 <create_name+0x1ca>
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d006      	beq.n	800a8d6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8cc:	f043 0303 	orr.w	r3, r3, #3
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8d4:	e07d      	b.n	800a9d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a8d6:	6a3a      	ldr	r2, [r7, #32]
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d203      	bcs.n	800a8e6 <create_name+0x1da>
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d123      	bne.n	800a92e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2b0b      	cmp	r3, #11
 800a8ea:	d106      	bne.n	800a8fa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8f0:	f043 0303 	orr.w	r3, r3, #3
 800a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8f8:	e075      	b.n	800a9e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d005      	beq.n	800a90e <create_name+0x202>
 800a902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a906:	f043 0303 	orr.w	r3, r3, #3
 800a90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a90e:	69ba      	ldr	r2, [r7, #24]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	429a      	cmp	r2, r3
 800a914:	d866      	bhi.n	800a9e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	61bb      	str	r3, [r7, #24]
 800a91a:	2308      	movs	r3, #8
 800a91c:	623b      	str	r3, [r7, #32]
 800a91e:	230b      	movs	r3, #11
 800a920:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a92c:	e051      	b.n	800a9d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a930:	2b7f      	cmp	r3, #127	; 0x7f
 800a932:	d914      	bls.n	800a95e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f002 f873 	bl	800ca24 <ff_convert>
 800a93e:	4603      	mov	r3, r0
 800a940:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a944:	2b00      	cmp	r3, #0
 800a946:	d004      	beq.n	800a952 <create_name+0x246>
 800a948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a94a:	3b80      	subs	r3, #128	; 0x80
 800a94c:	4a23      	ldr	r2, [pc, #140]	; (800a9dc <create_name+0x2d0>)
 800a94e:	5cd3      	ldrb	r3, [r2, r3]
 800a950:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a956:	f043 0302 	orr.w	r3, r3, #2
 800a95a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a960:	2b00      	cmp	r3, #0
 800a962:	d007      	beq.n	800a974 <create_name+0x268>
 800a964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a966:	4619      	mov	r1, r3
 800a968:	481d      	ldr	r0, [pc, #116]	; (800a9e0 <create_name+0x2d4>)
 800a96a:	f7fe f9ca 	bl	8008d02 <chk_chr>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d008      	beq.n	800a986 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a974:	235f      	movs	r3, #95	; 0x5f
 800a976:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a97c:	f043 0303 	orr.w	r3, r3, #3
 800a980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a984:	e01b      	b.n	800a9be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a988:	2b40      	cmp	r3, #64	; 0x40
 800a98a:	d909      	bls.n	800a9a0 <create_name+0x294>
 800a98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a98e:	2b5a      	cmp	r3, #90	; 0x5a
 800a990:	d806      	bhi.n	800a9a0 <create_name+0x294>
					b |= 2;
 800a992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a996:	f043 0302 	orr.w	r3, r3, #2
 800a99a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a99e:	e00e      	b.n	800a9be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a9a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9a2:	2b60      	cmp	r3, #96	; 0x60
 800a9a4:	d90b      	bls.n	800a9be <create_name+0x2b2>
 800a9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9a8:	2b7a      	cmp	r3, #122	; 0x7a
 800a9aa:	d808      	bhi.n	800a9be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a9ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9b0:	f043 0301 	orr.w	r3, r3, #1
 800a9b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ba:	3b20      	subs	r3, #32
 800a9bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	623a      	str	r2, [r7, #32]
 800a9c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9c6:	b2d1      	uxtb	r1, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	460a      	mov	r2, r1
 800a9ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a9d2:	e763      	b.n	800a89c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a9d4:	bf00      	nop
 800a9d6:	e006      	b.n	800a9e6 <create_name+0x2da>
 800a9d8:	08011364 	.word	0x08011364
 800a9dc:	08011460 	.word	0x08011460
 800a9e0:	08011370 	.word	0x08011370
			if (si > di) break;			/* No extension */
 800a9e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9ec:	2be5      	cmp	r3, #229	; 0xe5
 800a9ee:	d103      	bne.n	800a9f8 <create_name+0x2ec>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2205      	movs	r2, #5
 800a9f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d104      	bne.n	800aa08 <create_name+0x2fc>
 800a9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aa08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa0c:	f003 030c 	and.w	r3, r3, #12
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d005      	beq.n	800aa20 <create_name+0x314>
 800aa14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa18:	f003 0303 	and.w	r3, r3, #3
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d105      	bne.n	800aa2c <create_name+0x320>
 800aa20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa24:	f043 0302 	orr.w	r3, r3, #2
 800aa28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aa2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d117      	bne.n	800aa68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aa38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d105      	bne.n	800aa50 <create_name+0x344>
 800aa44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa48:	f043 0310 	orr.w	r3, r3, #16
 800aa4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aa50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa54:	f003 030c 	and.w	r3, r3, #12
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d105      	bne.n	800aa68 <create_name+0x35c>
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa60:	f043 0308 	orr.w	r3, r3, #8
 800aa64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800aa72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3728      	adds	r7, #40	; 0x28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aa90:	e002      	b.n	800aa98 <follow_path+0x1c>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b2f      	cmp	r3, #47	; 0x2f
 800aa9e:	d0f8      	beq.n	800aa92 <follow_path+0x16>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b5c      	cmp	r3, #92	; 0x5c
 800aaa6:	d0f4      	beq.n	800aa92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b1f      	cmp	r3, #31
 800aab4:	d80a      	bhi.n	800aacc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2280      	movs	r2, #128	; 0x80
 800aaba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aabe:	2100      	movs	r1, #0
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7fe fecb 	bl	800985c <dir_sdi>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75fb      	strb	r3, [r7, #23]
 800aaca:	e048      	b.n	800ab5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aacc:	463b      	mov	r3, r7
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff fe1b 	bl	800a70c <create_name>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d139      	bne.n	800ab54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff fb33 	bl	800a14c <dir_find>
 800aae6:	4603      	mov	r3, r0
 800aae8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aaf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00a      	beq.n	800ab0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d12c      	bne.n	800ab58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aafe:	7afb      	ldrb	r3, [r7, #11]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d127      	bne.n	800ab58 <follow_path+0xdc>
 800ab08:	2305      	movs	r3, #5
 800ab0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab0c:	e024      	b.n	800ab58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d121      	bne.n	800ab5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	799b      	ldrb	r3, [r3, #6]
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ab24:	2305      	movs	r3, #5
 800ab26:	75fb      	strb	r3, [r7, #23]
 800ab28:	e019      	b.n	800ab5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	8992      	ldrh	r2, [r2, #12]
 800ab38:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab3c:	fb00 f202 	mul.w	r2, r0, r2
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	440b      	add	r3, r1
 800ab44:	4619      	mov	r1, r3
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f7ff f82e 	bl	8009ba8 <ld_clust>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab52:	e7bb      	b.n	800aacc <follow_path+0x50>
			if (res != FR_OK) break;
 800ab54:	bf00      	nop
 800ab56:	e002      	b.n	800ab5e <follow_path+0xe2>
				break;
 800ab58:	bf00      	nop
 800ab5a:	e000      	b.n	800ab5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab5c:	bf00      	nop
			}
		}
	}

	return res;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ab70:	f04f 33ff 	mov.w	r3, #4294967295
 800ab74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d031      	beq.n	800abe2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	e002      	b.n	800ab8c <get_ldnumber+0x24>
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b1f      	cmp	r3, #31
 800ab92:	d903      	bls.n	800ab9c <get_ldnumber+0x34>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b3a      	cmp	r3, #58	; 0x3a
 800ab9a:	d1f4      	bne.n	800ab86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b3a      	cmp	r3, #58	; 0x3a
 800aba2:	d11c      	bne.n	800abde <get_ldnumber+0x76>
			tp = *path;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	60fa      	str	r2, [r7, #12]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	3b30      	subs	r3, #48	; 0x30
 800abb4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b09      	cmp	r3, #9
 800abba:	d80e      	bhi.n	800abda <get_ldnumber+0x72>
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d10a      	bne.n	800abda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d107      	bne.n	800abda <get_ldnumber+0x72>
					vol = (int)i;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	3301      	adds	r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	e002      	b.n	800abe4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800abde:	2300      	movs	r3, #0
 800abe0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800abe2:	693b      	ldr	r3, [r7, #16]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	70da      	strb	r2, [r3, #3]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f04f 32ff 	mov.w	r2, #4294967295
 800ac06:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7fe fa44 	bl	8009098 <move_window>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <check_fs+0x2a>
 800ac16:	2304      	movs	r3, #4
 800ac18:	e038      	b.n	800ac8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3338      	adds	r3, #56	; 0x38
 800ac1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fd ff88 	bl	8008b38 <ld_word>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d001      	beq.n	800ac38 <check_fs+0x48>
 800ac34:	2303      	movs	r3, #3
 800ac36:	e029      	b.n	800ac8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac3e:	2be9      	cmp	r3, #233	; 0xe9
 800ac40:	d009      	beq.n	800ac56 <check_fs+0x66>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac48:	2beb      	cmp	r3, #235	; 0xeb
 800ac4a:	d11e      	bne.n	800ac8a <check_fs+0x9a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ac52:	2b90      	cmp	r3, #144	; 0x90
 800ac54:	d119      	bne.n	800ac8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3338      	adds	r3, #56	; 0x38
 800ac5a:	3336      	adds	r3, #54	; 0x36
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fd ff83 	bl	8008b68 <ld_dword>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ac68:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <check_fs+0xa4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d101      	bne.n	800ac72 <check_fs+0x82>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e00c      	b.n	800ac8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3338      	adds	r3, #56	; 0x38
 800ac76:	3352      	adds	r3, #82	; 0x52
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fd ff75 	bl	8008b68 <ld_dword>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4a05      	ldr	r2, [pc, #20]	; (800ac98 <check_fs+0xa8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d101      	bne.n	800ac8a <check_fs+0x9a>
 800ac86:	2300      	movs	r3, #0
 800ac88:	e000      	b.n	800ac8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ac8a:	2302      	movs	r3, #2
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	00544146 	.word	0x00544146
 800ac98:	33544146 	.word	0x33544146

0800ac9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b096      	sub	sp, #88	; 0x58
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff ff59 	bl	800ab68 <get_ldnumber>
 800acb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	da01      	bge.n	800acc2 <find_volume+0x26>
 800acbe:	230b      	movs	r3, #11
 800acc0:	e265      	b.n	800b18e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800acc2:	4a9f      	ldr	r2, [pc, #636]	; (800af40 <find_volume+0x2a4>)
 800acc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <find_volume+0x3a>
 800acd2:	230c      	movs	r3, #12
 800acd4:	e25b      	b.n	800b18e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	f023 0301 	bic.w	r3, r3, #1
 800ace2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ace4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01a      	beq.n	800ad22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	785b      	ldrb	r3, [r3, #1]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fd fe83 	bl	80089fc <disk_status>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800acfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d007      	beq.n	800ad1e <find_volume+0x82>
 800ad0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad1a:	230a      	movs	r3, #10
 800ad1c:	e237      	b.n	800b18e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e235      	b.n	800b18e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	785b      	ldrb	r3, [r3, #1]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fd fe7b 	bl	8008a30 <disk_initialize>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e21e      	b.n	800b18e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d007      	beq.n	800ad66 <find_volume+0xca>
 800ad56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ad62:	230a      	movs	r3, #10
 800ad64:	e213      	b.n	800b18e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	7858      	ldrb	r0, [r3, #1]
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	461a      	mov	r2, r3
 800ad70:	2102      	movs	r1, #2
 800ad72:	f7fd fec3 	bl	8008afc <disk_ioctl>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <find_volume+0xe4>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e206      	b.n	800b18e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	899b      	ldrh	r3, [r3, #12]
 800ad84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad88:	d80d      	bhi.n	800ada6 <find_volume+0x10a>
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8c:	899b      	ldrh	r3, [r3, #12]
 800ad8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad92:	d308      	bcc.n	800ada6 <find_volume+0x10a>
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	899b      	ldrh	r3, [r3, #12]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	4013      	ands	r3, r2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <find_volume+0x10e>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e1f1      	b.n	800b18e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800adae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adb2:	f7ff ff1d 	bl	800abf0 <check_fs>
 800adb6:	4603      	mov	r3, r0
 800adb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800adbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d149      	bne.n	800ae58 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adc4:	2300      	movs	r3, #0
 800adc6:	643b      	str	r3, [r7, #64]	; 0x40
 800adc8:	e01e      	b.n	800ae08 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800add0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800add8:	4413      	add	r3, r2
 800adda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	3304      	adds	r3, #4
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <find_volume+0x158>
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	3308      	adds	r3, #8
 800adea:	4618      	mov	r0, r3
 800adec:	f7fd febc 	bl	8008b68 <ld_dword>
 800adf0:	4602      	mov	r2, r0
 800adf2:	e000      	b.n	800adf6 <find_volume+0x15a>
 800adf4:	2200      	movs	r2, #0
 800adf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	3358      	adds	r3, #88	; 0x58
 800adfc:	443b      	add	r3, r7
 800adfe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae04:	3301      	adds	r3, #1
 800ae06:	643b      	str	r3, [r7, #64]	; 0x40
 800ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d9dd      	bls.n	800adca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae0e:	2300      	movs	r3, #0
 800ae10:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <find_volume+0x182>
 800ae18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	3358      	adds	r3, #88	; 0x58
 800ae24:	443b      	add	r3, r7
 800ae26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <find_volume+0x1a2>
 800ae32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae36:	f7ff fedb 	bl	800abf0 <check_fs>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	e000      	b.n	800ae40 <find_volume+0x1a4>
 800ae3e:	2303      	movs	r3, #3
 800ae40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d905      	bls.n	800ae58 <find_volume+0x1bc>
 800ae4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4e:	3301      	adds	r3, #1
 800ae50:	643b      	str	r3, [r7, #64]	; 0x40
 800ae52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d9e2      	bls.n	800ae1e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d101      	bne.n	800ae64 <find_volume+0x1c8>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e194      	b.n	800b18e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d901      	bls.n	800ae70 <find_volume+0x1d4>
 800ae6c:	230d      	movs	r3, #13
 800ae6e:	e18e      	b.n	800b18e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	3338      	adds	r3, #56	; 0x38
 800ae74:	330b      	adds	r3, #11
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fd fe5e 	bl	8008b38 <ld_word>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	899b      	ldrh	r3, [r3, #12]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d001      	beq.n	800ae8c <find_volume+0x1f0>
 800ae88:	230d      	movs	r3, #13
 800ae8a:	e180      	b.n	800b18e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	3338      	adds	r3, #56	; 0x38
 800ae90:	3316      	adds	r3, #22
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fd fe50 	bl	8008b38 <ld_word>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d106      	bne.n	800aeb0 <find_volume+0x214>
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	3338      	adds	r3, #56	; 0x38
 800aea6:	3324      	adds	r3, #36	; 0x24
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fd fe5d 	bl	8008b68 <ld_dword>
 800aeae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aeb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeb4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	789b      	ldrb	r3, [r3, #2]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d005      	beq.n	800aed4 <find_volume+0x238>
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	789b      	ldrb	r3, [r3, #2]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d001      	beq.n	800aed4 <find_volume+0x238>
 800aed0:	230d      	movs	r3, #13
 800aed2:	e15c      	b.n	800b18e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	789b      	ldrb	r3, [r3, #2]
 800aed8:	461a      	mov	r2, r3
 800aeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	895b      	ldrh	r3, [r3, #10]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d008      	beq.n	800af08 <find_volume+0x26c>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	895b      	ldrh	r3, [r3, #10]
 800aefa:	461a      	mov	r2, r3
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	895b      	ldrh	r3, [r3, #10]
 800af00:	3b01      	subs	r3, #1
 800af02:	4013      	ands	r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <find_volume+0x270>
 800af08:	230d      	movs	r3, #13
 800af0a:	e140      	b.n	800b18e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	3338      	adds	r3, #56	; 0x38
 800af10:	3311      	adds	r3, #17
 800af12:	4618      	mov	r0, r3
 800af14:	f7fd fe10 	bl	8008b38 <ld_word>
 800af18:	4603      	mov	r3, r0
 800af1a:	461a      	mov	r2, r3
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	891b      	ldrh	r3, [r3, #8]
 800af24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af26:	8992      	ldrh	r2, [r2, #12]
 800af28:	0952      	lsrs	r2, r2, #5
 800af2a:	b292      	uxth	r2, r2
 800af2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800af30:	fb01 f202 	mul.w	r2, r1, r2
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <find_volume+0x2a8>
 800af3c:	230d      	movs	r3, #13
 800af3e:	e126      	b.n	800b18e <find_volume+0x4f2>
 800af40:	200022c8 	.word	0x200022c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	3338      	adds	r3, #56	; 0x38
 800af48:	3313      	adds	r3, #19
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fd fdf4 	bl	8008b38 <ld_word>
 800af50:	4603      	mov	r3, r0
 800af52:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <find_volume+0x2cc>
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	3338      	adds	r3, #56	; 0x38
 800af5e:	3320      	adds	r3, #32
 800af60:	4618      	mov	r0, r3
 800af62:	f7fd fe01 	bl	8008b68 <ld_dword>
 800af66:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	3338      	adds	r3, #56	; 0x38
 800af6c:	330e      	adds	r3, #14
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fd fde2 	bl	8008b38 <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <find_volume+0x2e6>
 800af7e:	230d      	movs	r3, #13
 800af80:	e105      	b.n	800b18e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af86:	4413      	add	r3, r2
 800af88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af8a:	8911      	ldrh	r1, [r2, #8]
 800af8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af8e:	8992      	ldrh	r2, [r2, #12]
 800af90:	0952      	lsrs	r2, r2, #5
 800af92:	b292      	uxth	r2, r2
 800af94:	fbb1 f2f2 	udiv	r2, r1, r2
 800af98:	b292      	uxth	r2, r2
 800af9a:	4413      	add	r3, r2
 800af9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d201      	bcs.n	800afaa <find_volume+0x30e>
 800afa6:	230d      	movs	r3, #13
 800afa8:	e0f1      	b.n	800b18e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800afaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb2:	8952      	ldrh	r2, [r2, #10]
 800afb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <find_volume+0x328>
 800afc0:	230d      	movs	r3, #13
 800afc2:	e0e4      	b.n	800b18e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800afc4:	2303      	movs	r3, #3
 800afc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d802      	bhi.n	800afda <find_volume+0x33e>
 800afd4:	2302      	movs	r3, #2
 800afd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d802      	bhi.n	800afea <find_volume+0x34e>
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	1c9a      	adds	r2, r3, #2
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aff6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aff8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800affa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800affc:	441a      	add	r2, r3
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	441a      	add	r2, r3
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b00c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b010:	2b03      	cmp	r3, #3
 800b012:	d11e      	bne.n	800b052 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	3338      	adds	r3, #56	; 0x38
 800b018:	332a      	adds	r3, #42	; 0x2a
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd fd8c 	bl	8008b38 <ld_word>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <find_volume+0x38e>
 800b026:	230d      	movs	r3, #13
 800b028:	e0b1      	b.n	800b18e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	891b      	ldrh	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <find_volume+0x39a>
 800b032:	230d      	movs	r3, #13
 800b034:	e0ab      	b.n	800b18e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	3338      	adds	r3, #56	; 0x38
 800b03a:	332c      	adds	r3, #44	; 0x2c
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fd fd93 	bl	8008b68 <ld_dword>
 800b042:	4602      	mov	r2, r0
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	647b      	str	r3, [r7, #68]	; 0x44
 800b050:	e01f      	b.n	800b092 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	891b      	ldrh	r3, [r3, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <find_volume+0x3c2>
 800b05a:	230d      	movs	r3, #13
 800b05c:	e097      	b.n	800b18e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b064:	441a      	add	r2, r3
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b06a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d103      	bne.n	800b07a <find_volume+0x3de>
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	005b      	lsls	r3, r3, #1
 800b078:	e00a      	b.n	800b090 <find_volume+0x3f4>
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	69da      	ldr	r2, [r3, #28]
 800b07e:	4613      	mov	r3, r2
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	4413      	add	r3, r2
 800b084:	085a      	lsrs	r2, r3, #1
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b090:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	6a1a      	ldr	r2, [r3, #32]
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	899b      	ldrh	r3, [r3, #12]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b09e:	440b      	add	r3, r1
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0a4:	8989      	ldrh	r1, [r1, #12]
 800b0a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d201      	bcs.n	800b0b2 <find_volume+0x416>
 800b0ae:	230d      	movs	r3, #13
 800b0b0:	e06d      	b.n	800b18e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b8:	619a      	str	r2, [r3, #24]
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	2280      	movs	r2, #128	; 0x80
 800b0c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d149      	bne.n	800b164 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	3338      	adds	r3, #56	; 0x38
 800b0d4:	3330      	adds	r3, #48	; 0x30
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fd fd2e 	bl	8008b38 <ld_word>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d140      	bne.n	800b164 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ea:	f7fd ffd5 	bl	8009098 <move_window>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d137      	bne.n	800b164 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	3338      	adds	r3, #56	; 0x38
 800b0fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b102:	4618      	mov	r0, r3
 800b104:	f7fd fd18 	bl	8008b38 <ld_word>
 800b108:	4603      	mov	r3, r0
 800b10a:	461a      	mov	r2, r3
 800b10c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b110:	429a      	cmp	r2, r3
 800b112:	d127      	bne.n	800b164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	3338      	adds	r3, #56	; 0x38
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fd fd25 	bl	8008b68 <ld_dword>
 800b11e:	4603      	mov	r3, r0
 800b120:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <find_volume+0x4fc>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d11e      	bne.n	800b164 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	3338      	adds	r3, #56	; 0x38
 800b12a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fd fd1a 	bl	8008b68 <ld_dword>
 800b134:	4603      	mov	r3, r0
 800b136:	4a19      	ldr	r2, [pc, #100]	; (800b19c <find_volume+0x500>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d113      	bne.n	800b164 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	3338      	adds	r3, #56	; 0x38
 800b140:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b144:	4618      	mov	r0, r3
 800b146:	f7fd fd0f 	bl	8008b68 <ld_dword>
 800b14a:	4602      	mov	r2, r0
 800b14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	3338      	adds	r3, #56	; 0x38
 800b154:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fd fd05 	bl	8008b68 <ld_dword>
 800b15e:	4602      	mov	r2, r0
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b16a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b16c:	4b0c      	ldr	r3, [pc, #48]	; (800b1a0 <find_volume+0x504>)
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	4b0a      	ldr	r3, [pc, #40]	; (800b1a0 <find_volume+0x504>)
 800b176:	801a      	strh	r2, [r3, #0]
 800b178:	4b09      	ldr	r3, [pc, #36]	; (800b1a0 <find_volume+0x504>)
 800b17a:	881a      	ldrh	r2, [r3, #0]
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	4a08      	ldr	r2, [pc, #32]	; (800b1a4 <find_volume+0x508>)
 800b184:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b188:	f7fd ff1e 	bl	8008fc8 <clear_lock>
#endif
	return FR_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3758      	adds	r7, #88	; 0x58
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	41615252 	.word	0x41615252
 800b19c:	61417272 	.word	0x61417272
 800b1a0:	200022cc 	.word	0x200022cc
 800b1a4:	200022f0 	.word	0x200022f0

0800b1a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b1b2:	2309      	movs	r3, #9
 800b1b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d01c      	beq.n	800b1f6 <validate+0x4e>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d018      	beq.n	800b1f6 <validate+0x4e>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d013      	beq.n	800b1f6 <validate+0x4e>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	889a      	ldrh	r2, [r3, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	88db      	ldrh	r3, [r3, #6]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d10c      	bne.n	800b1f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd fc0a 	bl	80089fc <disk_status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <validate+0x4e>
			res = FR_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <validate+0x5a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	e000      	b.n	800b204 <validate+0x5c>
 800b202:	2300      	movs	r3, #0
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	6013      	str	r3, [r2, #0]
	return res;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b226:	f107 0310 	add.w	r3, r7, #16
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff fc9c 	bl	800ab68 <get_ldnumber>
 800b230:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	2b00      	cmp	r3, #0
 800b236:	da01      	bge.n	800b23c <f_mount+0x28>
 800b238:	230b      	movs	r3, #11
 800b23a:	e02b      	b.n	800b294 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b23c:	4a17      	ldr	r2, [pc, #92]	; (800b29c <f_mount+0x88>)
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b244:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b24c:	69b8      	ldr	r0, [r7, #24]
 800b24e:	f7fd febb 	bl	8008fc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2200      	movs	r2, #0
 800b256:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	490d      	ldr	r1, [pc, #52]	; (800b29c <f_mount+0x88>)
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <f_mount+0x66>
 800b274:	79fb      	ldrb	r3, [r7, #7]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d001      	beq.n	800b27e <f_mount+0x6a>
 800b27a:	2300      	movs	r3, #0
 800b27c:	e00a      	b.n	800b294 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b27e:	f107 010c 	add.w	r1, r7, #12
 800b282:	f107 0308 	add.w	r3, r7, #8
 800b286:	2200      	movs	r2, #0
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fd07 	bl	800ac9c <find_volume>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b292:	7dfb      	ldrb	r3, [r7, #23]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3720      	adds	r7, #32
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	200022c8 	.word	0x200022c8

0800b2a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b09a      	sub	sp, #104	; 0x68
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <f_open+0x18>
 800b2b4:	2309      	movs	r3, #9
 800b2b6:	e1bb      	b.n	800b630 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b2b8:	79fb      	ldrb	r3, [r7, #7]
 800b2ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b2c0:	79fa      	ldrb	r2, [r7, #7]
 800b2c2:	f107 0114 	add.w	r1, r7, #20
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff fce6 	bl	800ac9c <find_volume>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b2d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f040 819f 	bne.w	800b61e <f_open+0x37e>
		dj.obj.fs = fs;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	f107 0318 	add.w	r3, r7, #24
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fbc5 	bl	800aa7c <follow_path>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b2f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d11a      	bne.n	800b336 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b304:	b25b      	sxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	da03      	bge.n	800b312 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b30a:	2306      	movs	r3, #6
 800b30c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b310:	e011      	b.n	800b336 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	f023 0301 	bic.w	r3, r3, #1
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bf14      	ite	ne
 800b31c:	2301      	movne	r3, #1
 800b31e:	2300      	moveq	r3, #0
 800b320:	b2db      	uxtb	r3, r3
 800b322:	461a      	mov	r2, r3
 800b324:	f107 0318 	add.w	r3, r7, #24
 800b328:	4611      	mov	r1, r2
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fd fd04 	bl	8008d38 <chk_lock>
 800b330:	4603      	mov	r3, r0
 800b332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	f003 031c 	and.w	r3, r3, #28
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d07f      	beq.n	800b440 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b340:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b344:	2b00      	cmp	r3, #0
 800b346:	d017      	beq.n	800b378 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	d10e      	bne.n	800b36e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b350:	f7fd fd4e 	bl	8008df0 <enq_lock>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <f_open+0xc8>
 800b35a:	f107 0318 	add.w	r3, r7, #24
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe ffb4 	bl	800a2cc <dir_register>
 800b364:	4603      	mov	r3, r0
 800b366:	e000      	b.n	800b36a <f_open+0xca>
 800b368:	2312      	movs	r3, #18
 800b36a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	f043 0308 	orr.w	r3, r3, #8
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	e010      	b.n	800b39a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b378:	7fbb      	ldrb	r3, [r7, #30]
 800b37a:	f003 0311 	and.w	r3, r3, #17
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <f_open+0xea>
					res = FR_DENIED;
 800b382:	2307      	movs	r3, #7
 800b384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b388:	e007      	b.n	800b39a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <f_open+0xfa>
 800b394:	2308      	movs	r3, #8
 800b396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b39a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d168      	bne.n	800b474 <f_open+0x1d4>
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	f003 0308 	and.w	r3, r3, #8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d063      	beq.n	800b474 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b3ac:	f7fb fafc 	bl	80069a8 <get_fattime>
 800b3b0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	330e      	adds	r3, #14
 800b3b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fd fc13 	bl	8008be4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	3316      	adds	r3, #22
 800b3c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fd fc0d 	bl	8008be4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	330b      	adds	r3, #11
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fbe5 	bl	8009ba8 <ld_clust>
 800b3de:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fbfd 	bl	8009be6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	331c      	adds	r3, #28
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fd fbf6 	bl	8008be4 <st_dword>
					fs->wflag = 1;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b3fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b400:	2b00      	cmp	r3, #0
 800b402:	d037      	beq.n	800b474 <f_open+0x1d4>
						dw = fs->winsect;
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b408:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b40a:	f107 0318 	add.w	r3, r7, #24
 800b40e:	2200      	movs	r2, #0
 800b410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe f8ed 	bl	80095f2 <remove_chain>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b41e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b422:	2b00      	cmp	r3, #0
 800b424:	d126      	bne.n	800b474 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd fe34 	bl	8009098 <move_window>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b43a:	3a01      	subs	r2, #1
 800b43c:	615a      	str	r2, [r3, #20]
 800b43e:	e019      	b.n	800b474 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b440:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b444:	2b00      	cmp	r3, #0
 800b446:	d115      	bne.n	800b474 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b448:	7fbb      	ldrb	r3, [r7, #30]
 800b44a:	f003 0310 	and.w	r3, r3, #16
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b452:	2304      	movs	r3, #4
 800b454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b458:	e00c      	b.n	800b474 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <f_open+0x1d4>
 800b464:	7fbb      	ldrb	r3, [r7, #30]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <f_open+0x1d4>
						res = FR_DENIED;
 800b46e:	2307      	movs	r3, #7
 800b470:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d128      	bne.n	800b4ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	f003 0308 	and.w	r3, r3, #8
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	f023 0301 	bic.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bf14      	ite	ne
 800b4a6:	2301      	movne	r3, #1
 800b4a8:	2300      	moveq	r3, #0
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	f107 0318 	add.w	r3, r7, #24
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fd fcbd 	bl	8008e34 <inc_lock>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <f_open+0x22e>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b4ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f040 80a3 	bne.w	800b61e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4dc:	4611      	mov	r1, r2
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fb62 	bl	8009ba8 <ld_clust>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	331c      	adds	r3, #28
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fd fb3a 	bl	8008b68 <ld_dword>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	88da      	ldrh	r2, [r3, #6]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	79fa      	ldrb	r2, [r7, #7]
 800b512:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3330      	adds	r3, #48	; 0x30
 800b52a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b52e:	2100      	movs	r1, #0
 800b530:	4618      	mov	r0, r3
 800b532:	f7fd fba4 	bl	8008c7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d06e      	beq.n	800b61e <f_open+0x37e>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d06a      	beq.n	800b61e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	895b      	ldrh	r3, [r3, #10]
 800b554:	461a      	mov	r2, r3
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	899b      	ldrh	r3, [r3, #12]
 800b55a:	fb02 f303 	mul.w	r3, r2, r3
 800b55e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b56c:	e016      	b.n	800b59c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b572:	4618      	mov	r0, r3
 800b574:	f7fd fe4d 	bl	8009212 <get_fat>
 800b578:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b57a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d802      	bhi.n	800b586 <f_open+0x2e6>
 800b580:	2302      	movs	r3, #2
 800b582:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58c:	d102      	bne.n	800b594 <f_open+0x2f4>
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b59c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d103      	bne.n	800b5ac <f_open+0x30c>
 800b5a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d8e0      	bhi.n	800b56e <f_open+0x2ce>
				}
				fp->clust = clst;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b5b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d131      	bne.n	800b61e <f_open+0x37e>
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	899b      	ldrh	r3, [r3, #12]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c6:	fb01 f202 	mul.w	r2, r1, r2
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d026      	beq.n	800b61e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fd fdfd 	bl	80091d4 <clust2sect>
 800b5da:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <f_open+0x34a>
						res = FR_INT_ERR;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b5e8:	e019      	b.n	800b61e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	899b      	ldrh	r3, [r3, #12]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f8:	441a      	add	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	7858      	ldrb	r0, [r3, #1]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6a1a      	ldr	r2, [r3, #32]
 800b60c:	2301      	movs	r3, #1
 800b60e:	f7fd fa35 	bl	8008a7c <disk_read>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <f_open+0x37e>
 800b618:	2301      	movs	r3, #1
 800b61a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b61e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <f_open+0x38c>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b62c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b630:	4618      	mov	r0, r3
 800b632:	3768      	adds	r7, #104	; 0x68
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08e      	sub	sp, #56	; 0x38
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f107 0214 	add.w	r2, r7, #20
 800b656:	4611      	mov	r1, r2
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fda5 	bl	800b1a8 <validate>
 800b65e:	4603      	mov	r3, r0
 800b660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d107      	bne.n	800b67c <f_read+0x44>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	7d5b      	ldrb	r3, [r3, #21]
 800b670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <f_read+0x4a>
 800b67c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b680:	e135      	b.n	800b8ee <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	7d1b      	ldrb	r3, [r3, #20]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <f_read+0x5a>
 800b68e:	2307      	movs	r3, #7
 800b690:	e12d      	b.n	800b8ee <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68da      	ldr	r2, [r3, #12]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	f240 811e 	bls.w	800b8e4 <f_read+0x2ac>
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b6ac:	e11a      	b.n	800b8e4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	8992      	ldrh	r2, [r2, #12]
 800b6b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ba:	fb01 f202 	mul.w	r2, r1, r2
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f040 80d5 	bne.w	800b870 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	8992      	ldrh	r2, [r2, #12]
 800b6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	8952      	ldrh	r2, [r2, #10]
 800b6d6:	3a01      	subs	r2, #1
 800b6d8:	4013      	ands	r3, r2
 800b6da:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d12f      	bne.n	800b742 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d103      	bne.n	800b6f2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800b6f0:	e013      	b.n	800b71a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d007      	beq.n	800b70a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	4619      	mov	r1, r3
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7fe f873 	bl	80097ec <clmt_clust>
 800b706:	6338      	str	r0, [r7, #48]	; 0x30
 800b708:	e007      	b.n	800b71a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	69db      	ldr	r3, [r3, #28]
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fd fd7d 	bl	8009212 <get_fat>
 800b718:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d804      	bhi.n	800b72a <f_read+0xf2>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2202      	movs	r2, #2
 800b724:	755a      	strb	r2, [r3, #21]
 800b726:	2302      	movs	r3, #2
 800b728:	e0e1      	b.n	800b8ee <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b730:	d104      	bne.n	800b73c <f_read+0x104>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2201      	movs	r2, #1
 800b736:	755a      	strb	r2, [r3, #21]
 800b738:	2301      	movs	r3, #1
 800b73a:	e0d8      	b.n	800b8ee <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b740:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	4619      	mov	r1, r3
 800b74a:	4610      	mov	r0, r2
 800b74c:	f7fd fd42 	bl	80091d4 <clust2sect>
 800b750:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <f_read+0x12a>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2202      	movs	r2, #2
 800b75c:	755a      	strb	r2, [r3, #21]
 800b75e:	2302      	movs	r3, #2
 800b760:	e0c5      	b.n	800b8ee <f_read+0x2b6>
			sect += csect;
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	4413      	add	r3, r2
 800b768:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	899b      	ldrh	r3, [r3, #12]
 800b76e:	461a      	mov	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	fbb3 f3f2 	udiv	r3, r3, r2
 800b776:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d041      	beq.n	800b802 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b77e:	69fa      	ldr	r2, [r7, #28]
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	4413      	add	r3, r2
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	8952      	ldrh	r2, [r2, #10]
 800b788:	4293      	cmp	r3, r2
 800b78a:	d905      	bls.n	800b798 <f_read+0x160>
					cc = fs->csize - csect;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	895b      	ldrh	r3, [r3, #10]
 800b790:	461a      	mov	r2, r3
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	7858      	ldrb	r0, [r3, #1]
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7a2:	f7fd f96b 	bl	8008a7c <disk_read>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d004      	beq.n	800b7b6 <f_read+0x17e>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	755a      	strb	r2, [r3, #21]
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e09b      	b.n	800b8ee <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ba:	b25b      	sxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	da18      	bge.n	800b7f2 <f_read+0x1ba>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6a1a      	ldr	r2, [r3, #32]
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d911      	bls.n	800b7f2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a1a      	ldr	r2, [r3, #32]
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	8992      	ldrh	r2, [r2, #12]
 800b7da:	fb02 f303 	mul.w	r3, r2, r3
 800b7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e0:	18d0      	adds	r0, r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	899b      	ldrh	r3, [r3, #12]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	f7fd fa25 	bl	8008c3c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	899b      	ldrh	r3, [r3, #12]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	fb02 f303 	mul.w	r3, r2, r3
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b800:	e05c      	b.n	800b8bc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d02e      	beq.n	800b86a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	7d1b      	ldrb	r3, [r3, #20]
 800b810:	b25b      	sxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	da18      	bge.n	800b848 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	7858      	ldrb	r0, [r3, #1]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6a1a      	ldr	r2, [r3, #32]
 800b824:	2301      	movs	r3, #1
 800b826:	f7fd f949 	bl	8008abc <disk_write>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d004      	beq.n	800b83a <f_read+0x202>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2201      	movs	r2, #1
 800b834:	755a      	strb	r2, [r3, #21]
 800b836:	2301      	movs	r3, #1
 800b838:	e059      	b.n	800b8ee <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	7d1b      	ldrb	r3, [r3, #20]
 800b83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b842:	b2da      	uxtb	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	7858      	ldrb	r0, [r3, #1]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b852:	2301      	movs	r3, #1
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	f7fd f911 	bl	8008a7c <disk_read>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d004      	beq.n	800b86a <f_read+0x232>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2201      	movs	r2, #1
 800b864:	755a      	strb	r2, [r3, #21]
 800b866:	2301      	movs	r3, #1
 800b868:	e041      	b.n	800b8ee <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	69ba      	ldr	r2, [r7, #24]
 800b86e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	899b      	ldrh	r3, [r3, #12]
 800b874:	4618      	mov	r0, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	8992      	ldrh	r2, [r2, #12]
 800b87e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b882:	fb01 f202 	mul.w	r2, r1, r2
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	1ac3      	subs	r3, r0, r3
 800b88a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b88c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d901      	bls.n	800b898 <f_read+0x260>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	8992      	ldrh	r2, [r2, #12]
 800b8a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8aa:	fb00 f202 	mul.w	r2, r0, r2
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	440b      	add	r3, r1
 800b8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8b8:	f7fd f9c0 	bl	8008c3c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b8bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c0:	4413      	add	r3, r2
 800b8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	699a      	ldr	r2, [r3, #24]
 800b8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	619a      	str	r2, [r3, #24]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	441a      	add	r2, r3
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f47f aee1 	bne.w	800b6ae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3738      	adds	r7, #56	; 0x38
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b08c      	sub	sp, #48	; 0x30
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f107 0210 	add.w	r2, r7, #16
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff fc46 	bl	800b1a8 <validate>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b926:	2b00      	cmp	r3, #0
 800b928:	d107      	bne.n	800b93a <f_write+0x44>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	7d5b      	ldrb	r3, [r3, #21]
 800b92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <f_write+0x4a>
 800b93a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b93e:	e16a      	b.n	800bc16 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	7d1b      	ldrb	r3, [r3, #20]
 800b944:	f003 0302 	and.w	r3, r3, #2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <f_write+0x5a>
 800b94c:	2307      	movs	r3, #7
 800b94e:	e162      	b.n	800bc16 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	699a      	ldr	r2, [r3, #24]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	441a      	add	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	f080 814c 	bcs.w	800bbfa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	43db      	mvns	r3, r3
 800b968:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b96a:	e146      	b.n	800bbfa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	8992      	ldrh	r2, [r2, #12]
 800b974:	fbb3 f1f2 	udiv	r1, r3, r2
 800b978:	fb01 f202 	mul.w	r2, r1, r2
 800b97c:	1a9b      	subs	r3, r3, r2
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f040 80f1 	bne.w	800bb66 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	8992      	ldrh	r2, [r2, #12]
 800b98c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	8952      	ldrh	r2, [r2, #10]
 800b994:	3a01      	subs	r2, #1
 800b996:	4013      	ands	r3, r2
 800b998:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d143      	bne.n	800ba28 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d11a      	bne.n	800b9ea <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd fe7f 	bl	80096bc <create_chain>
 800b9be:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9c0:	e013      	b.n	800b9ea <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d007      	beq.n	800b9da <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7fd ff0b 	bl	80097ec <clmt_clust>
 800b9d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9d8:	e007      	b.n	800b9ea <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7fd fe6a 	bl	80096bc <create_chain>
 800b9e8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 8109 	beq.w	800bc04 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d104      	bne.n	800ba02 <f_write+0x10c>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	755a      	strb	r2, [r3, #21]
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e109      	b.n	800bc16 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba08:	d104      	bne.n	800ba14 <f_write+0x11e>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	755a      	strb	r2, [r3, #21]
 800ba10:	2301      	movs	r3, #1
 800ba12:	e100      	b.n	800bc16 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <f_write+0x132>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7d1b      	ldrb	r3, [r3, #20]
 800ba2c:	b25b      	sxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da18      	bge.n	800ba64 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	7858      	ldrb	r0, [r3, #1]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a1a      	ldr	r2, [r3, #32]
 800ba40:	2301      	movs	r3, #1
 800ba42:	f7fd f83b 	bl	8008abc <disk_write>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <f_write+0x160>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	755a      	strb	r2, [r3, #21]
 800ba52:	2301      	movs	r3, #1
 800ba54:	e0df      	b.n	800bc16 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	7d1b      	ldrb	r3, [r3, #20]
 800ba5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f7fd fbb1 	bl	80091d4 <clust2sect>
 800ba72:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d104      	bne.n	800ba84 <f_write+0x18e>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	755a      	strb	r2, [r3, #21]
 800ba80:	2302      	movs	r3, #2
 800ba82:	e0c8      	b.n	800bc16 <f_write+0x320>
			sect += csect;
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	4413      	add	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	899b      	ldrh	r3, [r3, #12]
 800ba90:	461a      	mov	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba98:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d043      	beq.n	800bb28 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	6a3b      	ldr	r3, [r7, #32]
 800baa4:	4413      	add	r3, r2
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	8952      	ldrh	r2, [r2, #10]
 800baaa:	4293      	cmp	r3, r2
 800baac:	d905      	bls.n	800baba <f_write+0x1c4>
					cc = fs->csize - csect;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	895b      	ldrh	r3, [r3, #10]
 800bab2:	461a      	mov	r2, r3
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	7858      	ldrb	r0, [r3, #1]
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	69f9      	ldr	r1, [r7, #28]
 800bac4:	f7fc fffa 	bl	8008abc <disk_write>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <f_write+0x1e2>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2201      	movs	r2, #1
 800bad2:	755a      	strb	r2, [r3, #21]
 800bad4:	2301      	movs	r3, #1
 800bad6:	e09e      	b.n	800bc16 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6a1a      	ldr	r2, [r3, #32]
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	6a3a      	ldr	r2, [r7, #32]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d918      	bls.n	800bb18 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6a1a      	ldr	r2, [r3, #32]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	8992      	ldrh	r2, [r2, #12]
 800baf8:	fb02 f303 	mul.w	r3, r2, r3
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	18d1      	adds	r1, r2, r3
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	899b      	ldrh	r3, [r3, #12]
 800bb04:	461a      	mov	r2, r3
 800bb06:	f7fd f899 	bl	8008c3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	7d1b      	ldrb	r3, [r3, #20]
 800bb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	899b      	ldrh	r3, [r3, #12]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	fb02 f303 	mul.w	r3, r2, r3
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb26:	e04b      	b.n	800bbc0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d016      	beq.n	800bb60 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d210      	bcs.n	800bb60 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	7858      	ldrb	r0, [r3, #1]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb48:	2301      	movs	r3, #1
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	f7fc ff96 	bl	8008a7c <disk_read>
 800bb50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	755a      	strb	r2, [r3, #21]
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e05a      	b.n	800bc16 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	899b      	ldrh	r3, [r3, #12]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	8992      	ldrh	r2, [r2, #12]
 800bb74:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb78:	fb01 f202 	mul.w	r2, r1, r2
 800bb7c:	1a9b      	subs	r3, r3, r2
 800bb7e:	1ac3      	subs	r3, r0, r3
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d901      	bls.n	800bb8e <f_write+0x298>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	8992      	ldrh	r2, [r2, #12]
 800bb9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bba0:	fb00 f202 	mul.w	r2, r0, r2
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	440b      	add	r3, r1
 800bba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbaa:	69f9      	ldr	r1, [r7, #28]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fd f845 	bl	8008c3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	7d1b      	ldrb	r3, [r3, #20]
 800bbb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bbc0:	69fa      	ldr	r2, [r7, #28]
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	4413      	add	r3, r2
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	699a      	ldr	r2, [r3, #24]
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	441a      	add	r2, r3
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	619a      	str	r2, [r3, #24]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	bf38      	it	cc
 800bbe0:	461a      	movcc	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	60da      	str	r2, [r3, #12]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	441a      	add	r2, r3
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f47f aeb5 	bne.w	800b96c <f_write+0x76>
 800bc02:	e000      	b.n	800bc06 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc04:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	7d1b      	ldrb	r3, [r3, #20]
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b086      	sub	sp, #24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f107 0208 	add.w	r2, r7, #8
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff faba 	bl	800b1a8 <validate>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d168      	bne.n	800bd10 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	7d1b      	ldrb	r3, [r3, #20]
 800bc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d062      	beq.n	800bd10 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	7d1b      	ldrb	r3, [r3, #20]
 800bc4e:	b25b      	sxtb	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da15      	bge.n	800bc80 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	7858      	ldrb	r0, [r3, #1]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6a1a      	ldr	r2, [r3, #32]
 800bc62:	2301      	movs	r3, #1
 800bc64:	f7fc ff2a 	bl	8008abc <disk_write>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <f_sync+0x54>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e04f      	b.n	800bd12 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7d1b      	ldrb	r3, [r3, #20]
 800bc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc80:	f7fa fe92 	bl	80069a8 <get_fattime>
 800bc84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f7fd fa02 	bl	8009098 <move_window>
 800bc94:	4603      	mov	r3, r0
 800bc96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc98:	7dfb      	ldrb	r3, [r7, #23]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d138      	bne.n	800bd10 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	330b      	adds	r3, #11
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	330b      	adds	r3, #11
 800bcae:	f042 0220 	orr.w	r2, r2, #32
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	68f9      	ldr	r1, [r7, #12]
 800bcc2:	f7fd ff90 	bl	8009be6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f103 021c 	add.w	r2, r3, #28
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	f7fc ff86 	bl	8008be4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3316      	adds	r3, #22
 800bcdc:	6939      	ldr	r1, [r7, #16]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fc ff80 	bl	8008be4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3312      	adds	r3, #18
 800bce8:	2100      	movs	r1, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fc ff5f 	bl	8008bae <st_word>
					fs->wflag = 1;
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fd f9fb 	bl	80090f4 <sync_fs>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7d1b      	ldrb	r3, [r3, #20]
 800bd06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff ff7b 	bl	800bc1e <f_sync>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d118      	bne.n	800bd64 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f107 0208 	add.w	r2, r7, #8
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fa34 	bl	800b1a8 <validate>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10c      	bne.n	800bd64 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fd f8fe 	bl	8008f50 <dec_lock>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd58:	7bfb      	ldrb	r3, [r7, #15]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b090      	sub	sp, #64	; 0x40
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f107 0208 	add.w	r2, r7, #8
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fa11 	bl	800b1a8 <validate>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bd8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d103      	bne.n	800bd9c <f_lseek+0x2e>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7d5b      	ldrb	r3, [r3, #21]
 800bd98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bd9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <f_lseek+0x3c>
 800bda4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bda8:	e201      	b.n	800c1ae <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f000 80d9 	beq.w	800bf66 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdba:	d15a      	bne.n	800be72 <f_lseek+0x104>
			tbl = fp->cltbl;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	1d1a      	adds	r2, r3, #4
 800bdc6:	627a      	str	r2, [r7, #36]	; 0x24
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	2302      	movs	r3, #2
 800bdce:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d03a      	beq.n	800be52 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	2300      	movs	r3, #0
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	3302      	adds	r3, #2
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fd fa0a 	bl	8009212 <get_fat>
 800bdfe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	2b01      	cmp	r3, #1
 800be04:	d804      	bhi.n	800be10 <f_lseek+0xa2>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2202      	movs	r2, #2
 800be0a:	755a      	strb	r2, [r3, #21]
 800be0c:	2302      	movs	r3, #2
 800be0e:	e1ce      	b.n	800c1ae <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d104      	bne.n	800be22 <f_lseek+0xb4>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	755a      	strb	r2, [r3, #21]
 800be1e:	2301      	movs	r3, #1
 800be20:	e1c5      	b.n	800c1ae <f_lseek+0x440>
					} while (cl == pcl + 1);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be28:	429a      	cmp	r2, r3
 800be2a:	d0de      	beq.n	800bdea <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800be2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	429a      	cmp	r2, r3
 800be32:	d809      	bhi.n	800be48 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	1d1a      	adds	r2, r3, #4
 800be38:	627a      	str	r2, [r7, #36]	; 0x24
 800be3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	1d1a      	adds	r2, r3, #4
 800be42:	627a      	str	r2, [r7, #36]	; 0x24
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	69db      	ldr	r3, [r3, #28]
 800be4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4e:	429a      	cmp	r2, r3
 800be50:	d3c4      	bcc.n	800bddc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be58:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800be5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d803      	bhi.n	800be6a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	2200      	movs	r2, #0
 800be66:	601a      	str	r2, [r3, #0]
 800be68:	e19f      	b.n	800c1aa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800be6a:	2311      	movs	r3, #17
 800be6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800be70:	e19b      	b.n	800c1aa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d902      	bls.n	800be82 <f_lseek+0x114>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 818d 	beq.w	800c1aa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	3b01      	subs	r3, #1
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7fd fca8 	bl	80097ec <clmt_clust>
 800be9c:	4602      	mov	r2, r0
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7fd f992 	bl	80091d4 <clust2sect>
 800beb0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <f_lseek+0x154>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	755a      	strb	r2, [r3, #21]
 800bebe:	2302      	movs	r3, #2
 800bec0:	e175      	b.n	800c1ae <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	8992      	ldrh	r2, [r2, #12]
 800beca:	fbb3 f3f2 	udiv	r3, r3, r2
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	8952      	ldrh	r2, [r2, #10]
 800bed2:	3a01      	subs	r2, #1
 800bed4:	4013      	ands	r3, r2
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	4413      	add	r3, r2
 800beda:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	8992      	ldrh	r2, [r2, #12]
 800bee4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bee8:	fb01 f202 	mul.w	r2, r1, r2
 800beec:	1a9b      	subs	r3, r3, r2
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 815b 	beq.w	800c1aa <f_lseek+0x43c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	429a      	cmp	r2, r3
 800befc:	f000 8155 	beq.w	800c1aa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7d1b      	ldrb	r3, [r3, #20]
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da18      	bge.n	800bf3c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	7858      	ldrb	r0, [r3, #1]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1a      	ldr	r2, [r3, #32]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f7fc fdcf 	bl	8008abc <disk_write>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d004      	beq.n	800bf2e <f_lseek+0x1c0>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	755a      	strb	r2, [r3, #21]
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e13f      	b.n	800c1ae <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	7858      	ldrb	r0, [r3, #1]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf46:	2301      	movs	r3, #1
 800bf48:	69ba      	ldr	r2, [r7, #24]
 800bf4a:	f7fc fd97 	bl	8008a7c <disk_read>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <f_lseek+0x1f0>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	755a      	strb	r2, [r3, #21]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e127      	b.n	800c1ae <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	621a      	str	r2, [r3, #32]
 800bf64:	e121      	b.n	800c1aa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d908      	bls.n	800bf82 <f_lseek+0x214>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	7d1b      	ldrb	r3, [r3, #20]
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf90:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 80b5 	beq.w	800c104 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	899b      	ldrh	r3, [r3, #12]
 800bfa4:	fb02 f303 	mul.w	r3, r2, r3
 800bfa8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01b      	beq.n	800bfe8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	1e59      	subs	r1, r3, #1
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d30f      	bcc.n	800bfe8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	1e5a      	subs	r2, r3, #1
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	425b      	negs	r3, r3
 800bfd0:	401a      	ands	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	69db      	ldr	r3, [r3, #28]
 800bfe4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfe6:	e022      	b.n	800c02e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bfee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d119      	bne.n	800c028 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2100      	movs	r1, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fd fb5f 	bl	80096bc <create_chain>
 800bffe:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	2b01      	cmp	r3, #1
 800c004:	d104      	bne.n	800c010 <f_lseek+0x2a2>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2202      	movs	r2, #2
 800c00a:	755a      	strb	r2, [r3, #21]
 800c00c:	2302      	movs	r3, #2
 800c00e:	e0ce      	b.n	800c1ae <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c016:	d104      	bne.n	800c022 <f_lseek+0x2b4>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	755a      	strb	r2, [r3, #21]
 800c01e:	2301      	movs	r3, #1
 800c020:	e0c5      	b.n	800c1ae <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c026:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c02c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	2b00      	cmp	r3, #0
 800c032:	d067      	beq.n	800c104 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c034:	e03a      	b.n	800c0ac <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	603b      	str	r3, [r7, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	699a      	ldr	r2, [r3, #24]
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	441a      	add	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	7d1b      	ldrb	r3, [r3, #20]
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00b      	beq.n	800c06e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fb2e 	bl	80096bc <create_chain>
 800c060:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	2b00      	cmp	r3, #0
 800c066:	d108      	bne.n	800c07a <f_lseek+0x30c>
							ofs = 0; break;
 800c068:	2300      	movs	r3, #0
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	e022      	b.n	800c0b4 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd f8cd 	bl	8009212 <get_fat>
 800c078:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c080:	d104      	bne.n	800c08c <f_lseek+0x31e>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2201      	movs	r2, #1
 800c086:	755a      	strb	r2, [r3, #21]
 800c088:	2301      	movs	r3, #1
 800c08a:	e090      	b.n	800c1ae <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d904      	bls.n	800c09c <f_lseek+0x32e>
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c098:	429a      	cmp	r2, r3
 800c09a:	d304      	bcc.n	800c0a6 <f_lseek+0x338>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2202      	movs	r2, #2
 800c0a0:	755a      	strb	r2, [r3, #21]
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e083      	b.n	800c1ae <f_lseek+0x440>
					fp->clust = clst;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0aa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d8c0      	bhi.n	800c036 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	699a      	ldr	r2, [r3, #24]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	441a      	add	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	899b      	ldrh	r3, [r3, #12]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0cc:	fb01 f202 	mul.w	r2, r1, r2
 800c0d0:	1a9b      	subs	r3, r3, r2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d016      	beq.n	800c104 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd f87a 	bl	80091d4 <clust2sect>
 800c0e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d104      	bne.n	800c0f2 <f_lseek+0x384>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	755a      	strb	r2, [r3, #21]
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	e05d      	b.n	800c1ae <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	899b      	ldrh	r3, [r3, #12]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c100:	4413      	add	r3, r2
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	699a      	ldr	r2, [r3, #24]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d90a      	bls.n	800c126 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699a      	ldr	r2, [r3, #24]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
 800c11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c120:	b2da      	uxtb	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	8992      	ldrh	r2, [r2, #12]
 800c12e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c132:	fb01 f202 	mul.w	r2, r1, r2
 800c136:	1a9b      	subs	r3, r3, r2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d036      	beq.n	800c1aa <f_lseek+0x43c>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c142:	429a      	cmp	r2, r3
 800c144:	d031      	beq.n	800c1aa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7d1b      	ldrb	r3, [r3, #20]
 800c14a:	b25b      	sxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da18      	bge.n	800c182 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	7858      	ldrb	r0, [r3, #1]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1a      	ldr	r2, [r3, #32]
 800c15e:	2301      	movs	r3, #1
 800c160:	f7fc fcac 	bl	8008abc <disk_write>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <f_lseek+0x406>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	755a      	strb	r2, [r3, #21]
 800c170:	2301      	movs	r3, #1
 800c172:	e01c      	b.n	800c1ae <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	7858      	ldrb	r0, [r3, #1]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c18c:	2301      	movs	r3, #1
 800c18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c190:	f7fc fc74 	bl	8008a7c <disk_read>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <f_lseek+0x436>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	755a      	strb	r2, [r3, #21]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e004      	b.n	800c1ae <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c1aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3740      	adds	r7, #64	; 0x40
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b090      	sub	sp, #64	; 0x40
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c1c0:	f107 0108 	add.w	r1, r7, #8
 800c1c4:	1d3b      	adds	r3, r7, #4
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe fd67 	bl	800ac9c <find_volume>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800c1d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d11f      	bne.n	800c21c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe fc49 	bl	800aa7c <follow_path>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800c1f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d111      	bne.n	800c21c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c1f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1fc:	b25b      	sxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	da03      	bge.n	800c20a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800c202:	2306      	movs	r3, #6
 800c204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c208:	e008      	b.n	800c21c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <f_stat+0x66>
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe f99a 	bl	800a550 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c21c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c220:	4618      	mov	r0, r3
 800c222:	3740      	adds	r7, #64	; 0x40
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b0a0      	sub	sp, #128	; 0x80
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c234:	f107 010c 	add.w	r1, r7, #12
 800c238:	1d3b      	adds	r3, r7, #4
 800c23a:	2202      	movs	r2, #2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe fd2d 	bl	800ac9c <find_volume>
 800c242:	4603      	mov	r3, r0
 800c244:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800c24c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 808e 	bne.w	800c372 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc0c 	bl	800aa7c <follow_path>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c26a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d108      	bne.n	800c284 <f_unlink+0x5c>
 800c272:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c276:	2102      	movs	r1, #2
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fc fd5d 	bl	8008d38 <chk_lock>
 800c27e:	4603      	mov	r3, r0
 800c280:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c284:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d172      	bne.n	800c372 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c28c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c290:	b25b      	sxtb	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	da03      	bge.n	800c29e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c296:	2306      	movs	r3, #6
 800c298:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c29c:	e008      	b.n	800c2b0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c29e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c2aa:	2307      	movs	r3, #7
 800c2ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800c2b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d134      	bne.n	800c322 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2bc:	4611      	mov	r1, r2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd fc72 	bl	8009ba8 <ld_clust>
 800c2c4:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c2c6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800c2ca:	f003 0310 	and.w	r3, r3, #16
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d027      	beq.n	800c322 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800c2d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2d8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c2da:	f107 0310 	add.w	r3, r7, #16
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fd fabb 	bl	800985c <dir_sdi>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800c2ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d116      	bne.n	800c322 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c2f4:	f107 0310 	add.w	r3, r7, #16
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fd fe7f 	bl	8009ffe <dir_read>
 800c300:	4603      	mov	r3, r0
 800c302:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c306:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <f_unlink+0xec>
 800c30e:	2307      	movs	r3, #7
 800c310:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c314:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d102      	bne.n	800c322 <f_unlink+0xfa>
 800c31c:	2300      	movs	r3, #0
 800c31e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800c322:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c326:	2b00      	cmp	r3, #0
 800c328:	d123      	bne.n	800c372 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c32a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f8c4 	bl	800a4bc <dir_remove>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c33a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10c      	bne.n	800c35c <f_unlink+0x134>
 800c342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c344:	2b00      	cmp	r3, #0
 800c346:	d009      	beq.n	800c35c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c348:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c34c:	2200      	movs	r2, #0
 800c34e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c350:	4618      	mov	r0, r3
 800c352:	f7fd f94e 	bl	80095f2 <remove_chain>
 800c356:	4603      	mov	r3, r0
 800c358:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c35c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <f_unlink+0x14a>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4618      	mov	r0, r3
 800c368:	f7fc fec4 	bl	80090f4 <sync_fs>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c372:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c376:	4618      	mov	r0, r3
 800c378:	3780      	adds	r7, #128	; 0x80
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b088      	sub	sp, #32
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c392:	e01b      	b.n	800c3cc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c394:	f107 0310 	add.w	r3, r7, #16
 800c398:	f107 0114 	add.w	r1, r7, #20
 800c39c:	2201      	movs	r2, #1
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7ff f94a 	bl	800b638 <f_read>
		if (rc != 1) break;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d116      	bne.n	800c3d8 <f_gets+0x5a>
		c = s[0];
 800c3aa:	7d3b      	ldrb	r3, [r7, #20]
 800c3ac:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	2b0d      	cmp	r3, #13
 800c3b2:	d100      	bne.n	800c3b6 <f_gets+0x38>
 800c3b4:	e00a      	b.n	800c3cc <f_gets+0x4e>
		*p++ = c;
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	1c5a      	adds	r2, r3, #1
 800c3ba:	61ba      	str	r2, [r7, #24]
 800c3bc:	7dfa      	ldrb	r2, [r7, #23]
 800c3be:	701a      	strb	r2, [r3, #0]
		n++;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	2b0a      	cmp	r3, #10
 800c3ca:	d007      	beq.n	800c3dc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	69fa      	ldr	r2, [r7, #28]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	dbde      	blt.n	800c394 <f_gets+0x16>
 800c3d6:	e002      	b.n	800c3de <f_gets+0x60>
		if (rc != 1) break;
 800c3d8:	bf00      	nop
 800c3da:	e000      	b.n	800c3de <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c3dc:	bf00      	nop
	}
	*p = 0;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <f_gets+0x70>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	e000      	b.n	800c3f0 <f_gets+0x72>
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3720      	adds	r7, #32
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	2b0a      	cmp	r3, #10
 800c408:	d103      	bne.n	800c412 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c40a:	210d      	movs	r1, #13
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff fff3 	bl	800c3f8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	db25      	blt.n	800c46a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	60fa      	str	r2, [r7, #12]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	4413      	add	r3, r2
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b3c      	cmp	r3, #60	; 0x3c
 800c430:	dd12      	ble.n	800c458 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f103 010c 	add.w	r1, r3, #12
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	f107 0308 	add.w	r3, r7, #8
 800c442:	f7ff fa58 	bl	800b8f6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d101      	bne.n	800c452 <putc_bfd+0x5a>
 800c44e:	2300      	movs	r3, #0
 800c450:	e001      	b.n	800c456 <putc_bfd+0x5e>
 800c452:	f04f 33ff 	mov.w	r3, #4294967295
 800c456:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	1c5a      	adds	r2, r3, #1
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	609a      	str	r2, [r3, #8]
 800c468:	e000      	b.n	800c46c <putc_bfd+0x74>
	if (i < 0) return;
 800c46a:	bf00      	nop
}
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	db16      	blt.n	800c4b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f103 010c 	add.w	r1, r3, #12
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	461a      	mov	r2, r3
 800c492:	f107 030c 	add.w	r3, r7, #12
 800c496:	f7ff fa2e 	bl	800b8f6 <f_write>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d102      	bne.n	800c4b0 <putc_flush+0x3e>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	e001      	b.n	800c4b4 <putc_flush+0x42>
	return EOF;
 800c4b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685a      	ldr	r2, [r3, #4]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	609a      	str	r2, [r3, #8]
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b096      	sub	sp, #88	; 0x58
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c4f0:	f107 030c 	add.w	r3, r7, #12
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff ffe0 	bl	800c4bc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c4fc:	e009      	b.n	800c512 <f_puts+0x2c>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	f107 030c 	add.w	r3, r7, #12
 800c50a:	4611      	mov	r1, r2
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff ff73 	bl	800c3f8 <putc_bfd>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1f1      	bne.n	800c4fe <f_puts+0x18>
	return putc_flush(&pb);
 800c51a:	f107 030c 	add.w	r3, r7, #12
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff ffa7 	bl	800c472 <putc_flush>
 800c524:	4603      	mov	r3, r0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3758      	adds	r7, #88	; 0x58
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c530:	b40e      	push	{r1, r2, r3}
 800c532:	b580      	push	{r7, lr}
 800c534:	b0a7      	sub	sp, #156	; 0x9c
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800c53a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4618      	mov	r0, r3
 800c542:	f7ff ffbb 	bl	800c4bc <putc_init>

	va_start(arp, fmt);
 800c546:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c54a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800c54c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800c55c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 81f2 	beq.w	800c94a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800c566:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c56a:	2b25      	cmp	r3, #37	; 0x25
 800c56c:	d008      	beq.n	800c580 <f_printf+0x50>
			putc_bfd(&pb, c);
 800c56e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800c572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff ff3d 	bl	800c3f8 <putc_bfd>
			continue;
 800c57e:	e1e3      	b.n	800c948 <f_printf+0x418>
		}
		w = f = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c586:	2300      	movs	r3, #0
 800c588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800c58c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800c59c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c5a0:	2b30      	cmp	r3, #48	; 0x30
 800c5a2:	d10b      	bne.n	800c5bc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c5aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800c5ba:	e024      	b.n	800c606 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c5bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c5c0:	2b2d      	cmp	r3, #45	; 0x2d
 800c5c2:	d120      	bne.n	800c606 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c5ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c5da:	e014      	b.n	800c606 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800c5dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c5ee:	4413      	add	r3, r2
 800c5f0:	3b30      	subs	r3, #48	; 0x30
 800c5f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800c5f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800c606:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c60a:	2b2f      	cmp	r3, #47	; 0x2f
 800c60c:	d903      	bls.n	800c616 <f_printf+0xe6>
 800c60e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c612:	2b39      	cmp	r3, #57	; 0x39
 800c614:	d9e2      	bls.n	800c5dc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c616:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c61a:	2b6c      	cmp	r3, #108	; 0x6c
 800c61c:	d003      	beq.n	800c626 <f_printf+0xf6>
 800c61e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c622:	2b4c      	cmp	r3, #76	; 0x4c
 800c624:	d10d      	bne.n	800c642 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800c626:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c62a:	f043 0304 	orr.w	r3, r3, #4
 800c62e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800c642:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c646:	2b00      	cmp	r3, #0
 800c648:	f000 8181 	beq.w	800c94e <f_printf+0x41e>
		d = c;
 800c64c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c650:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800c654:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c658:	2b60      	cmp	r3, #96	; 0x60
 800c65a:	d908      	bls.n	800c66e <f_printf+0x13e>
 800c65c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c660:	2b7a      	cmp	r3, #122	; 0x7a
 800c662:	d804      	bhi.n	800c66e <f_printf+0x13e>
 800c664:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c668:	3b20      	subs	r3, #32
 800c66a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800c66e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c672:	3b42      	subs	r3, #66	; 0x42
 800c674:	2b16      	cmp	r3, #22
 800c676:	f200 8098 	bhi.w	800c7aa <f_printf+0x27a>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <f_printf+0x150>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c78b 	.word	0x0800c78b
 800c684:	0800c773 	.word	0x0800c773
 800c688:	0800c79b 	.word	0x0800c79b
 800c68c:	0800c7ab 	.word	0x0800c7ab
 800c690:	0800c7ab 	.word	0x0800c7ab
 800c694:	0800c7ab 	.word	0x0800c7ab
 800c698:	0800c7ab 	.word	0x0800c7ab
 800c69c:	0800c7ab 	.word	0x0800c7ab
 800c6a0:	0800c7ab 	.word	0x0800c7ab
 800c6a4:	0800c7ab 	.word	0x0800c7ab
 800c6a8:	0800c7ab 	.word	0x0800c7ab
 800c6ac:	0800c7ab 	.word	0x0800c7ab
 800c6b0:	0800c7ab 	.word	0x0800c7ab
 800c6b4:	0800c793 	.word	0x0800c793
 800c6b8:	0800c7ab 	.word	0x0800c7ab
 800c6bc:	0800c7ab 	.word	0x0800c7ab
 800c6c0:	0800c7ab 	.word	0x0800c7ab
 800c6c4:	0800c6dd 	.word	0x0800c6dd
 800c6c8:	0800c7ab 	.word	0x0800c7ab
 800c6cc:	0800c79b 	.word	0x0800c79b
 800c6d0:	0800c7ab 	.word	0x0800c7ab
 800c6d4:	0800c7ab 	.word	0x0800c7ab
 800c6d8:	0800c7a3 	.word	0x0800c7a3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c6dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6de:	1d1a      	adds	r2, r3, #4
 800c6e0:	67ba      	str	r2, [r7, #120]	; 0x78
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6ec:	e004      	b.n	800c6f8 <f_printf+0x1c8>
 800c6ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6fe:	4413      	add	r3, r2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1f3      	bne.n	800c6ee <f_printf+0x1be>
			if (!(f & 2)) {
 800c706:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d11a      	bne.n	800c748 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c712:	e005      	b.n	800c720 <f_printf+0x1f0>
 800c714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c718:	2120      	movs	r1, #32
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff fe6c 	bl	800c3f8 <putc_bfd>
 800c720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c72a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c72e:	429a      	cmp	r2, r3
 800c730:	d8f0      	bhi.n	800c714 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800c732:	e009      	b.n	800c748 <f_printf+0x218>
 800c734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c73a:	781a      	ldrb	r2, [r3, #0]
 800c73c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff fe58 	bl	800c3f8 <putc_bfd>
 800c748:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1f1      	bne.n	800c734 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800c750:	e005      	b.n	800c75e <f_printf+0x22e>
 800c752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c756:	2120      	movs	r1, #32
 800c758:	4618      	mov	r0, r3
 800c75a:	f7ff fe4d 	bl	800c3f8 <putc_bfd>
 800c75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c768:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d8f0      	bhi.n	800c752 <f_printf+0x222>
			continue;
 800c770:	e0ea      	b.n	800c948 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800c772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c774:	1d1a      	adds	r2, r3, #4
 800c776:	67ba      	str	r2, [r7, #120]	; 0x78
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f7ff fe38 	bl	800c3f8 <putc_bfd>
 800c788:	e0de      	b.n	800c948 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800c78a:	2302      	movs	r3, #2
 800c78c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800c790:	e014      	b.n	800c7bc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800c792:	2308      	movs	r3, #8
 800c794:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800c798:	e010      	b.n	800c7bc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800c79a:	230a      	movs	r3, #10
 800c79c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800c7a0:	e00c      	b.n	800c7bc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800c7a8:	e008      	b.n	800c7bc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800c7aa:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800c7ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff fe1f 	bl	800c3f8 <putc_bfd>
 800c7ba:	e0c5      	b.n	800c948 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800c7bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c7c0:	f003 0304 	and.w	r3, r3, #4
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d004      	beq.n	800c7d2 <f_printf+0x2a2>
 800c7c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7ca:	1d1a      	adds	r2, r3, #4
 800c7cc:	67ba      	str	r2, [r7, #120]	; 0x78
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	e00c      	b.n	800c7ec <f_printf+0x2bc>
 800c7d2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c7d6:	2b44      	cmp	r3, #68	; 0x44
 800c7d8:	d104      	bne.n	800c7e4 <f_printf+0x2b4>
 800c7da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	67ba      	str	r2, [r7, #120]	; 0x78
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	e003      	b.n	800c7ec <f_printf+0x2bc>
 800c7e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	67ba      	str	r2, [r7, #120]	; 0x78
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800c7f0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c7f4:	2b44      	cmp	r3, #68	; 0x44
 800c7f6:	d10e      	bne.n	800c816 <f_printf+0x2e6>
 800c7f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	da0a      	bge.n	800c816 <f_printf+0x2e6>
			v = 0 - v;
 800c800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c804:	425b      	negs	r3, r3
 800c806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800c80a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c80e:	f043 0308 	orr.w	r3, r3, #8
 800c812:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800c81c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800c820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c824:	fbb3 f1f2 	udiv	r1, r3, r2
 800c828:	fb01 f202 	mul.w	r2, r1, r2
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800c832:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800c836:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800c842:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c846:	2b09      	cmp	r3, #9
 800c848:	d90b      	bls.n	800c862 <f_printf+0x332>
 800c84a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c84e:	2b78      	cmp	r3, #120	; 0x78
 800c850:	d101      	bne.n	800c856 <f_printf+0x326>
 800c852:	2227      	movs	r2, #39	; 0x27
 800c854:	e000      	b.n	800c858 <f_printf+0x328>
 800c856:	2207      	movs	r2, #7
 800c858:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c85c:	4413      	add	r3, r2
 800c85e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800c862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c86c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800c870:	3230      	adds	r2, #48	; 0x30
 800c872:	b2d2      	uxtb	r2, r2
 800c874:	3398      	adds	r3, #152	; 0x98
 800c876:	443b      	add	r3, r7
 800c878:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800c87c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c880:	2b00      	cmp	r3, #0
 800c882:	d003      	beq.n	800c88c <f_printf+0x35c>
 800c884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c888:	2b1f      	cmp	r3, #31
 800c88a:	d9c7      	bls.n	800c81c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800c88c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c890:	f003 0308 	and.w	r3, r3, #8
 800c894:	2b00      	cmp	r3, #0
 800c896:	d009      	beq.n	800c8ac <f_printf+0x37c>
 800c898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800c8a2:	3398      	adds	r3, #152	; 0x98
 800c8a4:	443b      	add	r3, r7
 800c8a6:	222d      	movs	r2, #45	; 0x2d
 800c8a8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800c8ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c8b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <f_printf+0x394>
 800c8c0:	2330      	movs	r3, #48	; 0x30
 800c8c2:	e000      	b.n	800c8c6 <f_printf+0x396>
 800c8c4:	2320      	movs	r3, #32
 800c8c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800c8ca:	e007      	b.n	800c8dc <f_printf+0x3ac>
 800c8cc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800c8d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7ff fd8e 	bl	800c3f8 <putc_bfd>
 800c8dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d108      	bne.n	800c8fa <f_printf+0x3ca>
 800c8e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8ec:	1c5a      	adds	r2, r3, #1
 800c8ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c8f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d8e8      	bhi.n	800c8cc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800c8fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c8fe:	3b01      	subs	r3, #1
 800c900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c904:	f107 020c 	add.w	r2, r7, #12
 800c908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c90c:	4413      	add	r3, r2
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff fd6e 	bl	800c3f8 <putc_bfd>
		} while (i);
 800c91c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1ea      	bne.n	800c8fa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800c924:	e007      	b.n	800c936 <f_printf+0x406>
 800c926:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800c92a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fd61 	bl	800c3f8 <putc_bfd>
 800c936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c940:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c944:	429a      	cmp	r2, r3
 800c946:	d8ee      	bhi.n	800c926 <f_printf+0x3f6>
		c = *fmt++;
 800c948:	e600      	b.n	800c54c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800c94a:	bf00      	nop
 800c94c:	e000      	b.n	800c950 <f_printf+0x420>
		if (!c) break;
 800c94e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800c950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff fd8c 	bl	800c472 <putc_flush>
 800c95a:	4603      	mov	r3, r0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	379c      	adds	r7, #156	; 0x9c
 800c960:	46bd      	mov	sp, r7
 800c962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c966:	b003      	add	sp, #12
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop

0800c96c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c97a:	2301      	movs	r3, #1
 800c97c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c982:	4b1f      	ldr	r3, [pc, #124]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c984:	7a5b      	ldrb	r3, [r3, #9]
 800c986:	b2db      	uxtb	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d131      	bne.n	800c9f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c98c:	4b1c      	ldr	r3, [pc, #112]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c98e:	7a5b      	ldrb	r3, [r3, #9]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	461a      	mov	r2, r3
 800c994:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c996:	2100      	movs	r1, #0
 800c998:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c99a:	4b19      	ldr	r3, [pc, #100]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c99c:	7a5b      	ldrb	r3, [r3, #9]
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	4a17      	ldr	r2, [pc, #92]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c9ac:	7a5b      	ldrb	r3, [r3, #9]
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c9b4:	4413      	add	r3, r2
 800c9b6:	79fa      	ldrb	r2, [r7, #7]
 800c9b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c9ba:	4b11      	ldr	r3, [pc, #68]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c9bc:	7a5b      	ldrb	r3, [r3, #9]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	1c5a      	adds	r2, r3, #1
 800c9c2:	b2d1      	uxtb	r1, r2
 800c9c4:	4a0e      	ldr	r2, [pc, #56]	; (800ca00 <FATFS_LinkDriverEx+0x94>)
 800c9c6:	7251      	strb	r1, [r2, #9]
 800c9c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c9ca:	7dbb      	ldrb	r3, [r7, #22]
 800c9cc:	3330      	adds	r3, #48	; 0x30
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	223a      	movs	r2, #58	; 0x3a
 800c9da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	3302      	adds	r3, #2
 800c9e0:	222f      	movs	r2, #47	; 0x2f
 800c9e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	3303      	adds	r3, #3
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	371c      	adds	r7, #28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	20002358 	.word	0x20002358

0800ca04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff ffaa 	bl	800c96c <FATFS_LinkDriverEx>
 800ca18:	4603      	mov	r3, r0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
	...

0800ca24 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ca30:	88fb      	ldrh	r3, [r7, #6]
 800ca32:	2b7f      	cmp	r3, #127	; 0x7f
 800ca34:	d802      	bhi.n	800ca3c <ff_convert+0x18>
		c = chr;
 800ca36:	88fb      	ldrh	r3, [r7, #6]
 800ca38:	81fb      	strh	r3, [r7, #14]
 800ca3a:	e025      	b.n	800ca88 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00b      	beq.n	800ca5a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ca42:	88fb      	ldrh	r3, [r7, #6]
 800ca44:	2bff      	cmp	r3, #255	; 0xff
 800ca46:	d805      	bhi.n	800ca54 <ff_convert+0x30>
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	3b80      	subs	r3, #128	; 0x80
 800ca4c:	4a12      	ldr	r2, [pc, #72]	; (800ca98 <ff_convert+0x74>)
 800ca4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca52:	e000      	b.n	800ca56 <ff_convert+0x32>
 800ca54:	2300      	movs	r3, #0
 800ca56:	81fb      	strh	r3, [r7, #14]
 800ca58:	e016      	b.n	800ca88 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	81fb      	strh	r3, [r7, #14]
 800ca5e:	e009      	b.n	800ca74 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ca60:	89fb      	ldrh	r3, [r7, #14]
 800ca62:	4a0d      	ldr	r2, [pc, #52]	; (800ca98 <ff_convert+0x74>)
 800ca64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca68:	88fa      	ldrh	r2, [r7, #6]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d006      	beq.n	800ca7c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ca6e:	89fb      	ldrh	r3, [r7, #14]
 800ca70:	3301      	adds	r3, #1
 800ca72:	81fb      	strh	r3, [r7, #14]
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	2b7f      	cmp	r3, #127	; 0x7f
 800ca78:	d9f2      	bls.n	800ca60 <ff_convert+0x3c>
 800ca7a:	e000      	b.n	800ca7e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ca7c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ca7e:	89fb      	ldrh	r3, [r7, #14]
 800ca80:	3380      	adds	r3, #128	; 0x80
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	b2db      	uxtb	r3, r3
 800ca86:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ca88:	89fb      	ldrh	r3, [r7, #14]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	080114f0 	.word	0x080114f0

0800ca9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	4603      	mov	r3, r0
 800caa4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caac:	d201      	bcs.n	800cab2 <ff_wtoupper+0x16>
 800caae:	4b3e      	ldr	r3, [pc, #248]	; (800cba8 <ff_wtoupper+0x10c>)
 800cab0:	e000      	b.n	800cab4 <ff_wtoupper+0x18>
 800cab2:	4b3e      	ldr	r3, [pc, #248]	; (800cbac <ff_wtoupper+0x110>)
 800cab4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	1c9a      	adds	r2, r3, #2
 800caba:	617a      	str	r2, [r7, #20]
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cac0:	8a7b      	ldrh	r3, [r7, #18]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d068      	beq.n	800cb98 <ff_wtoupper+0xfc>
 800cac6:	88fa      	ldrh	r2, [r7, #6]
 800cac8:	8a7b      	ldrh	r3, [r7, #18]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d364      	bcc.n	800cb98 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	1c9a      	adds	r2, r3, #2
 800cad2:	617a      	str	r2, [r7, #20]
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	823b      	strh	r3, [r7, #16]
 800cad8:	8a3b      	ldrh	r3, [r7, #16]
 800cada:	0a1b      	lsrs	r3, r3, #8
 800cadc:	81fb      	strh	r3, [r7, #14]
 800cade:	8a3b      	ldrh	r3, [r7, #16]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cae4:	88fa      	ldrh	r2, [r7, #6]
 800cae6:	8a79      	ldrh	r1, [r7, #18]
 800cae8:	8a3b      	ldrh	r3, [r7, #16]
 800caea:	440b      	add	r3, r1
 800caec:	429a      	cmp	r2, r3
 800caee:	da49      	bge.n	800cb84 <ff_wtoupper+0xe8>
			switch (cmd) {
 800caf0:	89fb      	ldrh	r3, [r7, #14]
 800caf2:	2b08      	cmp	r3, #8
 800caf4:	d84f      	bhi.n	800cb96 <ff_wtoupper+0xfa>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <ff_wtoupper+0x60>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb21 	.word	0x0800cb21
 800cb00:	0800cb33 	.word	0x0800cb33
 800cb04:	0800cb49 	.word	0x0800cb49
 800cb08:	0800cb51 	.word	0x0800cb51
 800cb0c:	0800cb59 	.word	0x0800cb59
 800cb10:	0800cb61 	.word	0x0800cb61
 800cb14:	0800cb69 	.word	0x0800cb69
 800cb18:	0800cb71 	.word	0x0800cb71
 800cb1c:	0800cb79 	.word	0x0800cb79
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cb20:	88fa      	ldrh	r2, [r7, #6]
 800cb22:	8a7b      	ldrh	r3, [r7, #18]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	697a      	ldr	r2, [r7, #20]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	80fb      	strh	r3, [r7, #6]
 800cb30:	e027      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cb32:	88fa      	ldrh	r2, [r7, #6]
 800cb34:	8a7b      	ldrh	r3, [r7, #18]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	88fa      	ldrh	r2, [r7, #6]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	80fb      	strh	r3, [r7, #6]
 800cb46:	e01c      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	3b10      	subs	r3, #16
 800cb4c:	80fb      	strh	r3, [r7, #6]
 800cb4e:	e018      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cb50:	88fb      	ldrh	r3, [r7, #6]
 800cb52:	3b20      	subs	r3, #32
 800cb54:	80fb      	strh	r3, [r7, #6]
 800cb56:	e014      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	3b30      	subs	r3, #48	; 0x30
 800cb5c:	80fb      	strh	r3, [r7, #6]
 800cb5e:	e010      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	3b1a      	subs	r3, #26
 800cb64:	80fb      	strh	r3, [r7, #6]
 800cb66:	e00c      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cb68:	88fb      	ldrh	r3, [r7, #6]
 800cb6a:	3308      	adds	r3, #8
 800cb6c:	80fb      	strh	r3, [r7, #6]
 800cb6e:	e008      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cb70:	88fb      	ldrh	r3, [r7, #6]
 800cb72:	3b50      	subs	r3, #80	; 0x50
 800cb74:	80fb      	strh	r3, [r7, #6]
 800cb76:	e004      	b.n	800cb82 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cb7e:	80fb      	strh	r3, [r7, #6]
 800cb80:	bf00      	nop
			}
			break;
 800cb82:	e008      	b.n	800cb96 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cb84:	89fb      	ldrh	r3, [r7, #14]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d195      	bne.n	800cab6 <ff_wtoupper+0x1a>
 800cb8a:	8a3b      	ldrh	r3, [r7, #16]
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4413      	add	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cb94:	e78f      	b.n	800cab6 <ff_wtoupper+0x1a>
			break;
 800cb96:	bf00      	nop
	}

	return chr;
 800cb98:	88fb      	ldrh	r3, [r7, #6]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	080115f0 	.word	0x080115f0
 800cbac:	080117e4 	.word	0x080117e4

0800cbb0 <__NVIC_SetPriority>:
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cbbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db0a      	blt.n	800cbda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	490c      	ldr	r1, [pc, #48]	; (800cbfc <__NVIC_SetPriority+0x4c>)
 800cbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbce:	0112      	lsls	r2, r2, #4
 800cbd0:	b2d2      	uxtb	r2, r2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cbd8:	e00a      	b.n	800cbf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	4908      	ldr	r1, [pc, #32]	; (800cc00 <__NVIC_SetPriority+0x50>)
 800cbe0:	79fb      	ldrb	r3, [r7, #7]
 800cbe2:	f003 030f 	and.w	r3, r3, #15
 800cbe6:	3b04      	subs	r3, #4
 800cbe8:	0112      	lsls	r2, r2, #4
 800cbea:	b2d2      	uxtb	r2, r2
 800cbec:	440b      	add	r3, r1
 800cbee:	761a      	strb	r2, [r3, #24]
}
 800cbf0:	bf00      	nop
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr
 800cbfc:	e000e100 	.word	0xe000e100
 800cc00:	e000ed00 	.word	0xe000ed00

0800cc04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc08:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <SysTick_Handler+0x1c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc0c:	f001 fee8 	bl	800e9e0 <xTaskGetSchedulerState>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d001      	beq.n	800cc1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc16:	f002 fdcf 	bl	800f7b8 <xPortSysTickHandler>
  }
}
 800cc1a:	bf00      	nop
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	e000e010 	.word	0xe000e010

0800cc24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc24:	b580      	push	{r7, lr}
 800cc26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc28:	2100      	movs	r1, #0
 800cc2a:	f06f 0004 	mvn.w	r0, #4
 800cc2e:	f7ff ffbf 	bl	800cbb0 <__NVIC_SetPriority>
#endif
}
 800cc32:	bf00      	nop
 800cc34:	bd80      	pop	{r7, pc}
	...

0800cc38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc3e:	f3ef 8305 	mrs	r3, IPSR
 800cc42:	603b      	str	r3, [r7, #0]
  return(result);
 800cc44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cc4a:	f06f 0305 	mvn.w	r3, #5
 800cc4e:	607b      	str	r3, [r7, #4]
 800cc50:	e00c      	b.n	800cc6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc52:	4b0a      	ldr	r3, [pc, #40]	; (800cc7c <osKernelInitialize+0x44>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d105      	bne.n	800cc66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc5a:	4b08      	ldr	r3, [pc, #32]	; (800cc7c <osKernelInitialize+0x44>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc60:	2300      	movs	r3, #0
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	e002      	b.n	800cc6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cc66:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc6c:	687b      	ldr	r3, [r7, #4]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	370c      	adds	r7, #12
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	20002364 	.word	0x20002364

0800cc80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc86:	f3ef 8305 	mrs	r3, IPSR
 800cc8a:	603b      	str	r3, [r7, #0]
  return(result);
 800cc8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d003      	beq.n	800cc9a <osKernelStart+0x1a>
    stat = osErrorISR;
 800cc92:	f06f 0305 	mvn.w	r3, #5
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	e010      	b.n	800ccbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <osKernelStart+0x48>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d109      	bne.n	800ccb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cca2:	f7ff ffbf 	bl	800cc24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cca6:	4b08      	ldr	r3, [pc, #32]	; (800ccc8 <osKernelStart+0x48>)
 800cca8:	2202      	movs	r2, #2
 800ccaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccac:	f001 fa3c 	bl	800e128 <vTaskStartScheduler>
      stat = osOK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	607b      	str	r3, [r7, #4]
 800ccb4:	e002      	b.n	800ccbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ccb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ccbc:	687b      	ldr	r3, [r7, #4]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20002364 	.word	0x20002364

0800cccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b08e      	sub	sp, #56	; 0x38
 800ccd0:	af04      	add	r7, sp, #16
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccdc:	f3ef 8305 	mrs	r3, IPSR
 800cce0:	617b      	str	r3, [r7, #20]
  return(result);
 800cce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d17e      	bne.n	800cde6 <osThreadNew+0x11a>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d07b      	beq.n	800cde6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ccee:	2380      	movs	r3, #128	; 0x80
 800ccf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ccf2:	2318      	movs	r3, #24
 800ccf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d045      	beq.n	800cd92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d002      	beq.n	800cd14 <osThreadNew+0x48>
        name = attr->name;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d008      	beq.n	800cd3a <osThreadNew+0x6e>
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	2b38      	cmp	r3, #56	; 0x38
 800cd2c:	d805      	bhi.n	800cd3a <osThreadNew+0x6e>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <osThreadNew+0x72>
        return (NULL);
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e054      	b.n	800cde8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	695b      	ldr	r3, [r3, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	089b      	lsrs	r3, r3, #2
 800cd4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00e      	beq.n	800cd74 <osThreadNew+0xa8>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	2bbb      	cmp	r3, #187	; 0xbb
 800cd5c:	d90a      	bls.n	800cd74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d006      	beq.n	800cd74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <osThreadNew+0xa8>
        mem = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	61bb      	str	r3, [r7, #24]
 800cd72:	e010      	b.n	800cd96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10c      	bne.n	800cd96 <osThreadNew+0xca>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d108      	bne.n	800cd96 <osThreadNew+0xca>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d104      	bne.n	800cd96 <osThreadNew+0xca>
          mem = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	61bb      	str	r3, [r7, #24]
 800cd90:	e001      	b.n	800cd96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d110      	bne.n	800cdbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cda4:	9202      	str	r2, [sp, #8]
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	6a3a      	ldr	r2, [r7, #32]
 800cdb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 ff4e 	bl	800dc54 <xTaskCreateStatic>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	613b      	str	r3, [r7, #16]
 800cdbc:	e013      	b.n	800cde6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d110      	bne.n	800cde6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	f107 0310 	add.w	r3, r7, #16
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f000 ff99 	bl	800dd0e <xTaskCreate>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d001      	beq.n	800cde6 <osThreadNew+0x11a>
            hTask = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cde6:	693b      	ldr	r3, [r7, #16]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3728      	adds	r7, #40	; 0x28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cdf0:	b480      	push	{r7}
 800cdf2:	b085      	sub	sp, #20
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4a07      	ldr	r2, [pc, #28]	; (800ce1c <vApplicationGetIdleTaskMemory+0x2c>)
 800ce00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	4a06      	ldr	r2, [pc, #24]	; (800ce20 <vApplicationGetIdleTaskMemory+0x30>)
 800ce06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2280      	movs	r2, #128	; 0x80
 800ce0c:	601a      	str	r2, [r3, #0]
}
 800ce0e:	bf00      	nop
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20002368 	.word	0x20002368
 800ce20:	20002424 	.word	0x20002424

0800ce24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4a07      	ldr	r2, [pc, #28]	; (800ce50 <vApplicationGetTimerTaskMemory+0x2c>)
 800ce34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	4a06      	ldr	r2, [pc, #24]	; (800ce54 <vApplicationGetTimerTaskMemory+0x30>)
 800ce3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce42:	601a      	str	r2, [r3, #0]
}
 800ce44:	bf00      	nop
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr
 800ce50:	20002624 	.word	0x20002624
 800ce54:	200026e0 	.word	0x200026e0

0800ce58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f103 0208 	add.w	r2, r3, #8
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f103 0208 	add.w	r2, r3, #8
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0208 	add.w	r2, r3, #8
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	689a      	ldr	r2, [r3, #8]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
}
 800ceee:	bf00      	nop
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d103      	bne.n	800cf1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	e00c      	b.n	800cf34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e002      	b.n	800cf28 <vListInsert+0x2e>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d2f6      	bcs.n	800cf22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	601a      	str	r2, [r3, #0]
}
 800cf60:	bf00      	nop
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	6892      	ldr	r2, [r2, #8]
 800cf82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6852      	ldr	r2, [r2, #4]
 800cf8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d103      	bne.n	800cfa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	1e5a      	subs	r2, r3, #1
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cfea:	f002 fb53 	bl	800f694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cffa:	fb01 f303 	mul.w	r3, r1, r3
 800cffe:	441a      	add	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	3b01      	subs	r3, #1
 800d01c:	68f9      	ldr	r1, [r7, #12]
 800d01e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d020:	fb01 f303 	mul.w	r3, r1, r3
 800d024:	441a      	add	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	22ff      	movs	r2, #255	; 0xff
 800d02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	22ff      	movs	r2, #255	; 0xff
 800d036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d114      	bne.n	800d06a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01a      	beq.n	800d07e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3310      	adds	r3, #16
 800d04c:	4618      	mov	r0, r3
 800d04e:	f001 fb05 	bl	800e65c <xTaskRemoveFromEventList>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d012      	beq.n	800d07e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d058:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <xQueueGenericReset+0xcc>)
 800d05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	e009      	b.n	800d07e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3310      	adds	r3, #16
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fef2 	bl	800ce58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3324      	adds	r3, #36	; 0x24
 800d078:	4618      	mov	r0, r3
 800d07a:	f7ff feed 	bl	800ce58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d07e:	f002 fb39 	bl	800f6f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d082:	2301      	movs	r3, #1
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	e000ed04 	.word	0xe000ed04

0800d090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08e      	sub	sp, #56	; 0x38
 800d094:	af02      	add	r7, sp, #8
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10a      	bne.n	800d0ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0b6:	bf00      	nop
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <xQueueGenericCreateStatic+0x52>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <xQueueGenericCreateStatic+0x56>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <xQueueGenericCreateStatic+0x58>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	623b      	str	r3, [r7, #32]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d102      	bne.n	800d10e <xQueueGenericCreateStatic+0x7e>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <xQueueGenericCreateStatic+0x82>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueGenericCreateStatic+0x84>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10a      	bne.n	800d12e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	61fb      	str	r3, [r7, #28]
}
 800d12a:	bf00      	nop
 800d12c:	e7fe      	b.n	800d12c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d12e:	2350      	movs	r3, #80	; 0x50
 800d130:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b50      	cmp	r3, #80	; 0x50
 800d136:	d00a      	beq.n	800d14e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	61bb      	str	r3, [r7, #24]
}
 800d14a:	bf00      	nop
 800d14c:	e7fe      	b.n	800d14c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d14e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00d      	beq.n	800d176 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d162:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	4613      	mov	r3, r2
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	68b9      	ldr	r1, [r7, #8]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 f83f 	bl	800d1f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d178:	4618      	mov	r0, r3
 800d17a:	3730      	adds	r7, #48	; 0x30
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08a      	sub	sp, #40	; 0x28
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10a      	bne.n	800d1aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	613b      	str	r3, [r7, #16]
}
 800d1a6:	bf00      	nop
 800d1a8:	e7fe      	b.n	800d1a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	fb02 f303 	mul.w	r3, r2, r3
 800d1b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	3350      	adds	r3, #80	; 0x50
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f002 fb8d 	bl	800f8d8 <pvPortMalloc>
 800d1be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d011      	beq.n	800d1ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	3350      	adds	r3, #80	; 0x50
 800d1ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1d8:	79fa      	ldrb	r2, [r7, #7]
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	697a      	ldr	r2, [r7, #20]
 800d1e2:	68b9      	ldr	r1, [r7, #8]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 f805 	bl	800d1f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1ea:	69bb      	ldr	r3, [r7, #24]
	}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3720      	adds	r7, #32
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	e002      	b.n	800d216 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d222:	2101      	movs	r1, #1
 800d224:	69b8      	ldr	r0, [r7, #24]
 800d226:	f7ff fecb 	bl	800cfc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08e      	sub	sp, #56	; 0x38
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d24a:	2300      	movs	r3, #0
 800d24c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueGenericSend+0x32>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <xQueueGenericSend+0x40>
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <xQueueGenericSend+0x44>
 800d27c:	2301      	movs	r3, #1
 800d27e:	e000      	b.n	800d282 <xQueueGenericSend+0x46>
 800d280:	2300      	movs	r3, #0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <xQueueGenericSend+0x60>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d298:	bf00      	nop
 800d29a:	e7fe      	b.n	800d29a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d103      	bne.n	800d2aa <xQueueGenericSend+0x6e>
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d101      	bne.n	800d2ae <xQueueGenericSend+0x72>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e000      	b.n	800d2b0 <xQueueGenericSend+0x74>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10a      	bne.n	800d2ca <xQueueGenericSend+0x8e>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	623b      	str	r3, [r7, #32]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2ca:	f001 fb89 	bl	800e9e0 <xTaskGetSchedulerState>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <xQueueGenericSend+0x9e>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <xQueueGenericSend+0xa2>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e000      	b.n	800d2e0 <xQueueGenericSend+0xa4>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10a      	bne.n	800d2fa <xQueueGenericSend+0xbe>
	__asm volatile
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	61fb      	str	r3, [r7, #28]
}
 800d2f6:	bf00      	nop
 800d2f8:	e7fe      	b.n	800d2f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2fa:	f002 f9cb 	bl	800f694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d306:	429a      	cmp	r2, r3
 800d308:	d302      	bcc.n	800d310 <xQueueGenericSend+0xd4>
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b02      	cmp	r3, #2
 800d30e:	d129      	bne.n	800d364 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d316:	f000 fb2f 	bl	800d978 <prvCopyDataToQueue>
 800d31a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d320:	2b00      	cmp	r3, #0
 800d322:	d010      	beq.n	800d346 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	3324      	adds	r3, #36	; 0x24
 800d328:	4618      	mov	r0, r3
 800d32a:	f001 f997 	bl	800e65c <xTaskRemoveFromEventList>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d013      	beq.n	800d35c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d334:	4b3f      	ldr	r3, [pc, #252]	; (800d434 <xQueueGenericSend+0x1f8>)
 800d336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	e00a      	b.n	800d35c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d007      	beq.n	800d35c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d34c:	4b39      	ldr	r3, [pc, #228]	; (800d434 <xQueueGenericSend+0x1f8>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d35c:	f002 f9ca 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800d360:	2301      	movs	r3, #1
 800d362:	e063      	b.n	800d42c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d103      	bne.n	800d372 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d36a:	f002 f9c3 	bl	800f6f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d36e:	2300      	movs	r3, #0
 800d370:	e05c      	b.n	800d42c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	2b00      	cmp	r3, #0
 800d376:	d106      	bne.n	800d386 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d378:	f107 0314 	add.w	r3, r7, #20
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 f9d1 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d382:	2301      	movs	r3, #1
 800d384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d386:	f002 f9b5 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d38a:	f000 ff3d 	bl	800e208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d38e:	f002 f981 	bl	800f694 <vPortEnterCritical>
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d398:	b25b      	sxtb	r3, r3
 800d39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39e:	d103      	bne.n	800d3a8 <xQueueGenericSend+0x16c>
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ae:	b25b      	sxtb	r3, r3
 800d3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b4:	d103      	bne.n	800d3be <xQueueGenericSend+0x182>
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3be:	f002 f999 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3c2:	1d3a      	adds	r2, r7, #4
 800d3c4:	f107 0314 	add.w	r3, r7, #20
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f001 f9c0 	bl	800e750 <xTaskCheckForTimeOut>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d124      	bne.n	800d420 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3d8:	f000 fbc6 	bl	800db68 <prvIsQueueFull>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d018      	beq.n	800d414 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	3310      	adds	r3, #16
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f001 f8e6 	bl	800e5bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3f2:	f000 fb51 	bl	800da98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3f6:	f000 ff15 	bl	800e224 <xTaskResumeAll>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f47f af7c 	bne.w	800d2fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d402:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <xQueueGenericSend+0x1f8>)
 800d404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d408:	601a      	str	r2, [r3, #0]
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	e772      	b.n	800d2fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d416:	f000 fb3f 	bl	800da98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d41a:	f000 ff03 	bl	800e224 <xTaskResumeAll>
 800d41e:	e76c      	b.n	800d2fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d422:	f000 fb39 	bl	800da98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d426:	f000 fefd 	bl	800e224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d42a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3738      	adds	r7, #56	; 0x38
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b090      	sub	sp, #64	; 0x40
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10a      	bne.n	800d466 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <xQueueGenericSendFromISR+0x3c>
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <xQueueGenericSendFromISR+0x40>
 800d474:	2301      	movs	r3, #1
 800d476:	e000      	b.n	800d47a <xQueueGenericSendFromISR+0x42>
 800d478:	2300      	movs	r3, #0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10a      	bne.n	800d494 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b02      	cmp	r3, #2
 800d498:	d103      	bne.n	800d4a2 <xQueueGenericSendFromISR+0x6a>
 800d49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d101      	bne.n	800d4a6 <xQueueGenericSendFromISR+0x6e>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e000      	b.n	800d4a8 <xQueueGenericSendFromISR+0x70>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	623b      	str	r3, [r7, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4c2:	f002 f9c9 	bl	800f858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	61fa      	str	r2, [r7, #28]
 800d4dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d302      	bcc.n	800d4f4 <xQueueGenericSendFromISR+0xbc>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d12f      	bne.n	800d554 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d502:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	68b9      	ldr	r1, [r7, #8]
 800d508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d50a:	f000 fa35 	bl	800d978 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d50e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d112      	bne.n	800d53e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d016      	beq.n	800d54e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	3324      	adds	r3, #36	; 0x24
 800d524:	4618      	mov	r0, r3
 800d526:	f001 f899 	bl	800e65c <xTaskRemoveFromEventList>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00e      	beq.n	800d54e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00b      	beq.n	800d54e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	e007      	b.n	800d54e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d53e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d542:	3301      	adds	r3, #1
 800d544:	b2db      	uxtb	r3, r3
 800d546:	b25a      	sxtb	r2, r3
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d54e:	2301      	movs	r3, #1
 800d550:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d552:	e001      	b.n	800d558 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d554:	2300      	movs	r3, #0
 800d556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d562:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d566:	4618      	mov	r0, r3
 800d568:	3740      	adds	r7, #64	; 0x40
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08c      	sub	sp, #48	; 0x30
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d57c:	2300      	movs	r3, #0
 800d57e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10a      	bne.n	800d5a0 <xQueueReceive+0x30>
	__asm volatile
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	623b      	str	r3, [r7, #32]
}
 800d59c:	bf00      	nop
 800d59e:	e7fe      	b.n	800d59e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d103      	bne.n	800d5ae <xQueueReceive+0x3e>
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <xQueueReceive+0x42>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <xQueueReceive+0x44>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10a      	bne.n	800d5ce <xQueueReceive+0x5e>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	61fb      	str	r3, [r7, #28]
}
 800d5ca:	bf00      	nop
 800d5cc:	e7fe      	b.n	800d5cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5ce:	f001 fa07 	bl	800e9e0 <xTaskGetSchedulerState>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <xQueueReceive+0x6e>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <xQueueReceive+0x72>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e000      	b.n	800d5e4 <xQueueReceive+0x74>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <xQueueReceive+0x8e>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	61bb      	str	r3, [r7, #24]
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5fe:	f002 f849 	bl	800f694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01f      	beq.n	800d64e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d612:	f000 fa1b 	bl	800da4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	1e5a      	subs	r2, r3, #1
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00f      	beq.n	800d646 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	3310      	adds	r3, #16
 800d62a:	4618      	mov	r0, r3
 800d62c:	f001 f816 	bl	800e65c <xTaskRemoveFromEventList>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d007      	beq.n	800d646 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d636:	4b3d      	ldr	r3, [pc, #244]	; (800d72c <xQueueReceive+0x1bc>)
 800d638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d646:	f002 f855 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e069      	b.n	800d722 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d103      	bne.n	800d65c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d654:	f002 f84e 	bl	800f6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d658:	2300      	movs	r3, #0
 800d65a:	e062      	b.n	800d722 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d662:	f107 0310 	add.w	r3, r7, #16
 800d666:	4618      	mov	r0, r3
 800d668:	f001 f85c 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d66c:	2301      	movs	r3, #1
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d670:	f002 f840 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d674:	f000 fdc8 	bl	800e208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d678:	f002 f80c 	bl	800f694 <vPortEnterCritical>
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d682:	b25b      	sxtb	r3, r3
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d103      	bne.n	800d692 <xQueueReceive+0x122>
 800d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d698:	b25b      	sxtb	r3, r3
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d103      	bne.n	800d6a8 <xQueueReceive+0x138>
 800d6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6a8:	f002 f824 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6ac:	1d3a      	adds	r2, r7, #4
 800d6ae:	f107 0310 	add.w	r3, r7, #16
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 f84b 	bl	800e750 <xTaskCheckForTimeOut>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d123      	bne.n	800d708 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6c2:	f000 fa3b 	bl	800db3c <prvIsQueueEmpty>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d017      	beq.n	800d6fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ce:	3324      	adds	r3, #36	; 0x24
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 ff71 	bl	800e5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6dc:	f000 f9dc 	bl	800da98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6e0:	f000 fda0 	bl	800e224 <xTaskResumeAll>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d189      	bne.n	800d5fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6ea:	4b10      	ldr	r3, [pc, #64]	; (800d72c <xQueueReceive+0x1bc>)
 800d6ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	e780      	b.n	800d5fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fe:	f000 f9cb 	bl	800da98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d702:	f000 fd8f 	bl	800e224 <xTaskResumeAll>
 800d706:	e77a      	b.n	800d5fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d70a:	f000 f9c5 	bl	800da98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d70e:	f000 fd89 	bl	800e224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d714:	f000 fa12 	bl	800db3c <prvIsQueueEmpty>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f43f af6f 	beq.w	800d5fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d722:	4618      	mov	r0, r3
 800d724:	3730      	adds	r7, #48	; 0x30
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	e000ed04 	.word	0xe000ed04

0800d730 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b08e      	sub	sp, #56	; 0x38
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d73a:	2300      	movs	r3, #0
 800d73c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d742:	2300      	movs	r3, #0
 800d744:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	623b      	str	r3, [r7, #32]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00a      	beq.n	800d780 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	61fb      	str	r3, [r7, #28]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d780:	f001 f92e 	bl	800e9e0 <xTaskGetSchedulerState>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <xQueueSemaphoreTake+0x60>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <xQueueSemaphoreTake+0x64>
 800d790:	2301      	movs	r3, #1
 800d792:	e000      	b.n	800d796 <xQueueSemaphoreTake+0x66>
 800d794:	2300      	movs	r3, #0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10a      	bne.n	800d7b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	61bb      	str	r3, [r7, #24]
}
 800d7ac:	bf00      	nop
 800d7ae:	e7fe      	b.n	800d7ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7b0:	f001 ff70 	bl	800f694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d024      	beq.n	800d80a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	1e5a      	subs	r2, r3, #1
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d104      	bne.n	800d7da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7d0:	f001 fa7c 	bl	800eccc <pvTaskIncrementMutexHeldCount>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00f      	beq.n	800d802 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	3310      	adds	r3, #16
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 ff38 	bl	800e65c <xTaskRemoveFromEventList>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d007      	beq.n	800d802 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7f2:	4b54      	ldr	r3, [pc, #336]	; (800d944 <xQueueSemaphoreTake+0x214>)
 800d7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f8:	601a      	str	r2, [r3, #0]
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d802:	f001 ff77 	bl	800f6f4 <vPortExitCritical>
				return pdPASS;
 800d806:	2301      	movs	r3, #1
 800d808:	e097      	b.n	800d93a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d111      	bne.n	800d834 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00a      	beq.n	800d82c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	617b      	str	r3, [r7, #20]
}
 800d828:	bf00      	nop
 800d82a:	e7fe      	b.n	800d82a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d82c:	f001 ff62 	bl	800f6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d830:	2300      	movs	r3, #0
 800d832:	e082      	b.n	800d93a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d83a:	f107 030c 	add.w	r3, r7, #12
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 ff70 	bl	800e724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d848:	f001 ff54 	bl	800f6f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d84c:	f000 fcdc 	bl	800e208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d850:	f001 ff20 	bl	800f694 <vPortEnterCritical>
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d85a:	b25b      	sxtb	r3, r3
 800d85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d860:	d103      	bne.n	800d86a <xQueueSemaphoreTake+0x13a>
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	2200      	movs	r2, #0
 800d866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d870:	b25b      	sxtb	r3, r3
 800d872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d876:	d103      	bne.n	800d880 <xQueueSemaphoreTake+0x150>
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d880:	f001 ff38 	bl	800f6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d884:	463a      	mov	r2, r7
 800d886:	f107 030c 	add.w	r3, r7, #12
 800d88a:	4611      	mov	r1, r2
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 ff5f 	bl	800e750 <xTaskCheckForTimeOut>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d132      	bne.n	800d8fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89a:	f000 f94f 	bl	800db3c <prvIsQueueEmpty>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d026      	beq.n	800d8f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d109      	bne.n	800d8c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d8ac:	f001 fef2 	bl	800f694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f001 f8b1 	bl	800ea1c <xTaskPriorityInherit>
 800d8ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d8bc:	f001 ff1a 	bl	800f6f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	3324      	adds	r3, #36	; 0x24
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 fe77 	bl	800e5bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8d0:	f000 f8e2 	bl	800da98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8d4:	f000 fca6 	bl	800e224 <xTaskResumeAll>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f47f af68 	bne.w	800d7b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8e0:	4b18      	ldr	r3, [pc, #96]	; (800d944 <xQueueSemaphoreTake+0x214>)
 800d8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e6:	601a      	str	r2, [r3, #0]
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	e75e      	b.n	800d7b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f4:	f000 f8d0 	bl	800da98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8f8:	f000 fc94 	bl	800e224 <xTaskResumeAll>
 800d8fc:	e758      	b.n	800d7b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d900:	f000 f8ca 	bl	800da98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d904:	f000 fc8e 	bl	800e224 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d90a:	f000 f917 	bl	800db3c <prvIsQueueEmpty>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	f43f af4d 	beq.w	800d7b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00d      	beq.n	800d938 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d91c:	f001 feba 	bl	800f694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d922:	f000 f811 	bl	800d948 <prvGetDisinheritPriorityAfterTimeout>
 800d926:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d92e:	4618      	mov	r0, r3
 800d930:	f001 f94a 	bl	800ebc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d934:	f001 fede 	bl	800f6f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3738      	adds	r7, #56	; 0x38
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	e000ed04 	.word	0xe000ed04

0800d948 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d954:	2b00      	cmp	r3, #0
 800d956:	d006      	beq.n	800d966 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d962:	60fb      	str	r3, [r7, #12]
 800d964:	e001      	b.n	800d96a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d966:	2300      	movs	r3, #0
 800d968:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d96a:	68fb      	ldr	r3, [r7, #12]
	}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d984:	2300      	movs	r3, #0
 800d986:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10d      	bne.n	800d9b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d14d      	bne.n	800da3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f001 f8a2 	bl	800eaec <xTaskPriorityDisinherit>
 800d9a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	609a      	str	r2, [r3, #8]
 800d9b0:	e043      	b.n	800da3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d119      	bne.n	800d9ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6858      	ldr	r0, [r3, #4]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	f002 feae 	bl	8010724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685a      	ldr	r2, [r3, #4]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d0:	441a      	add	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d32b      	bcc.n	800da3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	605a      	str	r2, [r3, #4]
 800d9ea:	e026      	b.n	800da3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	68d8      	ldr	r0, [r3, #12]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	68b9      	ldr	r1, [r7, #8]
 800d9f8:	f002 fe94 	bl	8010724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68da      	ldr	r2, [r3, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da04:	425b      	negs	r3, r3
 800da06:	441a      	add	r2, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	429a      	cmp	r2, r3
 800da16:	d207      	bcs.n	800da28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	689a      	ldr	r2, [r3, #8]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da20:	425b      	negs	r3, r3
 800da22:	441a      	add	r2, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d105      	bne.n	800da3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	3b01      	subs	r3, #1
 800da38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da42:	697b      	ldr	r3, [r7, #20]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d018      	beq.n	800da90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da66:	441a      	add	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	68da      	ldr	r2, [r3, #12]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	429a      	cmp	r2, r3
 800da76:	d303      	bcc.n	800da80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68d9      	ldr	r1, [r3, #12]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da88:	461a      	mov	r2, r3
 800da8a:	6838      	ldr	r0, [r7, #0]
 800da8c:	f002 fe4a 	bl	8010724 <memcpy>
	}
}
 800da90:	bf00      	nop
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800daa0:	f001 fdf8 	bl	800f694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800daac:	e011      	b.n	800dad2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d012      	beq.n	800dadc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3324      	adds	r3, #36	; 0x24
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 fdce 	bl	800e65c <xTaskRemoveFromEventList>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dac6:	f000 fea5 	bl	800e814 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	3b01      	subs	r3, #1
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	dce9      	bgt.n	800daae <prvUnlockQueue+0x16>
 800dada:	e000      	b.n	800dade <prvUnlockQueue+0x46>
					break;
 800dadc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	22ff      	movs	r2, #255	; 0xff
 800dae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dae6:	f001 fe05 	bl	800f6f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800daea:	f001 fdd3 	bl	800f694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800daf6:	e011      	b.n	800db1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d012      	beq.n	800db26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3310      	adds	r3, #16
 800db04:	4618      	mov	r0, r3
 800db06:	f000 fda9 	bl	800e65c <xTaskRemoveFromEventList>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db10:	f000 fe80 	bl	800e814 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db14:	7bbb      	ldrb	r3, [r7, #14]
 800db16:	3b01      	subs	r3, #1
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db20:	2b00      	cmp	r3, #0
 800db22:	dce9      	bgt.n	800daf8 <prvUnlockQueue+0x60>
 800db24:	e000      	b.n	800db28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	22ff      	movs	r2, #255	; 0xff
 800db2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db30:	f001 fde0 	bl	800f6f4 <vPortExitCritical>
}
 800db34:	bf00      	nop
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db44:	f001 fda6 	bl	800f694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d102      	bne.n	800db56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db50:	2301      	movs	r3, #1
 800db52:	60fb      	str	r3, [r7, #12]
 800db54:	e001      	b.n	800db5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db5a:	f001 fdcb 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800db5e:	68fb      	ldr	r3, [r7, #12]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db70:	f001 fd90 	bl	800f694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d102      	bne.n	800db86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db80:	2301      	movs	r3, #1
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	e001      	b.n	800db8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db86:	2300      	movs	r3, #0
 800db88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db8a:	f001 fdb3 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800db8e:	68fb      	ldr	r3, [r7, #12]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	e014      	b.n	800dbd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dba8:	4a0f      	ldr	r2, [pc, #60]	; (800dbe8 <vQueueAddToRegistry+0x50>)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10b      	bne.n	800dbcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbb4:	490c      	ldr	r1, [pc, #48]	; (800dbe8 <vQueueAddToRegistry+0x50>)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbbe:	4a0a      	ldr	r2, [pc, #40]	; (800dbe8 <vQueueAddToRegistry+0x50>)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	00db      	lsls	r3, r3, #3
 800dbc4:	4413      	add	r3, r2
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dbca:	e006      	b.n	800dbda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3301      	adds	r3, #1
 800dbd0:	60fb      	str	r3, [r7, #12]
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b07      	cmp	r3, #7
 800dbd6:	d9e7      	bls.n	800dba8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	20002ae0 	.word	0x20002ae0

0800dbec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbfc:	f001 fd4a 	bl	800f694 <vPortEnterCritical>
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc06:	b25b      	sxtb	r3, r3
 800dc08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0c:	d103      	bne.n	800dc16 <vQueueWaitForMessageRestricted+0x2a>
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc1c:	b25b      	sxtb	r3, r3
 800dc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc22:	d103      	bne.n	800dc2c <vQueueWaitForMessageRestricted+0x40>
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc2c:	f001 fd62 	bl	800f6f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d106      	bne.n	800dc46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	3324      	adds	r3, #36	; 0x24
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 fcdf 	bl	800e604 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc46:	6978      	ldr	r0, [r7, #20]
 800dc48:	f7ff ff26 	bl	800da98 <prvUnlockQueue>
	}
 800dc4c:	bf00      	nop
 800dc4e:	3718      	adds	r7, #24
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08e      	sub	sp, #56	; 0x38
 800dc58:	af04      	add	r7, sp, #16
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	623b      	str	r3, [r7, #32]
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10a      	bne.n	800dc9a <xTaskCreateStatic+0x46>
	__asm volatile
 800dc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc88:	f383 8811 	msr	BASEPRI, r3
 800dc8c:	f3bf 8f6f 	isb	sy
 800dc90:	f3bf 8f4f 	dsb	sy
 800dc94:	61fb      	str	r3, [r7, #28]
}
 800dc96:	bf00      	nop
 800dc98:	e7fe      	b.n	800dc98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc9a:	23bc      	movs	r3, #188	; 0xbc
 800dc9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	2bbc      	cmp	r3, #188	; 0xbc
 800dca2:	d00a      	beq.n	800dcba <xTaskCreateStatic+0x66>
	__asm volatile
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	61bb      	str	r3, [r7, #24]
}
 800dcb6:	bf00      	nop
 800dcb8:	e7fe      	b.n	800dcb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01e      	beq.n	800dd00 <xTaskCreateStatic+0xac>
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01b      	beq.n	800dd00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	2202      	movs	r2, #2
 800dcd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9303      	str	r3, [sp, #12]
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	9302      	str	r3, [sp, #8]
 800dce2:	f107 0314 	add.w	r3, r7, #20
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	68b9      	ldr	r1, [r7, #8]
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f000 f850 	bl	800dd98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcfa:	f000 f8f3 	bl	800dee4 <prvAddNewTaskToReadyList>
 800dcfe:	e001      	b.n	800dd04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dd00:	2300      	movs	r3, #0
 800dd02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd04:	697b      	ldr	r3, [r7, #20]
	}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3728      	adds	r7, #40	; 0x28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b08c      	sub	sp, #48	; 0x30
 800dd12:	af04      	add	r7, sp, #16
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	603b      	str	r3, [r7, #0]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd1e:	88fb      	ldrh	r3, [r7, #6]
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f001 fdd8 	bl	800f8d8 <pvPortMalloc>
 800dd28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00e      	beq.n	800dd4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd30:	20bc      	movs	r0, #188	; 0xbc
 800dd32:	f001 fdd1 	bl	800f8d8 <pvPortMalloc>
 800dd36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	697a      	ldr	r2, [r7, #20]
 800dd42:	631a      	str	r2, [r3, #48]	; 0x30
 800dd44:	e005      	b.n	800dd52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd46:	6978      	ldr	r0, [r7, #20]
 800dd48:	f001 fe92 	bl	800fa70 <vPortFree>
 800dd4c:	e001      	b.n	800dd52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d017      	beq.n	800dd88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd60:	88fa      	ldrh	r2, [r7, #6]
 800dd62:	2300      	movs	r3, #0
 800dd64:	9303      	str	r3, [sp, #12]
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	9302      	str	r3, [sp, #8]
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	68b9      	ldr	r1, [r7, #8]
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f000 f80e 	bl	800dd98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd7c:	69f8      	ldr	r0, [r7, #28]
 800dd7e:	f000 f8b1 	bl	800dee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd82:	2301      	movs	r3, #1
 800dd84:	61bb      	str	r3, [r7, #24]
 800dd86:	e002      	b.n	800dd8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd88:	f04f 33ff 	mov.w	r3, #4294967295
 800dd8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd8e:	69bb      	ldr	r3, [r7, #24]
	}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3720      	adds	r7, #32
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	461a      	mov	r2, r3
 800ddb0:	21a5      	movs	r1, #165	; 0xa5
 800ddb2:	f002 fcc5 	bl	8010740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	f023 0307 	bic.w	r3, r3, #7
 800ddce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	f003 0307 	and.w	r3, r3, #7
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	617b      	str	r3, [r7, #20]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d01f      	beq.n	800de36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	61fb      	str	r3, [r7, #28]
 800ddfa:	e012      	b.n	800de22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	4413      	add	r3, r2
 800de02:	7819      	ldrb	r1, [r3, #0]
 800de04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4413      	add	r3, r2
 800de0a:	3334      	adds	r3, #52	; 0x34
 800de0c:	460a      	mov	r2, r1
 800de0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	4413      	add	r3, r2
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d006      	beq.n	800de2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	3301      	adds	r3, #1
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	2b0f      	cmp	r3, #15
 800de26:	d9e9      	bls.n	800ddfc <prvInitialiseNewTask+0x64>
 800de28:	e000      	b.n	800de2c <prvInitialiseNewTask+0x94>
			{
				break;
 800de2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	2200      	movs	r2, #0
 800de30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de34:	e003      	b.n	800de3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	2b37      	cmp	r3, #55	; 0x37
 800de42:	d901      	bls.n	800de48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de44:	2337      	movs	r3, #55	; 0x37
 800de46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	2200      	movs	r2, #0
 800de58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5c:	3304      	adds	r3, #4
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff f81a 	bl	800ce98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	3318      	adds	r3, #24
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff f815 	bl	800ce98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	2200      	movs	r2, #0
 800de88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de96:	3354      	adds	r3, #84	; 0x54
 800de98:	2260      	movs	r2, #96	; 0x60
 800de9a:	2100      	movs	r1, #0
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fc4f 	bl	8010740 <memset>
 800dea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea4:	4a0c      	ldr	r2, [pc, #48]	; (800ded8 <prvInitialiseNewTask+0x140>)
 800dea6:	659a      	str	r2, [r3, #88]	; 0x58
 800dea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deaa:	4a0c      	ldr	r2, [pc, #48]	; (800dedc <prvInitialiseNewTask+0x144>)
 800deac:	65da      	str	r2, [r3, #92]	; 0x5c
 800deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb0:	4a0b      	ldr	r2, [pc, #44]	; (800dee0 <prvInitialiseNewTask+0x148>)
 800deb2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	69b8      	ldr	r0, [r7, #24]
 800deba:	f001 fabd 	bl	800f438 <pxPortInitialiseStack>
 800debe:	4602      	mov	r2, r0
 800dec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ded0:	bf00      	nop
 800ded2:	3720      	adds	r7, #32
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	080118c0 	.word	0x080118c0
 800dedc:	080118e0 	.word	0x080118e0
 800dee0:	080118a0 	.word	0x080118a0

0800dee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800deec:	f001 fbd2 	bl	800f694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800def0:	4b2d      	ldr	r3, [pc, #180]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3301      	adds	r3, #1
 800def6:	4a2c      	ldr	r2, [pc, #176]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800def8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800defa:	4b2c      	ldr	r3, [pc, #176]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d109      	bne.n	800df16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df02:	4a2a      	ldr	r2, [pc, #168]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df08:	4b27      	ldr	r3, [pc, #156]	; (800dfa8 <prvAddNewTaskToReadyList+0xc4>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d110      	bne.n	800df32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df10:	f000 fca4 	bl	800e85c <prvInitialiseTaskLists>
 800df14:	e00d      	b.n	800df32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df16:	4b26      	ldr	r3, [pc, #152]	; (800dfb0 <prvAddNewTaskToReadyList+0xcc>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d109      	bne.n	800df32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df1e:	4b23      	ldr	r3, [pc, #140]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	429a      	cmp	r2, r3
 800df2a:	d802      	bhi.n	800df32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df2c:	4a1f      	ldr	r2, [pc, #124]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df32:	4b20      	ldr	r3, [pc, #128]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	4a1e      	ldr	r2, [pc, #120]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df3c:	4b1d      	ldr	r3, [pc, #116]	; (800dfb4 <prvAddNewTaskToReadyList+0xd0>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df48:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <prvAddNewTaskToReadyList+0xd4>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d903      	bls.n	800df58 <prvAddNewTaskToReadyList+0x74>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df54:	4a18      	ldr	r2, [pc, #96]	; (800dfb8 <prvAddNewTaskToReadyList+0xd4>)
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5c:	4613      	mov	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	4413      	add	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4a15      	ldr	r2, [pc, #84]	; (800dfbc <prvAddNewTaskToReadyList+0xd8>)
 800df66:	441a      	add	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4619      	mov	r1, r3
 800df6e:	4610      	mov	r0, r2
 800df70:	f7fe ff9f 	bl	800ceb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df74:	f001 fbbe 	bl	800f6f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df78:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <prvAddNewTaskToReadyList+0xcc>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00e      	beq.n	800df9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df80:	4b0a      	ldr	r3, [pc, #40]	; (800dfac <prvAddNewTaskToReadyList+0xc8>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d207      	bcs.n	800df9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <prvAddNewTaskToReadyList+0xdc>)
 800df90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df9e:	bf00      	nop
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20002ff4 	.word	0x20002ff4
 800dfac:	20002b20 	.word	0x20002b20
 800dfb0:	20003000 	.word	0x20003000
 800dfb4:	20003010 	.word	0x20003010
 800dfb8:	20002ffc 	.word	0x20002ffc
 800dfbc:	20002b24 	.word	0x20002b24
 800dfc0:	e000ed04 	.word	0xe000ed04

0800dfc4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08a      	sub	sp, #40	; 0x28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <vTaskDelayUntil+0x2a>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	617b      	str	r3, [r7, #20]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10a      	bne.n	800e00a <vTaskDelayUntil+0x46>
	__asm volatile
 800dff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	613b      	str	r3, [r7, #16]
}
 800e006:	bf00      	nop
 800e008:	e7fe      	b.n	800e008 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e00a:	4b2a      	ldr	r3, [pc, #168]	; (800e0b4 <vTaskDelayUntil+0xf0>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00a      	beq.n	800e028 <vTaskDelayUntil+0x64>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60fb      	str	r3, [r7, #12]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e028:	f000 f8ee 	bl	800e208 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e02c:	4b22      	ldr	r3, [pc, #136]	; (800e0b8 <vTaskDelayUntil+0xf4>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4413      	add	r3, r2
 800e03a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6a3a      	ldr	r2, [r7, #32]
 800e042:	429a      	cmp	r2, r3
 800e044:	d20b      	bcs.n	800e05e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d211      	bcs.n	800e074 <vTaskDelayUntil+0xb0>
 800e050:	69fa      	ldr	r2, [r7, #28]
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	429a      	cmp	r2, r3
 800e056:	d90d      	bls.n	800e074 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e058:	2301      	movs	r3, #1
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
 800e05c:	e00a      	b.n	800e074 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	429a      	cmp	r2, r3
 800e066:	d303      	bcc.n	800e070 <vTaskDelayUntil+0xac>
 800e068:	69fa      	ldr	r2, [r7, #28]
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d901      	bls.n	800e074 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e070:	2301      	movs	r3, #1
 800e072:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	69fa      	ldr	r2, [r7, #28]
 800e078:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d006      	beq.n	800e08e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e080:	69fa      	ldr	r2, [r7, #28]
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	2100      	movs	r1, #0
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fe33 	bl	800ecf4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e08e:	f000 f8c9 	bl	800e224 <xTaskResumeAll>
 800e092:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d107      	bne.n	800e0aa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e09a:	4b08      	ldr	r3, [pc, #32]	; (800e0bc <vTaskDelayUntil+0xf8>)
 800e09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0aa:	bf00      	nop
 800e0ac:	3728      	adds	r7, #40	; 0x28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	2000301c 	.word	0x2000301c
 800e0b8:	20002ff8 	.word	0x20002ff8
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d017      	beq.n	800e102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e0d2:	4b13      	ldr	r3, [pc, #76]	; (800e120 <vTaskDelay+0x60>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00a      	beq.n	800e0f0 <vTaskDelay+0x30>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	60bb      	str	r3, [r7, #8]
}
 800e0ec:	bf00      	nop
 800e0ee:	e7fe      	b.n	800e0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e0f0:	f000 f88a 	bl	800e208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fdfc 	bl	800ecf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e0fc:	f000 f892 	bl	800e224 <xTaskResumeAll>
 800e100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d107      	bne.n	800e118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e108:	4b06      	ldr	r3, [pc, #24]	; (800e124 <vTaskDelay+0x64>)
 800e10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e118:	bf00      	nop
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	2000301c 	.word	0x2000301c
 800e124:	e000ed04 	.word	0xe000ed04

0800e128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e132:	2300      	movs	r3, #0
 800e134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e136:	463a      	mov	r2, r7
 800e138:	1d39      	adds	r1, r7, #4
 800e13a:	f107 0308 	add.w	r3, r7, #8
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fe fe56 	bl	800cdf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	9202      	str	r2, [sp, #8]
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	2300      	movs	r3, #0
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	2300      	movs	r3, #0
 800e154:	460a      	mov	r2, r1
 800e156:	4924      	ldr	r1, [pc, #144]	; (800e1e8 <vTaskStartScheduler+0xc0>)
 800e158:	4824      	ldr	r0, [pc, #144]	; (800e1ec <vTaskStartScheduler+0xc4>)
 800e15a:	f7ff fd7b 	bl	800dc54 <xTaskCreateStatic>
 800e15e:	4603      	mov	r3, r0
 800e160:	4a23      	ldr	r2, [pc, #140]	; (800e1f0 <vTaskStartScheduler+0xc8>)
 800e162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e164:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <vTaskStartScheduler+0xc8>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e16c:	2301      	movs	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	e001      	b.n	800e176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d102      	bne.n	800e182 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e17c:	f000 fe0e 	bl	800ed9c <xTimerCreateTimerTask>
 800e180:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2b01      	cmp	r3, #1
 800e186:	d11b      	bne.n	800e1c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800e188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18c:	f383 8811 	msr	BASEPRI, r3
 800e190:	f3bf 8f6f 	isb	sy
 800e194:	f3bf 8f4f 	dsb	sy
 800e198:	613b      	str	r3, [r7, #16]
}
 800e19a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e19c:	4b15      	ldr	r3, [pc, #84]	; (800e1f4 <vTaskStartScheduler+0xcc>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3354      	adds	r3, #84	; 0x54
 800e1a2:	4a15      	ldr	r2, [pc, #84]	; (800e1f8 <vTaskStartScheduler+0xd0>)
 800e1a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1a6:	4b15      	ldr	r3, [pc, #84]	; (800e1fc <vTaskStartScheduler+0xd4>)
 800e1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <vTaskStartScheduler+0xd8>)
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1b4:	4b13      	ldr	r3, [pc, #76]	; (800e204 <vTaskStartScheduler+0xdc>)
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1ba:	f001 f9c9 	bl	800f550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1be:	e00e      	b.n	800e1de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c6:	d10a      	bne.n	800e1de <vTaskStartScheduler+0xb6>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	60fb      	str	r3, [r7, #12]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <vTaskStartScheduler+0xb4>
}
 800e1de:	bf00      	nop
 800e1e0:	3718      	adds	r7, #24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	080113ac 	.word	0x080113ac
 800e1ec:	0800e82d 	.word	0x0800e82d
 800e1f0:	20003018 	.word	0x20003018
 800e1f4:	20002b20 	.word	0x20002b20
 800e1f8:	20000118 	.word	0x20000118
 800e1fc:	20003014 	.word	0x20003014
 800e200:	20003000 	.word	0x20003000
 800e204:	20002ff8 	.word	0x20002ff8

0800e208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e208:	b480      	push	{r7}
 800e20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e20c:	4b04      	ldr	r3, [pc, #16]	; (800e220 <vTaskSuspendAll+0x18>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3301      	adds	r3, #1
 800e212:	4a03      	ldr	r2, [pc, #12]	; (800e220 <vTaskSuspendAll+0x18>)
 800e214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e216:	bf00      	nop
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	2000301c 	.word	0x2000301c

0800e224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e22e:	2300      	movs	r3, #0
 800e230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e232:	4b42      	ldr	r3, [pc, #264]	; (800e33c <xTaskResumeAll+0x118>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10a      	bne.n	800e250 <xTaskResumeAll+0x2c>
	__asm volatile
 800e23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	603b      	str	r3, [r7, #0]
}
 800e24c:	bf00      	nop
 800e24e:	e7fe      	b.n	800e24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e250:	f001 fa20 	bl	800f694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e254:	4b39      	ldr	r3, [pc, #228]	; (800e33c <xTaskResumeAll+0x118>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3b01      	subs	r3, #1
 800e25a:	4a38      	ldr	r2, [pc, #224]	; (800e33c <xTaskResumeAll+0x118>)
 800e25c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e25e:	4b37      	ldr	r3, [pc, #220]	; (800e33c <xTaskResumeAll+0x118>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d162      	bne.n	800e32c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e266:	4b36      	ldr	r3, [pc, #216]	; (800e340 <xTaskResumeAll+0x11c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d05e      	beq.n	800e32c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e26e:	e02f      	b.n	800e2d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e270:	4b34      	ldr	r3, [pc, #208]	; (800e344 <xTaskResumeAll+0x120>)
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	3318      	adds	r3, #24
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fe fe75 	bl	800cf6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3304      	adds	r3, #4
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fe70 	bl	800cf6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e290:	4b2d      	ldr	r3, [pc, #180]	; (800e348 <xTaskResumeAll+0x124>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d903      	bls.n	800e2a0 <xTaskResumeAll+0x7c>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	4a2a      	ldr	r2, [pc, #168]	; (800e348 <xTaskResumeAll+0x124>)
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4a27      	ldr	r2, [pc, #156]	; (800e34c <xTaskResumeAll+0x128>)
 800e2ae:	441a      	add	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4610      	mov	r0, r2
 800e2b8:	f7fe fdfb 	bl	800ceb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c0:	4b23      	ldr	r3, [pc, #140]	; (800e350 <xTaskResumeAll+0x12c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d302      	bcc.n	800e2d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e2ca:	4b22      	ldr	r3, [pc, #136]	; (800e354 <xTaskResumeAll+0x130>)
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2d0:	4b1c      	ldr	r3, [pc, #112]	; (800e344 <xTaskResumeAll+0x120>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1cb      	bne.n	800e270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2de:	f000 fb5f 	bl	800e9a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e2e2:	4b1d      	ldr	r3, [pc, #116]	; (800e358 <xTaskResumeAll+0x134>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d010      	beq.n	800e310 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e2ee:	f000 f847 	bl	800e380 <xTaskIncrementTick>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e2f8:	4b16      	ldr	r3, [pc, #88]	; (800e354 <xTaskResumeAll+0x130>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3b01      	subs	r3, #1
 800e302:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1f1      	bne.n	800e2ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e30a:	4b13      	ldr	r3, [pc, #76]	; (800e358 <xTaskResumeAll+0x134>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e310:	4b10      	ldr	r3, [pc, #64]	; (800e354 <xTaskResumeAll+0x130>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d009      	beq.n	800e32c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e318:	2301      	movs	r3, #1
 800e31a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <xTaskResumeAll+0x138>)
 800e31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e32c:	f001 f9e2 	bl	800f6f4 <vPortExitCritical>

	return xAlreadyYielded;
 800e330:	68bb      	ldr	r3, [r7, #8]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	2000301c 	.word	0x2000301c
 800e340:	20002ff4 	.word	0x20002ff4
 800e344:	20002fb4 	.word	0x20002fb4
 800e348:	20002ffc 	.word	0x20002ffc
 800e34c:	20002b24 	.word	0x20002b24
 800e350:	20002b20 	.word	0x20002b20
 800e354:	20003008 	.word	0x20003008
 800e358:	20003004 	.word	0x20003004
 800e35c:	e000ed04 	.word	0xe000ed04

0800e360 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e366:	4b05      	ldr	r3, [pc, #20]	; (800e37c <xTaskGetTickCount+0x1c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e36c:	687b      	ldr	r3, [r7, #4]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	20002ff8 	.word	0x20002ff8

0800e380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e386:	2300      	movs	r3, #0
 800e388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e38a:	4b4f      	ldr	r3, [pc, #316]	; (800e4c8 <xTaskIncrementTick+0x148>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f040 808f 	bne.w	800e4b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e394:	4b4d      	ldr	r3, [pc, #308]	; (800e4cc <xTaskIncrementTick+0x14c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3301      	adds	r3, #1
 800e39a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e39c:	4a4b      	ldr	r2, [pc, #300]	; (800e4cc <xTaskIncrementTick+0x14c>)
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d120      	bne.n	800e3ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3a8:	4b49      	ldr	r3, [pc, #292]	; (800e4d0 <xTaskIncrementTick+0x150>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00a      	beq.n	800e3c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	603b      	str	r3, [r7, #0]
}
 800e3c4:	bf00      	nop
 800e3c6:	e7fe      	b.n	800e3c6 <xTaskIncrementTick+0x46>
 800e3c8:	4b41      	ldr	r3, [pc, #260]	; (800e4d0 <xTaskIncrementTick+0x150>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	4b41      	ldr	r3, [pc, #260]	; (800e4d4 <xTaskIncrementTick+0x154>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	4a3f      	ldr	r2, [pc, #252]	; (800e4d0 <xTaskIncrementTick+0x150>)
 800e3d4:	6013      	str	r3, [r2, #0]
 800e3d6:	4a3f      	ldr	r2, [pc, #252]	; (800e4d4 <xTaskIncrementTick+0x154>)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	4b3e      	ldr	r3, [pc, #248]	; (800e4d8 <xTaskIncrementTick+0x158>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	4a3d      	ldr	r2, [pc, #244]	; (800e4d8 <xTaskIncrementTick+0x158>)
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	f000 fadb 	bl	800e9a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3ea:	4b3c      	ldr	r3, [pc, #240]	; (800e4dc <xTaskIncrementTick+0x15c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d349      	bcc.n	800e488 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3f4:	4b36      	ldr	r3, [pc, #216]	; (800e4d0 <xTaskIncrementTick+0x150>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d104      	bne.n	800e408 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3fe:	4b37      	ldr	r3, [pc, #220]	; (800e4dc <xTaskIncrementTick+0x15c>)
 800e400:	f04f 32ff 	mov.w	r2, #4294967295
 800e404:	601a      	str	r2, [r3, #0]
					break;
 800e406:	e03f      	b.n	800e488 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e408:	4b31      	ldr	r3, [pc, #196]	; (800e4d0 <xTaskIncrementTick+0x150>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e418:	693a      	ldr	r2, [r7, #16]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d203      	bcs.n	800e428 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e420:	4a2e      	ldr	r2, [pc, #184]	; (800e4dc <xTaskIncrementTick+0x15c>)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e426:	e02f      	b.n	800e488 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fd9d 	bl	800cf6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e436:	2b00      	cmp	r3, #0
 800e438:	d004      	beq.n	800e444 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	3318      	adds	r3, #24
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fd94 	bl	800cf6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e448:	4b25      	ldr	r3, [pc, #148]	; (800e4e0 <xTaskIncrementTick+0x160>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d903      	bls.n	800e458 <xTaskIncrementTick+0xd8>
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e454:	4a22      	ldr	r2, [pc, #136]	; (800e4e0 <xTaskIncrementTick+0x160>)
 800e456:	6013      	str	r3, [r2, #0]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45c:	4613      	mov	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4a1f      	ldr	r2, [pc, #124]	; (800e4e4 <xTaskIncrementTick+0x164>)
 800e466:	441a      	add	r2, r3
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	3304      	adds	r3, #4
 800e46c:	4619      	mov	r1, r3
 800e46e:	4610      	mov	r0, r2
 800e470:	f7fe fd1f 	bl	800ceb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e478:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <xTaskIncrementTick+0x168>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e47e:	429a      	cmp	r2, r3
 800e480:	d3b8      	bcc.n	800e3f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e482:	2301      	movs	r3, #1
 800e484:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e486:	e7b5      	b.n	800e3f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e488:	4b17      	ldr	r3, [pc, #92]	; (800e4e8 <xTaskIncrementTick+0x168>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e48e:	4915      	ldr	r1, [pc, #84]	; (800e4e4 <xTaskIncrementTick+0x164>)
 800e490:	4613      	mov	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d901      	bls.n	800e4a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4a4:	4b11      	ldr	r3, [pc, #68]	; (800e4ec <xTaskIncrementTick+0x16c>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d007      	beq.n	800e4bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	e004      	b.n	800e4bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e4b2:	4b0f      	ldr	r3, [pc, #60]	; (800e4f0 <xTaskIncrementTick+0x170>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	4a0d      	ldr	r2, [pc, #52]	; (800e4f0 <xTaskIncrementTick+0x170>)
 800e4ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e4bc:	697b      	ldr	r3, [r7, #20]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3718      	adds	r7, #24
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	2000301c 	.word	0x2000301c
 800e4cc:	20002ff8 	.word	0x20002ff8
 800e4d0:	20002fac 	.word	0x20002fac
 800e4d4:	20002fb0 	.word	0x20002fb0
 800e4d8:	2000300c 	.word	0x2000300c
 800e4dc:	20003014 	.word	0x20003014
 800e4e0:	20002ffc 	.word	0x20002ffc
 800e4e4:	20002b24 	.word	0x20002b24
 800e4e8:	20002b20 	.word	0x20002b20
 800e4ec:	20003008 	.word	0x20003008
 800e4f0:	20003004 	.word	0x20003004

0800e4f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4fa:	4b2a      	ldr	r3, [pc, #168]	; (800e5a4 <vTaskSwitchContext+0xb0>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e502:	4b29      	ldr	r3, [pc, #164]	; (800e5a8 <vTaskSwitchContext+0xb4>)
 800e504:	2201      	movs	r2, #1
 800e506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e508:	e046      	b.n	800e598 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e50a:	4b27      	ldr	r3, [pc, #156]	; (800e5a8 <vTaskSwitchContext+0xb4>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e510:	4b26      	ldr	r3, [pc, #152]	; (800e5ac <vTaskSwitchContext+0xb8>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	60fb      	str	r3, [r7, #12]
 800e516:	e010      	b.n	800e53a <vTaskSwitchContext+0x46>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <vTaskSwitchContext+0x40>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	607b      	str	r3, [r7, #4]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <vTaskSwitchContext+0x3e>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3b01      	subs	r3, #1
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	491d      	ldr	r1, [pc, #116]	; (800e5b0 <vTaskSwitchContext+0xbc>)
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4613      	mov	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	440b      	add	r3, r1
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0e4      	beq.n	800e518 <vTaskSwitchContext+0x24>
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4a15      	ldr	r2, [pc, #84]	; (800e5b0 <vTaskSwitchContext+0xbc>)
 800e55a:	4413      	add	r3, r2
 800e55c:	60bb      	str	r3, [r7, #8]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	605a      	str	r2, [r3, #4]
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	3308      	adds	r3, #8
 800e570:	429a      	cmp	r2, r3
 800e572:	d104      	bne.n	800e57e <vTaskSwitchContext+0x8a>
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	605a      	str	r2, [r3, #4]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	4a0b      	ldr	r2, [pc, #44]	; (800e5b4 <vTaskSwitchContext+0xc0>)
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	4a08      	ldr	r2, [pc, #32]	; (800e5ac <vTaskSwitchContext+0xb8>)
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e58e:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <vTaskSwitchContext+0xc0>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3354      	adds	r3, #84	; 0x54
 800e594:	4a08      	ldr	r2, [pc, #32]	; (800e5b8 <vTaskSwitchContext+0xc4>)
 800e596:	6013      	str	r3, [r2, #0]
}
 800e598:	bf00      	nop
 800e59a:	3714      	adds	r7, #20
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	2000301c 	.word	0x2000301c
 800e5a8:	20003008 	.word	0x20003008
 800e5ac:	20002ffc 	.word	0x20002ffc
 800e5b0:	20002b24 	.word	0x20002b24
 800e5b4:	20002b20 	.word	0x20002b20
 800e5b8:	20000118 	.word	0x20000118

0800e5bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	60fb      	str	r3, [r7, #12]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5e2:	4b07      	ldr	r3, [pc, #28]	; (800e600 <vTaskPlaceOnEventList+0x44>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fe fc85 	bl	800cefa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	6838      	ldr	r0, [r7, #0]
 800e5f4:	f000 fb7e 	bl	800ecf4 <prvAddCurrentTaskToDelayedList>
}
 800e5f8:	bf00      	nop
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20002b20 	.word	0x20002b20

0800e604 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10a      	bne.n	800e62c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	617b      	str	r3, [r7, #20]
}
 800e628:	bf00      	nop
 800e62a:	e7fe      	b.n	800e62a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <vTaskPlaceOnEventListRestricted+0x54>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	3318      	adds	r3, #24
 800e632:	4619      	mov	r1, r3
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f7fe fc3c 	bl	800ceb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e640:	f04f 33ff 	mov.w	r3, #4294967295
 800e644:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e646:	6879      	ldr	r1, [r7, #4]
 800e648:	68b8      	ldr	r0, [r7, #8]
 800e64a:	f000 fb53 	bl	800ecf4 <prvAddCurrentTaskToDelayedList>
	}
 800e64e:	bf00      	nop
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	20002b20 	.word	0x20002b20

0800e65c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10a      	bne.n	800e688 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	60fb      	str	r3, [r7, #12]
}
 800e684:	bf00      	nop
 800e686:	e7fe      	b.n	800e686 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	3318      	adds	r3, #24
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fe fc6d 	bl	800cf6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e692:	4b1e      	ldr	r3, [pc, #120]	; (800e70c <xTaskRemoveFromEventList+0xb0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d11d      	bne.n	800e6d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	3304      	adds	r3, #4
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fc64 	bl	800cf6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a8:	4b19      	ldr	r3, [pc, #100]	; (800e710 <xTaskRemoveFromEventList+0xb4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d903      	bls.n	800e6b8 <xTaskRemoveFromEventList+0x5c>
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	4a16      	ldr	r2, [pc, #88]	; (800e710 <xTaskRemoveFromEventList+0xb4>)
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4a13      	ldr	r2, [pc, #76]	; (800e714 <xTaskRemoveFromEventList+0xb8>)
 800e6c6:	441a      	add	r2, r3
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	4610      	mov	r0, r2
 800e6d0:	f7fe fbef 	bl	800ceb2 <vListInsertEnd>
 800e6d4:	e005      	b.n	800e6e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	3318      	adds	r3, #24
 800e6da:	4619      	mov	r1, r3
 800e6dc:	480e      	ldr	r0, [pc, #56]	; (800e718 <xTaskRemoveFromEventList+0xbc>)
 800e6de:	f7fe fbe8 	bl	800ceb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	4b0d      	ldr	r3, [pc, #52]	; (800e71c <xTaskRemoveFromEventList+0xc0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d905      	bls.n	800e6fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6f4:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <xTaskRemoveFromEventList+0xc4>)
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	601a      	str	r2, [r3, #0]
 800e6fa:	e001      	b.n	800e700 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e700:	697b      	ldr	r3, [r7, #20]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	2000301c 	.word	0x2000301c
 800e710:	20002ffc 	.word	0x20002ffc
 800e714:	20002b24 	.word	0x20002b24
 800e718:	20002fb4 	.word	0x20002fb4
 800e71c:	20002b20 	.word	0x20002b20
 800e720:	20003008 	.word	0x20003008

0800e724 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e72c:	4b06      	ldr	r3, [pc, #24]	; (800e748 <vTaskInternalSetTimeOutState+0x24>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e734:	4b05      	ldr	r3, [pc, #20]	; (800e74c <vTaskInternalSetTimeOutState+0x28>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	605a      	str	r2, [r3, #4]
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	2000300c 	.word	0x2000300c
 800e74c:	20002ff8 	.word	0x20002ff8

0800e750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d10a      	bne.n	800e776 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	613b      	str	r3, [r7, #16]
}
 800e772:	bf00      	nop
 800e774:	e7fe      	b.n	800e774 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10a      	bne.n	800e792 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	60fb      	str	r3, [r7, #12]
}
 800e78e:	bf00      	nop
 800e790:	e7fe      	b.n	800e790 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e792:	f000 ff7f 	bl	800f694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e796:	4b1d      	ldr	r3, [pc, #116]	; (800e80c <xTaskCheckForTimeOut+0xbc>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	69ba      	ldr	r2, [r7, #24]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	d102      	bne.n	800e7b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	61fb      	str	r3, [r7, #28]
 800e7b4:	e023      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	4b15      	ldr	r3, [pc, #84]	; (800e810 <xTaskCheckForTimeOut+0xc0>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d007      	beq.n	800e7d2 <xTaskCheckForTimeOut+0x82>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d302      	bcc.n	800e7d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	e015      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d20b      	bcs.n	800e7f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	1ad2      	subs	r2, r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff ff9b 	bl	800e724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	61fb      	str	r3, [r7, #28]
 800e7f2:	e004      	b.n	800e7fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e7fe:	f000 ff79 	bl	800f6f4 <vPortExitCritical>

	return xReturn;
 800e802:	69fb      	ldr	r3, [r7, #28]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3720      	adds	r7, #32
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	20002ff8 	.word	0x20002ff8
 800e810:	2000300c 	.word	0x2000300c

0800e814 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e818:	4b03      	ldr	r3, [pc, #12]	; (800e828 <vTaskMissedYield+0x14>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	601a      	str	r2, [r3, #0]
}
 800e81e:	bf00      	nop
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	20003008 	.word	0x20003008

0800e82c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e834:	f000 f852 	bl	800e8dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e838:	4b06      	ldr	r3, [pc, #24]	; (800e854 <prvIdleTask+0x28>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d9f9      	bls.n	800e834 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e840:	4b05      	ldr	r3, [pc, #20]	; (800e858 <prvIdleTask+0x2c>)
 800e842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e850:	e7f0      	b.n	800e834 <prvIdleTask+0x8>
 800e852:	bf00      	nop
 800e854:	20002b24 	.word	0x20002b24
 800e858:	e000ed04 	.word	0xe000ed04

0800e85c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e862:	2300      	movs	r3, #0
 800e864:	607b      	str	r3, [r7, #4]
 800e866:	e00c      	b.n	800e882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	4613      	mov	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4413      	add	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4a12      	ldr	r2, [pc, #72]	; (800e8bc <prvInitialiseTaskLists+0x60>)
 800e874:	4413      	add	r3, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f7fe faee 	bl	800ce58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	607b      	str	r3, [r7, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b37      	cmp	r3, #55	; 0x37
 800e886:	d9ef      	bls.n	800e868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e888:	480d      	ldr	r0, [pc, #52]	; (800e8c0 <prvInitialiseTaskLists+0x64>)
 800e88a:	f7fe fae5 	bl	800ce58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e88e:	480d      	ldr	r0, [pc, #52]	; (800e8c4 <prvInitialiseTaskLists+0x68>)
 800e890:	f7fe fae2 	bl	800ce58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e894:	480c      	ldr	r0, [pc, #48]	; (800e8c8 <prvInitialiseTaskLists+0x6c>)
 800e896:	f7fe fadf 	bl	800ce58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e89a:	480c      	ldr	r0, [pc, #48]	; (800e8cc <prvInitialiseTaskLists+0x70>)
 800e89c:	f7fe fadc 	bl	800ce58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8a0:	480b      	ldr	r0, [pc, #44]	; (800e8d0 <prvInitialiseTaskLists+0x74>)
 800e8a2:	f7fe fad9 	bl	800ce58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <prvInitialiseTaskLists+0x78>)
 800e8a8:	4a05      	ldr	r2, [pc, #20]	; (800e8c0 <prvInitialiseTaskLists+0x64>)
 800e8aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e8ac:	4b0a      	ldr	r3, [pc, #40]	; (800e8d8 <prvInitialiseTaskLists+0x7c>)
 800e8ae:	4a05      	ldr	r2, [pc, #20]	; (800e8c4 <prvInitialiseTaskLists+0x68>)
 800e8b0:	601a      	str	r2, [r3, #0]
}
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20002b24 	.word	0x20002b24
 800e8c0:	20002f84 	.word	0x20002f84
 800e8c4:	20002f98 	.word	0x20002f98
 800e8c8:	20002fb4 	.word	0x20002fb4
 800e8cc:	20002fc8 	.word	0x20002fc8
 800e8d0:	20002fe0 	.word	0x20002fe0
 800e8d4:	20002fac 	.word	0x20002fac
 800e8d8:	20002fb0 	.word	0x20002fb0

0800e8dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8e2:	e019      	b.n	800e918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e8e4:	f000 fed6 	bl	800f694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8e8:	4b10      	ldr	r3, [pc, #64]	; (800e92c <prvCheckTasksWaitingTermination+0x50>)
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe fb39 	bl	800cf6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <prvCheckTasksWaitingTermination+0x54>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	4a0b      	ldr	r2, [pc, #44]	; (800e930 <prvCheckTasksWaitingTermination+0x54>)
 800e902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e904:	4b0b      	ldr	r3, [pc, #44]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3b01      	subs	r3, #1
 800e90a:	4a0a      	ldr	r2, [pc, #40]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e90c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e90e:	f000 fef1 	bl	800f6f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f810 	bl	800e938 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <prvCheckTasksWaitingTermination+0x58>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e1      	bne.n	800e8e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	20002fc8 	.word	0x20002fc8
 800e930:	20002ff4 	.word	0x20002ff4
 800e934:	20002fdc 	.word	0x20002fdc

0800e938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	3354      	adds	r3, #84	; 0x54
 800e944:	4618      	mov	r0, r3
 800e946:	f001 ffa5 	bl	8010894 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e950:	2b00      	cmp	r3, #0
 800e952:	d108      	bne.n	800e966 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e958:	4618      	mov	r0, r3
 800e95a:	f001 f889 	bl	800fa70 <vPortFree>
				vPortFree( pxTCB );
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f001 f886 	bl	800fa70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e964:	e018      	b.n	800e998 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d103      	bne.n	800e978 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 f87d 	bl	800fa70 <vPortFree>
	}
 800e976:	e00f      	b.n	800e998 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d00a      	beq.n	800e998 <prvDeleteTCB+0x60>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	60fb      	str	r3, [r7, #12]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <prvDeleteTCB+0x5e>
	}
 800e998:	bf00      	nop
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <prvResetNextTaskUnblockTime+0x38>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d104      	bne.n	800e9ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9b0:	4b0a      	ldr	r3, [pc, #40]	; (800e9dc <prvResetNextTaskUnblockTime+0x3c>)
 800e9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e9b8:	e008      	b.n	800e9cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ba:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <prvResetNextTaskUnblockTime+0x38>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	4a04      	ldr	r2, [pc, #16]	; (800e9dc <prvResetNextTaskUnblockTime+0x3c>)
 800e9ca:	6013      	str	r3, [r2, #0]
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	20002fac 	.word	0x20002fac
 800e9dc:	20003014 	.word	0x20003014

0800e9e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ea14 <xTaskGetSchedulerState+0x34>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	607b      	str	r3, [r7, #4]
 800e9f2:	e008      	b.n	800ea06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9f4:	4b08      	ldr	r3, [pc, #32]	; (800ea18 <xTaskGetSchedulerState+0x38>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d102      	bne.n	800ea02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	607b      	str	r3, [r7, #4]
 800ea00:	e001      	b.n	800ea06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea02:	2300      	movs	r3, #0
 800ea04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea06:	687b      	ldr	r3, [r7, #4]
	}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	20003000 	.word	0x20003000
 800ea18:	2000301c 	.word	0x2000301c

0800ea1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d051      	beq.n	800ead6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea36:	4b2a      	ldr	r3, [pc, #168]	; (800eae0 <xTaskPriorityInherit+0xc4>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d241      	bcs.n	800eac4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	db06      	blt.n	800ea56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea48:	4b25      	ldr	r3, [pc, #148]	; (800eae0 <xTaskPriorityInherit+0xc4>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	6959      	ldr	r1, [r3, #20]
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea5e:	4613      	mov	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4413      	add	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	4a1f      	ldr	r2, [pc, #124]	; (800eae4 <xTaskPriorityInherit+0xc8>)
 800ea68:	4413      	add	r3, r2
 800ea6a:	4299      	cmp	r1, r3
 800ea6c:	d122      	bne.n	800eab4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	3304      	adds	r3, #4
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe fa7a 	bl	800cf6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ea78:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <xTaskPriorityInherit+0xc4>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea86:	4b18      	ldr	r3, [pc, #96]	; (800eae8 <xTaskPriorityInherit+0xcc>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d903      	bls.n	800ea96 <xTaskPriorityInherit+0x7a>
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea92:	4a15      	ldr	r2, [pc, #84]	; (800eae8 <xTaskPriorityInherit+0xcc>)
 800ea94:	6013      	str	r3, [r2, #0]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4a10      	ldr	r2, [pc, #64]	; (800eae4 <xTaskPriorityInherit+0xc8>)
 800eaa4:	441a      	add	r2, r3
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7fe fa00 	bl	800ceb2 <vListInsertEnd>
 800eab2:	e004      	b.n	800eabe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eab4:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <xTaskPriorityInherit+0xc4>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eabe:	2301      	movs	r3, #1
 800eac0:	60fb      	str	r3, [r7, #12]
 800eac2:	e008      	b.n	800ead6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eac8:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <xTaskPriorityInherit+0xc4>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	429a      	cmp	r2, r3
 800ead0:	d201      	bcs.n	800ead6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ead2:	2301      	movs	r3, #1
 800ead4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ead6:	68fb      	ldr	r3, [r7, #12]
	}
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20002b20 	.word	0x20002b20
 800eae4:	20002b24 	.word	0x20002b24
 800eae8:	20002ffc 	.word	0x20002ffc

0800eaec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d056      	beq.n	800ebb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb02:	4b2e      	ldr	r3, [pc, #184]	; (800ebbc <xTaskPriorityDisinherit+0xd0>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d00a      	beq.n	800eb22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	f383 8811 	msr	BASEPRI, r3
 800eb14:	f3bf 8f6f 	isb	sy
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	60fb      	str	r3, [r7, #12]
}
 800eb1e:	bf00      	nop
 800eb20:	e7fe      	b.n	800eb20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10a      	bne.n	800eb40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	60bb      	str	r3, [r7, #8]
}
 800eb3c:	bf00      	nop
 800eb3e:	e7fe      	b.n	800eb3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb44:	1e5a      	subs	r2, r3, #1
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d02c      	beq.n	800ebb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d128      	bne.n	800ebb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	3304      	adds	r3, #4
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe fa02 	bl	800cf6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb80:	4b0f      	ldr	r3, [pc, #60]	; (800ebc0 <xTaskPriorityDisinherit+0xd4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d903      	bls.n	800eb90 <xTaskPriorityDisinherit+0xa4>
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8c:	4a0c      	ldr	r2, [pc, #48]	; (800ebc0 <xTaskPriorityDisinherit+0xd4>)
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb94:	4613      	mov	r3, r2
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4413      	add	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4a09      	ldr	r2, [pc, #36]	; (800ebc4 <xTaskPriorityDisinherit+0xd8>)
 800eb9e:	441a      	add	r2, r3
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	3304      	adds	r3, #4
 800eba4:	4619      	mov	r1, r3
 800eba6:	4610      	mov	r0, r2
 800eba8:	f7fe f983 	bl	800ceb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebac:	2301      	movs	r3, #1
 800ebae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebb0:	697b      	ldr	r3, [r7, #20]
	}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	20002b20 	.word	0x20002b20
 800ebc0:	20002ffc 	.word	0x20002ffc
 800ebc4:	20002b24 	.word	0x20002b24

0800ebc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b088      	sub	sp, #32
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d06a      	beq.n	800ecb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10a      	bne.n	800ebfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ebe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	60fb      	str	r3, [r7, #12]
}
 800ebfa:	bf00      	nop
 800ebfc:	e7fe      	b.n	800ebfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec02:	683a      	ldr	r2, [r7, #0]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d902      	bls.n	800ec0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	61fb      	str	r3, [r7, #28]
 800ec0c:	e002      	b.n	800ec14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec18:	69fa      	ldr	r2, [r7, #28]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d04b      	beq.n	800ecb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d146      	bne.n	800ecb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ec28:	4b25      	ldr	r3, [pc, #148]	; (800ecc0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	69ba      	ldr	r2, [r7, #24]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d10a      	bne.n	800ec48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60bb      	str	r3, [r7, #8]
}
 800ec44:	bf00      	nop
 800ec46:	e7fe      	b.n	800ec46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	db04      	blt.n	800ec66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	6959      	ldr	r1, [r3, #20]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	4613      	mov	r3, r2
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4413      	add	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4a13      	ldr	r2, [pc, #76]	; (800ecc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ec76:	4413      	add	r3, r2
 800ec78:	4299      	cmp	r1, r3
 800ec7a:	d11c      	bne.n	800ecb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe f973 	bl	800cf6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8a:	4b0f      	ldr	r3, [pc, #60]	; (800ecc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d903      	bls.n	800ec9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec96:	4a0c      	ldr	r2, [pc, #48]	; (800ecc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ec98:	6013      	str	r3, [r2, #0]
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4a07      	ldr	r2, [pc, #28]	; (800ecc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eca8:	441a      	add	r2, r3
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	3304      	adds	r3, #4
 800ecae:	4619      	mov	r1, r3
 800ecb0:	4610      	mov	r0, r2
 800ecb2:	f7fe f8fe 	bl	800ceb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecb6:	bf00      	nop
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20002b20 	.word	0x20002b20
 800ecc4:	20002b24 	.word	0x20002b24
 800ecc8:	20002ffc 	.word	0x20002ffc

0800eccc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ecd0:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d004      	beq.n	800ece2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ecd8:	4b05      	ldr	r3, [pc, #20]	; (800ecf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecde:	3201      	adds	r2, #1
 800ece0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ece2:	4b03      	ldr	r3, [pc, #12]	; (800ecf0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ece4:	681b      	ldr	r3, [r3, #0]
	}
 800ece6:	4618      	mov	r0, r3
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr
 800ecf0:	20002b20 	.word	0x20002b20

0800ecf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ecfe:	4b21      	ldr	r3, [pc, #132]	; (800ed84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed04:	4b20      	ldr	r3, [pc, #128]	; (800ed88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	3304      	adds	r3, #4
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe f92e 	bl	800cf6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed16:	d10a      	bne.n	800ed2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d007      	beq.n	800ed2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed1e:	4b1a      	ldr	r3, [pc, #104]	; (800ed88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3304      	adds	r3, #4
 800ed24:	4619      	mov	r1, r3
 800ed26:	4819      	ldr	r0, [pc, #100]	; (800ed8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ed28:	f7fe f8c3 	bl	800ceb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed2c:	e026      	b.n	800ed7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4413      	add	r3, r2
 800ed34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed36:	4b14      	ldr	r3, [pc, #80]	; (800ed88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d209      	bcs.n	800ed5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed46:	4b12      	ldr	r3, [pc, #72]	; (800ed90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	4b0f      	ldr	r3, [pc, #60]	; (800ed88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f7fe f8d1 	bl	800cefa <vListInsert>
}
 800ed58:	e010      	b.n	800ed7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed5a:	4b0e      	ldr	r3, [pc, #56]	; (800ed94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	3304      	adds	r3, #4
 800ed64:	4619      	mov	r1, r3
 800ed66:	4610      	mov	r0, r2
 800ed68:	f7fe f8c7 	bl	800cefa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	; (800ed98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d202      	bcs.n	800ed7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ed76:	4a08      	ldr	r2, [pc, #32]	; (800ed98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	6013      	str	r3, [r2, #0]
}
 800ed7c:	bf00      	nop
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	20002ff8 	.word	0x20002ff8
 800ed88:	20002b20 	.word	0x20002b20
 800ed8c:	20002fe0 	.word	0x20002fe0
 800ed90:	20002fb0 	.word	0x20002fb0
 800ed94:	20002fac 	.word	0x20002fac
 800ed98:	20003014 	.word	0x20003014

0800ed9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08a      	sub	sp, #40	; 0x28
 800eda0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eda6:	f000 fb07 	bl	800f3b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edaa:	4b1c      	ldr	r3, [pc, #112]	; (800ee1c <xTimerCreateTimerTask+0x80>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d021      	beq.n	800edf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800edb2:	2300      	movs	r3, #0
 800edb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800edb6:	2300      	movs	r3, #0
 800edb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800edba:	1d3a      	adds	r2, r7, #4
 800edbc:	f107 0108 	add.w	r1, r7, #8
 800edc0:	f107 030c 	add.w	r3, r7, #12
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe f82d 	bl	800ce24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	9202      	str	r2, [sp, #8]
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	2302      	movs	r3, #2
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	2300      	movs	r3, #0
 800edda:	460a      	mov	r2, r1
 800eddc:	4910      	ldr	r1, [pc, #64]	; (800ee20 <xTimerCreateTimerTask+0x84>)
 800edde:	4811      	ldr	r0, [pc, #68]	; (800ee24 <xTimerCreateTimerTask+0x88>)
 800ede0:	f7fe ff38 	bl	800dc54 <xTaskCreateStatic>
 800ede4:	4603      	mov	r3, r0
 800ede6:	4a10      	ldr	r2, [pc, #64]	; (800ee28 <xTimerCreateTimerTask+0x8c>)
 800ede8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800edea:	4b0f      	ldr	r3, [pc, #60]	; (800ee28 <xTimerCreateTimerTask+0x8c>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800edf2:	2301      	movs	r3, #1
 800edf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10a      	bne.n	800ee12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800edfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	613b      	str	r3, [r7, #16]
}
 800ee0e:	bf00      	nop
 800ee10:	e7fe      	b.n	800ee10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee12:	697b      	ldr	r3, [r7, #20]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20003050 	.word	0x20003050
 800ee20:	080113b4 	.word	0x080113b4
 800ee24:	0800ef61 	.word	0x0800ef61
 800ee28:	20003054 	.word	0x20003054

0800ee2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08a      	sub	sp, #40	; 0x28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
 800ee38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d10a      	bne.n	800ee5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ee44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	623b      	str	r3, [r7, #32]
}
 800ee56:	bf00      	nop
 800ee58:	e7fe      	b.n	800ee58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ee5a:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <xTimerGenericCommand+0x98>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d02a      	beq.n	800eeb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	2b05      	cmp	r3, #5
 800ee72:	dc18      	bgt.n	800eea6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ee74:	f7ff fdb4 	bl	800e9e0 <xTaskGetSchedulerState>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d109      	bne.n	800ee92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ee7e:	4b11      	ldr	r3, [pc, #68]	; (800eec4 <xTimerGenericCommand+0x98>)
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	f107 0110 	add.w	r1, r7, #16
 800ee86:	2300      	movs	r3, #0
 800ee88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee8a:	f7fe f9d7 	bl	800d23c <xQueueGenericSend>
 800ee8e:	6278      	str	r0, [r7, #36]	; 0x24
 800ee90:	e012      	b.n	800eeb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ee92:	4b0c      	ldr	r3, [pc, #48]	; (800eec4 <xTimerGenericCommand+0x98>)
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	f107 0110 	add.w	r1, r7, #16
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f7fe f9cd 	bl	800d23c <xQueueGenericSend>
 800eea2:	6278      	str	r0, [r7, #36]	; 0x24
 800eea4:	e008      	b.n	800eeb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eea6:	4b07      	ldr	r3, [pc, #28]	; (800eec4 <xTimerGenericCommand+0x98>)
 800eea8:	6818      	ldr	r0, [r3, #0]
 800eeaa:	f107 0110 	add.w	r1, r7, #16
 800eeae:	2300      	movs	r3, #0
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	f7fe fac1 	bl	800d438 <xQueueGenericSendFromISR>
 800eeb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3728      	adds	r7, #40	; 0x28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	20003050 	.word	0x20003050

0800eec8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af02      	add	r7, sp, #8
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eed2:	4b22      	ldr	r3, [pc, #136]	; (800ef5c <prvProcessExpiredTimer+0x94>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	3304      	adds	r3, #4
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fe f843 	bl	800cf6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeec:	f003 0304 	and.w	r3, r3, #4
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d022      	beq.n	800ef3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	699a      	ldr	r2, [r3, #24]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	18d1      	adds	r1, r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	6978      	ldr	r0, [r7, #20]
 800ef02:	f000 f8d1 	bl	800f0a8 <prvInsertTimerInActiveList>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d01f      	beq.n	800ef4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	2300      	movs	r3, #0
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	2100      	movs	r1, #0
 800ef16:	6978      	ldr	r0, [r7, #20]
 800ef18:	f7ff ff88 	bl	800ee2c <xTimerGenericCommand>
 800ef1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d113      	bne.n	800ef4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	60fb      	str	r3, [r7, #12]
}
 800ef36:	bf00      	nop
 800ef38:	e7fe      	b.n	800ef38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef40:	f023 0301 	bic.w	r3, r3, #1
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	6978      	ldr	r0, [r7, #20]
 800ef52:	4798      	blx	r3
}
 800ef54:	bf00      	nop
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	20003048 	.word	0x20003048

0800ef60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef68:	f107 0308 	add.w	r3, r7, #8
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 f857 	bl	800f020 <prvGetNextExpireTime>
 800ef72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	4619      	mov	r1, r3
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f000 f803 	bl	800ef84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ef7e:	f000 f8d5 	bl	800f12c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ef82:	e7f1      	b.n	800ef68 <prvTimerTask+0x8>

0800ef84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ef8e:	f7ff f93b 	bl	800e208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef92:	f107 0308 	add.w	r3, r7, #8
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 f866 	bl	800f068 <prvSampleTimeNow>
 800ef9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d130      	bne.n	800f006 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <prvProcessTimerOrBlockTask+0x3c>
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d806      	bhi.n	800efc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800efb2:	f7ff f937 	bl	800e224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800efb6:	68f9      	ldr	r1, [r7, #12]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff ff85 	bl	800eec8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800efbe:	e024      	b.n	800f00a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d008      	beq.n	800efd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800efc6:	4b13      	ldr	r3, [pc, #76]	; (800f014 <prvProcessTimerOrBlockTask+0x90>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <prvProcessTimerOrBlockTask+0x50>
 800efd0:	2301      	movs	r3, #1
 800efd2:	e000      	b.n	800efd6 <prvProcessTimerOrBlockTask+0x52>
 800efd4:	2300      	movs	r3, #0
 800efd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800efd8:	4b0f      	ldr	r3, [pc, #60]	; (800f018 <prvProcessTimerOrBlockTask+0x94>)
 800efda:	6818      	ldr	r0, [r3, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	4619      	mov	r1, r3
 800efe6:	f7fe fe01 	bl	800dbec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800efea:	f7ff f91b 	bl	800e224 <xTaskResumeAll>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10a      	bne.n	800f00a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eff4:	4b09      	ldr	r3, [pc, #36]	; (800f01c <prvProcessTimerOrBlockTask+0x98>)
 800eff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	f3bf 8f6f 	isb	sy
}
 800f004:	e001      	b.n	800f00a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f006:	f7ff f90d 	bl	800e224 <xTaskResumeAll>
}
 800f00a:	bf00      	nop
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	2000304c 	.word	0x2000304c
 800f018:	20003050 	.word	0x20003050
 800f01c:	e000ed04 	.word	0xe000ed04

0800f020 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f028:	4b0e      	ldr	r3, [pc, #56]	; (800f064 <prvGetNextExpireTime+0x44>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d101      	bne.n	800f036 <prvGetNextExpireTime+0x16>
 800f032:	2201      	movs	r2, #1
 800f034:	e000      	b.n	800f038 <prvGetNextExpireTime+0x18>
 800f036:	2200      	movs	r2, #0
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d105      	bne.n	800f050 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f044:	4b07      	ldr	r3, [pc, #28]	; (800f064 <prvGetNextExpireTime+0x44>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	60fb      	str	r3, [r7, #12]
 800f04e:	e001      	b.n	800f054 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f050:	2300      	movs	r3, #0
 800f052:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f054:	68fb      	ldr	r3, [r7, #12]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3714      	adds	r7, #20
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	20003048 	.word	0x20003048

0800f068 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f070:	f7ff f976 	bl	800e360 <xTaskGetTickCount>
 800f074:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f076:	4b0b      	ldr	r3, [pc, #44]	; (800f0a4 <prvSampleTimeNow+0x3c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d205      	bcs.n	800f08c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f080:	f000 f936 	bl	800f2f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	601a      	str	r2, [r3, #0]
 800f08a:	e002      	b.n	800f092 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f092:	4a04      	ldr	r2, [pc, #16]	; (800f0a4 <prvSampleTimeNow+0x3c>)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f098:	68fb      	ldr	r3, [r7, #12]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20003058 	.word	0x20003058

0800f0a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
 800f0b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d812      	bhi.n	800f0f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	1ad2      	subs	r2, r2, r3
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	699b      	ldr	r3, [r3, #24]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d302      	bcc.n	800f0e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	617b      	str	r3, [r7, #20]
 800f0e0:	e01b      	b.n	800f11a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f0e2:	4b10      	ldr	r3, [pc, #64]	; (800f124 <prvInsertTimerInActiveList+0x7c>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	3304      	adds	r3, #4
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	f7fd ff04 	bl	800cefa <vListInsert>
 800f0f2:	e012      	b.n	800f11a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d206      	bcs.n	800f10a <prvInsertTimerInActiveList+0x62>
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d302      	bcc.n	800f10a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f104:	2301      	movs	r3, #1
 800f106:	617b      	str	r3, [r7, #20]
 800f108:	e007      	b.n	800f11a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f10a:	4b07      	ldr	r3, [pc, #28]	; (800f128 <prvInsertTimerInActiveList+0x80>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3304      	adds	r3, #4
 800f112:	4619      	mov	r1, r3
 800f114:	4610      	mov	r0, r2
 800f116:	f7fd fef0 	bl	800cefa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f11a:	697b      	ldr	r3, [r7, #20]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	2000304c 	.word	0x2000304c
 800f128:	20003048 	.word	0x20003048

0800f12c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08e      	sub	sp, #56	; 0x38
 800f130:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f132:	e0ca      	b.n	800f2ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	da18      	bge.n	800f16c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f13a:	1d3b      	adds	r3, r7, #4
 800f13c:	3304      	adds	r3, #4
 800f13e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	2b00      	cmp	r3, #0
 800f144:	d10a      	bne.n	800f15c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	61fb      	str	r3, [r7, #28]
}
 800f158:	bf00      	nop
 800f15a:	e7fe      	b.n	800f15a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f162:	6850      	ldr	r0, [r2, #4]
 800f164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f166:	6892      	ldr	r2, [r2, #8]
 800f168:	4611      	mov	r1, r2
 800f16a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f2c0 80aa 	blt.w	800f2c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d004      	beq.n	800f18a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f182:	3304      	adds	r3, #4
 800f184:	4618      	mov	r0, r3
 800f186:	f7fd fef1 	bl	800cf6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f18a:	463b      	mov	r3, r7
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7ff ff6b 	bl	800f068 <prvSampleTimeNow>
 800f192:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b09      	cmp	r3, #9
 800f198:	f200 8097 	bhi.w	800f2ca <prvProcessReceivedCommands+0x19e>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <prvProcessReceivedCommands+0x78>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f1cd 	.word	0x0800f1cd
 800f1a8:	0800f1cd 	.word	0x0800f1cd
 800f1ac:	0800f1cd 	.word	0x0800f1cd
 800f1b0:	0800f241 	.word	0x0800f241
 800f1b4:	0800f255 	.word	0x0800f255
 800f1b8:	0800f29f 	.word	0x0800f29f
 800f1bc:	0800f1cd 	.word	0x0800f1cd
 800f1c0:	0800f1cd 	.word	0x0800f1cd
 800f1c4:	0800f241 	.word	0x0800f241
 800f1c8:	0800f255 	.word	0x0800f255
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1d2:	f043 0301 	orr.w	r3, r3, #1
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	18d1      	adds	r1, r2, r3
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ec:	f7ff ff5c 	bl	800f0a8 <prvInsertTimerInActiveList>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d069      	beq.n	800f2ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f204:	f003 0304 	and.w	r3, r3, #4
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d05e      	beq.n	800f2ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f20c:	68ba      	ldr	r2, [r7, #8]
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	441a      	add	r2, r3
 800f214:	2300      	movs	r3, #0
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	2300      	movs	r3, #0
 800f21a:	2100      	movs	r1, #0
 800f21c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f21e:	f7ff fe05 	bl	800ee2c <xTimerGenericCommand>
 800f222:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d14f      	bne.n	800f2ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	61bb      	str	r3, [r7, #24]
}
 800f23c:	bf00      	nop
 800f23e:	e7fe      	b.n	800f23e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f246:	f023 0301 	bic.w	r3, r3, #1
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f252:	e03a      	b.n	800f2ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f25a:	f043 0301 	orr.w	r3, r3, #1
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f266:	68ba      	ldr	r2, [r7, #8]
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10a      	bne.n	800f28a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	617b      	str	r3, [r7, #20]
}
 800f286:	bf00      	nop
 800f288:	e7fe      	b.n	800f288 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	699a      	ldr	r2, [r3, #24]
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	18d1      	adds	r1, r2, r3
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f298:	f7ff ff06 	bl	800f0a8 <prvInsertTimerInActiveList>
					break;
 800f29c:	e015      	b.n	800f2ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2a4:	f003 0302 	and.w	r3, r3, #2
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ae:	f000 fbdf 	bl	800fa70 <vPortFree>
 800f2b2:	e00a      	b.n	800f2ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ba:	f023 0301 	bic.w	r3, r3, #1
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f2c6:	e000      	b.n	800f2ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f2c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2ca:	4b08      	ldr	r3, [pc, #32]	; (800f2ec <prvProcessReceivedCommands+0x1c0>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	1d39      	adds	r1, r7, #4
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe f94c 	bl	800d570 <xQueueReceive>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f47f af2a 	bne.w	800f134 <prvProcessReceivedCommands+0x8>
	}
}
 800f2e0:	bf00      	nop
 800f2e2:	bf00      	nop
 800f2e4:	3730      	adds	r7, #48	; 0x30
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20003050 	.word	0x20003050

0800f2f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2f6:	e048      	b.n	800f38a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2f8:	4b2d      	ldr	r3, [pc, #180]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f302:	4b2b      	ldr	r3, [pc, #172]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	3304      	adds	r3, #4
 800f310:	4618      	mov	r0, r3
 800f312:	f7fd fe2b 	bl	800cf6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6a1b      	ldr	r3, [r3, #32]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f324:	f003 0304 	and.w	r3, r3, #4
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d02e      	beq.n	800f38a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	693a      	ldr	r2, [r7, #16]
 800f332:	4413      	add	r3, r2
 800f334:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d90e      	bls.n	800f35c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f34a:	4b19      	ldr	r3, [pc, #100]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3304      	adds	r3, #4
 800f352:	4619      	mov	r1, r3
 800f354:	4610      	mov	r0, r2
 800f356:	f7fd fdd0 	bl	800cefa <vListInsert>
 800f35a:	e016      	b.n	800f38a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f35c:	2300      	movs	r3, #0
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	2300      	movs	r3, #0
 800f362:	693a      	ldr	r2, [r7, #16]
 800f364:	2100      	movs	r1, #0
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f7ff fd60 	bl	800ee2c <xTimerGenericCommand>
 800f36c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10a      	bne.n	800f38a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	603b      	str	r3, [r7, #0]
}
 800f386:	bf00      	nop
 800f388:	e7fe      	b.n	800f388 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f38a:	4b09      	ldr	r3, [pc, #36]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1b1      	bne.n	800f2f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f394:	4b06      	ldr	r3, [pc, #24]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f39a:	4b06      	ldr	r3, [pc, #24]	; (800f3b4 <prvSwitchTimerLists+0xc4>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a04      	ldr	r2, [pc, #16]	; (800f3b0 <prvSwitchTimerLists+0xc0>)
 800f3a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f3a2:	4a04      	ldr	r2, [pc, #16]	; (800f3b4 <prvSwitchTimerLists+0xc4>)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	6013      	str	r3, [r2, #0]
}
 800f3a8:	bf00      	nop
 800f3aa:	3718      	adds	r7, #24
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	20003048 	.word	0x20003048
 800f3b4:	2000304c 	.word	0x2000304c

0800f3b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f3be:	f000 f969 	bl	800f694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f3c2:	4b15      	ldr	r3, [pc, #84]	; (800f418 <prvCheckForValidListAndQueue+0x60>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d120      	bne.n	800f40c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f3ca:	4814      	ldr	r0, [pc, #80]	; (800f41c <prvCheckForValidListAndQueue+0x64>)
 800f3cc:	f7fd fd44 	bl	800ce58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f3d0:	4813      	ldr	r0, [pc, #76]	; (800f420 <prvCheckForValidListAndQueue+0x68>)
 800f3d2:	f7fd fd41 	bl	800ce58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f3d6:	4b13      	ldr	r3, [pc, #76]	; (800f424 <prvCheckForValidListAndQueue+0x6c>)
 800f3d8:	4a10      	ldr	r2, [pc, #64]	; (800f41c <prvCheckForValidListAndQueue+0x64>)
 800f3da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f3dc:	4b12      	ldr	r3, [pc, #72]	; (800f428 <prvCheckForValidListAndQueue+0x70>)
 800f3de:	4a10      	ldr	r2, [pc, #64]	; (800f420 <prvCheckForValidListAndQueue+0x68>)
 800f3e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4b11      	ldr	r3, [pc, #68]	; (800f42c <prvCheckForValidListAndQueue+0x74>)
 800f3e8:	4a11      	ldr	r2, [pc, #68]	; (800f430 <prvCheckForValidListAndQueue+0x78>)
 800f3ea:	2110      	movs	r1, #16
 800f3ec:	200a      	movs	r0, #10
 800f3ee:	f7fd fe4f 	bl	800d090 <xQueueGenericCreateStatic>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	4a08      	ldr	r2, [pc, #32]	; (800f418 <prvCheckForValidListAndQueue+0x60>)
 800f3f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f3f8:	4b07      	ldr	r3, [pc, #28]	; (800f418 <prvCheckForValidListAndQueue+0x60>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d005      	beq.n	800f40c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f400:	4b05      	ldr	r3, [pc, #20]	; (800f418 <prvCheckForValidListAndQueue+0x60>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	490b      	ldr	r1, [pc, #44]	; (800f434 <prvCheckForValidListAndQueue+0x7c>)
 800f406:	4618      	mov	r0, r3
 800f408:	f7fe fbc6 	bl	800db98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f40c:	f000 f972 	bl	800f6f4 <vPortExitCritical>
}
 800f410:	bf00      	nop
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	20003050 	.word	0x20003050
 800f41c:	20003020 	.word	0x20003020
 800f420:	20003034 	.word	0x20003034
 800f424:	20003048 	.word	0x20003048
 800f428:	2000304c 	.word	0x2000304c
 800f42c:	200030fc 	.word	0x200030fc
 800f430:	2000305c 	.word	0x2000305c
 800f434:	080113bc 	.word	0x080113bc

0800f438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	3b04      	subs	r3, #4
 800f448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	3b04      	subs	r3, #4
 800f456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	f023 0201 	bic.w	r2, r3, #1
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3b04      	subs	r3, #4
 800f466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f468:	4a0c      	ldr	r2, [pc, #48]	; (800f49c <pxPortInitialiseStack+0x64>)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3b14      	subs	r3, #20
 800f472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3b04      	subs	r3, #4
 800f47e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f06f 0202 	mvn.w	r2, #2
 800f486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	3b20      	subs	r3, #32
 800f48c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f48e:	68fb      	ldr	r3, [r7, #12]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr
 800f49c:	0800f4a1 	.word	0x0800f4a1

0800f4a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f4aa:	4b12      	ldr	r3, [pc, #72]	; (800f4f4 <prvTaskExitError+0x54>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b2:	d00a      	beq.n	800f4ca <prvTaskExitError+0x2a>
	__asm volatile
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	60fb      	str	r3, [r7, #12]
}
 800f4c6:	bf00      	nop
 800f4c8:	e7fe      	b.n	800f4c8 <prvTaskExitError+0x28>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	60bb      	str	r3, [r7, #8]
}
 800f4dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4de:	bf00      	nop
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d0fc      	beq.n	800f4e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f4e6:	bf00      	nop
 800f4e8:	bf00      	nop
 800f4ea:	3714      	adds	r7, #20
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr
 800f4f4:	200000b0 	.word	0x200000b0
	...

0800f500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <pxCurrentTCBConst2>)
 800f502:	6819      	ldr	r1, [r3, #0]
 800f504:	6808      	ldr	r0, [r1, #0]
 800f506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50a:	f380 8809 	msr	PSP, r0
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f04f 0000 	mov.w	r0, #0
 800f516:	f380 8811 	msr	BASEPRI, r0
 800f51a:	4770      	bx	lr
 800f51c:	f3af 8000 	nop.w

0800f520 <pxCurrentTCBConst2>:
 800f520:	20002b20 	.word	0x20002b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop

0800f528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f528:	4808      	ldr	r0, [pc, #32]	; (800f54c <prvPortStartFirstTask+0x24>)
 800f52a:	6800      	ldr	r0, [r0, #0]
 800f52c:	6800      	ldr	r0, [r0, #0]
 800f52e:	f380 8808 	msr	MSP, r0
 800f532:	f04f 0000 	mov.w	r0, #0
 800f536:	f380 8814 	msr	CONTROL, r0
 800f53a:	b662      	cpsie	i
 800f53c:	b661      	cpsie	f
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	df00      	svc	0
 800f548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f54a:	bf00      	nop
 800f54c:	e000ed08 	.word	0xe000ed08

0800f550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f556:	4b46      	ldr	r3, [pc, #280]	; (800f670 <xPortStartScheduler+0x120>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a46      	ldr	r2, [pc, #280]	; (800f674 <xPortStartScheduler+0x124>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d10a      	bne.n	800f576 <xPortStartScheduler+0x26>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	613b      	str	r3, [r7, #16]
}
 800f572:	bf00      	nop
 800f574:	e7fe      	b.n	800f574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f576:	4b3e      	ldr	r3, [pc, #248]	; (800f670 <xPortStartScheduler+0x120>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a3f      	ldr	r2, [pc, #252]	; (800f678 <xPortStartScheduler+0x128>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d10a      	bne.n	800f596 <xPortStartScheduler+0x46>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	f383 8811 	msr	BASEPRI, r3
 800f588:	f3bf 8f6f 	isb	sy
 800f58c:	f3bf 8f4f 	dsb	sy
 800f590:	60fb      	str	r3, [r7, #12]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f596:	4b39      	ldr	r3, [pc, #228]	; (800f67c <xPortStartScheduler+0x12c>)
 800f598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5b0:	78fb      	ldrb	r3, [r7, #3]
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	4b31      	ldr	r3, [pc, #196]	; (800f680 <xPortStartScheduler+0x130>)
 800f5bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5be:	4b31      	ldr	r3, [pc, #196]	; (800f684 <xPortStartScheduler+0x134>)
 800f5c0:	2207      	movs	r2, #7
 800f5c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5c4:	e009      	b.n	800f5da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f5c6:	4b2f      	ldr	r3, [pc, #188]	; (800f684 <xPortStartScheduler+0x134>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	4a2d      	ldr	r2, [pc, #180]	; (800f684 <xPortStartScheduler+0x134>)
 800f5ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5da:	78fb      	ldrb	r3, [r7, #3]
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5e2:	2b80      	cmp	r3, #128	; 0x80
 800f5e4:	d0ef      	beq.n	800f5c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f5e6:	4b27      	ldr	r3, [pc, #156]	; (800f684 <xPortStartScheduler+0x134>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f1c3 0307 	rsb	r3, r3, #7
 800f5ee:	2b04      	cmp	r3, #4
 800f5f0:	d00a      	beq.n	800f608 <xPortStartScheduler+0xb8>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	60bb      	str	r3, [r7, #8]
}
 800f604:	bf00      	nop
 800f606:	e7fe      	b.n	800f606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f608:	4b1e      	ldr	r3, [pc, #120]	; (800f684 <xPortStartScheduler+0x134>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	4a1d      	ldr	r2, [pc, #116]	; (800f684 <xPortStartScheduler+0x134>)
 800f610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f612:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <xPortStartScheduler+0x134>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f61a:	4a1a      	ldr	r2, [pc, #104]	; (800f684 <xPortStartScheduler+0x134>)
 800f61c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	b2da      	uxtb	r2, r3
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f626:	4b18      	ldr	r3, [pc, #96]	; (800f688 <xPortStartScheduler+0x138>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a17      	ldr	r2, [pc, #92]	; (800f688 <xPortStartScheduler+0x138>)
 800f62c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f632:	4b15      	ldr	r3, [pc, #84]	; (800f688 <xPortStartScheduler+0x138>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4a14      	ldr	r2, [pc, #80]	; (800f688 <xPortStartScheduler+0x138>)
 800f638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f63c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f63e:	f000 f8dd 	bl	800f7fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f642:	4b12      	ldr	r3, [pc, #72]	; (800f68c <xPortStartScheduler+0x13c>)
 800f644:	2200      	movs	r2, #0
 800f646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f648:	f000 f8fc 	bl	800f844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f64c:	4b10      	ldr	r3, [pc, #64]	; (800f690 <xPortStartScheduler+0x140>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a0f      	ldr	r2, [pc, #60]	; (800f690 <xPortStartScheduler+0x140>)
 800f652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f658:	f7ff ff66 	bl	800f528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f65c:	f7fe ff4a 	bl	800e4f4 <vTaskSwitchContext>
	prvTaskExitError();
 800f660:	f7ff ff1e 	bl	800f4a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	e000ed00 	.word	0xe000ed00
 800f674:	410fc271 	.word	0x410fc271
 800f678:	410fc270 	.word	0x410fc270
 800f67c:	e000e400 	.word	0xe000e400
 800f680:	2000314c 	.word	0x2000314c
 800f684:	20003150 	.word	0x20003150
 800f688:	e000ed20 	.word	0xe000ed20
 800f68c:	200000b0 	.word	0x200000b0
 800f690:	e000ef34 	.word	0xe000ef34

0800f694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	607b      	str	r3, [r7, #4]
}
 800f6ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6ae:	4b0f      	ldr	r3, [pc, #60]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	4a0d      	ldr	r2, [pc, #52]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6b8:	4b0c      	ldr	r3, [pc, #48]	; (800f6ec <vPortEnterCritical+0x58>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d10f      	bne.n	800f6e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6c0:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <vPortEnterCritical+0x5c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	603b      	str	r3, [r7, #0]
}
 800f6dc:	bf00      	nop
 800f6de:	e7fe      	b.n	800f6de <vPortEnterCritical+0x4a>
	}
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	200000b0 	.word	0x200000b0
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f6fa:	4b12      	ldr	r3, [pc, #72]	; (800f744 <vPortExitCritical+0x50>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10a      	bne.n	800f718 <vPortExitCritical+0x24>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	607b      	str	r3, [r7, #4]
}
 800f714:	bf00      	nop
 800f716:	e7fe      	b.n	800f716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <vPortExitCritical+0x50>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	4a09      	ldr	r2, [pc, #36]	; (800f744 <vPortExitCritical+0x50>)
 800f720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f722:	4b08      	ldr	r3, [pc, #32]	; (800f744 <vPortExitCritical+0x50>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <vPortExitCritical+0x42>
 800f72a:	2300      	movs	r3, #0
 800f72c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	f383 8811 	msr	BASEPRI, r3
}
 800f734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	200000b0 	.word	0x200000b0
	...

0800f750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f750:	f3ef 8009 	mrs	r0, PSP
 800f754:	f3bf 8f6f 	isb	sy
 800f758:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <pxCurrentTCBConst>)
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	f01e 0f10 	tst.w	lr, #16
 800f760:	bf08      	it	eq
 800f762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76a:	6010      	str	r0, [r2, #0]
 800f76c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f770:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f774:	f380 8811 	msr	BASEPRI, r0
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f7fe feb8 	bl	800e4f4 <vTaskSwitchContext>
 800f784:	f04f 0000 	mov.w	r0, #0
 800f788:	f380 8811 	msr	BASEPRI, r0
 800f78c:	bc09      	pop	{r0, r3}
 800f78e:	6819      	ldr	r1, [r3, #0]
 800f790:	6808      	ldr	r0, [r1, #0]
 800f792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f796:	f01e 0f10 	tst.w	lr, #16
 800f79a:	bf08      	it	eq
 800f79c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7a0:	f380 8809 	msr	PSP, r0
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	f3af 8000 	nop.w

0800f7b0 <pxCurrentTCBConst>:
 800f7b0:	20002b20 	.word	0x20002b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7b4:	bf00      	nop
 800f7b6:	bf00      	nop

0800f7b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b082      	sub	sp, #8
 800f7bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c2:	f383 8811 	msr	BASEPRI, r3
 800f7c6:	f3bf 8f6f 	isb	sy
 800f7ca:	f3bf 8f4f 	dsb	sy
 800f7ce:	607b      	str	r3, [r7, #4]
}
 800f7d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7d2:	f7fe fdd5 	bl	800e380 <xTaskIncrementTick>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d003      	beq.n	800f7e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7dc:	4b06      	ldr	r3, [pc, #24]	; (800f7f8 <xPortSysTickHandler+0x40>)
 800f7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	f383 8811 	msr	BASEPRI, r3
}
 800f7ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f7f0:	bf00      	nop
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	e000ed04 	.word	0xe000ed04

0800f7fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f800:	4b0b      	ldr	r3, [pc, #44]	; (800f830 <vPortSetupTimerInterrupt+0x34>)
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f806:	4b0b      	ldr	r3, [pc, #44]	; (800f834 <vPortSetupTimerInterrupt+0x38>)
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <vPortSetupTimerInterrupt+0x3c>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a0a      	ldr	r2, [pc, #40]	; (800f83c <vPortSetupTimerInterrupt+0x40>)
 800f812:	fba2 2303 	umull	r2, r3, r2, r3
 800f816:	099b      	lsrs	r3, r3, #6
 800f818:	4a09      	ldr	r2, [pc, #36]	; (800f840 <vPortSetupTimerInterrupt+0x44>)
 800f81a:	3b01      	subs	r3, #1
 800f81c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f81e:	4b04      	ldr	r3, [pc, #16]	; (800f830 <vPortSetupTimerInterrupt+0x34>)
 800f820:	2207      	movs	r2, #7
 800f822:	601a      	str	r2, [r3, #0]
}
 800f824:	bf00      	nop
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	e000e010 	.word	0xe000e010
 800f834:	e000e018 	.word	0xe000e018
 800f838:	20000004 	.word	0x20000004
 800f83c:	10624dd3 	.word	0x10624dd3
 800f840:	e000e014 	.word	0xe000e014

0800f844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f854 <vPortEnableVFP+0x10>
 800f848:	6801      	ldr	r1, [r0, #0]
 800f84a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f84e:	6001      	str	r1, [r0, #0]
 800f850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f852:	bf00      	nop
 800f854:	e000ed88 	.word	0xe000ed88

0800f858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f85e:	f3ef 8305 	mrs	r3, IPSR
 800f862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b0f      	cmp	r3, #15
 800f868:	d914      	bls.n	800f894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f86a:	4a17      	ldr	r2, [pc, #92]	; (800f8c8 <vPortValidateInterruptPriority+0x70>)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	4413      	add	r3, r2
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f874:	4b15      	ldr	r3, [pc, #84]	; (800f8cc <vPortValidateInterruptPriority+0x74>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	7afa      	ldrb	r2, [r7, #11]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d20a      	bcs.n	800f894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	607b      	str	r3, [r7, #4]
}
 800f890:	bf00      	nop
 800f892:	e7fe      	b.n	800f892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f894:	4b0e      	ldr	r3, [pc, #56]	; (800f8d0 <vPortValidateInterruptPriority+0x78>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f89c:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <vPortValidateInterruptPriority+0x7c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d90a      	bls.n	800f8ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	603b      	str	r3, [r7, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	e7fe      	b.n	800f8b8 <vPortValidateInterruptPriority+0x60>
	}
 800f8ba:	bf00      	nop
 800f8bc:	3714      	adds	r7, #20
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop
 800f8c8:	e000e3f0 	.word	0xe000e3f0
 800f8cc:	2000314c 	.word	0x2000314c
 800f8d0:	e000ed0c 	.word	0xe000ed0c
 800f8d4:	20003150 	.word	0x20003150

0800f8d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	; 0x28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f8e4:	f7fe fc90 	bl	800e208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f8e8:	4b5b      	ldr	r3, [pc, #364]	; (800fa58 <pvPortMalloc+0x180>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f8f0:	f000 f920 	bl	800fb34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f8f4:	4b59      	ldr	r3, [pc, #356]	; (800fa5c <pvPortMalloc+0x184>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f040 8093 	bne.w	800fa28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01d      	beq.n	800f944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f908:	2208      	movs	r2, #8
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f003 0307 	and.w	r3, r3, #7
 800f916:	2b00      	cmp	r3, #0
 800f918:	d014      	beq.n	800f944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f023 0307 	bic.w	r3, r3, #7
 800f920:	3308      	adds	r3, #8
 800f922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f003 0307 	and.w	r3, r3, #7
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00a      	beq.n	800f944 <pvPortMalloc+0x6c>
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	617b      	str	r3, [r7, #20]
}
 800f940:	bf00      	nop
 800f942:	e7fe      	b.n	800f942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d06e      	beq.n	800fa28 <pvPortMalloc+0x150>
 800f94a:	4b45      	ldr	r3, [pc, #276]	; (800fa60 <pvPortMalloc+0x188>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	429a      	cmp	r2, r3
 800f952:	d869      	bhi.n	800fa28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f954:	4b43      	ldr	r3, [pc, #268]	; (800fa64 <pvPortMalloc+0x18c>)
 800f956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f958:	4b42      	ldr	r3, [pc, #264]	; (800fa64 <pvPortMalloc+0x18c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f95e:	e004      	b.n	800f96a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	429a      	cmp	r2, r3
 800f972:	d903      	bls.n	800f97c <pvPortMalloc+0xa4>
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1f1      	bne.n	800f960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f97c:	4b36      	ldr	r3, [pc, #216]	; (800fa58 <pvPortMalloc+0x180>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f982:	429a      	cmp	r2, r3
 800f984:	d050      	beq.n	800fa28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2208      	movs	r2, #8
 800f98c:	4413      	add	r3, r2
 800f98e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	1ad2      	subs	r2, r2, r3
 800f9a0:	2308      	movs	r3, #8
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d91f      	bls.n	800f9e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	f003 0307 	and.w	r3, r3, #7
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00a      	beq.n	800f9d0 <pvPortMalloc+0xf8>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	613b      	str	r3, [r7, #16]
}
 800f9cc:	bf00      	nop
 800f9ce:	e7fe      	b.n	800f9ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	685a      	ldr	r2, [r3, #4]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	1ad2      	subs	r2, r2, r3
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9e2:	69b8      	ldr	r0, [r7, #24]
 800f9e4:	f000 f908 	bl	800fbf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9e8:	4b1d      	ldr	r3, [pc, #116]	; (800fa60 <pvPortMalloc+0x188>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	4a1b      	ldr	r2, [pc, #108]	; (800fa60 <pvPortMalloc+0x188>)
 800f9f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9f6:	4b1a      	ldr	r3, [pc, #104]	; (800fa60 <pvPortMalloc+0x188>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	4b1b      	ldr	r3, [pc, #108]	; (800fa68 <pvPortMalloc+0x190>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d203      	bcs.n	800fa0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa02:	4b17      	ldr	r3, [pc, #92]	; (800fa60 <pvPortMalloc+0x188>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	4a18      	ldr	r2, [pc, #96]	; (800fa68 <pvPortMalloc+0x190>)
 800fa08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <pvPortMalloc+0x184>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	431a      	orrs	r2, r3
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fa1e:	4b13      	ldr	r3, [pc, #76]	; (800fa6c <pvPortMalloc+0x194>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	3301      	adds	r3, #1
 800fa24:	4a11      	ldr	r2, [pc, #68]	; (800fa6c <pvPortMalloc+0x194>)
 800fa26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa28:	f7fe fbfc 	bl	800e224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f003 0307 	and.w	r3, r3, #7
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d00a      	beq.n	800fa4c <pvPortMalloc+0x174>
	__asm volatile
 800fa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa3a:	f383 8811 	msr	BASEPRI, r3
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	60fb      	str	r3, [r7, #12]
}
 800fa48:	bf00      	nop
 800fa4a:	e7fe      	b.n	800fa4a <pvPortMalloc+0x172>
	return pvReturn;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3728      	adds	r7, #40	; 0x28
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20006d5c 	.word	0x20006d5c
 800fa5c:	20006d70 	.word	0x20006d70
 800fa60:	20006d60 	.word	0x20006d60
 800fa64:	20006d54 	.word	0x20006d54
 800fa68:	20006d64 	.word	0x20006d64
 800fa6c:	20006d68 	.word	0x20006d68

0800fa70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b086      	sub	sp, #24
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d04d      	beq.n	800fb1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fa82:	2308      	movs	r3, #8
 800fa84:	425b      	negs	r3, r3
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4413      	add	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	4b24      	ldr	r3, [pc, #144]	; (800fb28 <vPortFree+0xb8>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4013      	ands	r3, r2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10a      	bne.n	800fab4 <vPortFree+0x44>
	__asm volatile
 800fa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	60fb      	str	r3, [r7, #12]
}
 800fab0:	bf00      	nop
 800fab2:	e7fe      	b.n	800fab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00a      	beq.n	800fad2 <vPortFree+0x62>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	60bb      	str	r3, [r7, #8]
}
 800face:	bf00      	nop
 800fad0:	e7fe      	b.n	800fad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	685a      	ldr	r2, [r3, #4]
 800fad6:	4b14      	ldr	r3, [pc, #80]	; (800fb28 <vPortFree+0xb8>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4013      	ands	r3, r2
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d01e      	beq.n	800fb1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11a      	bne.n	800fb1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	685a      	ldr	r2, [r3, #4]
 800faec:	4b0e      	ldr	r3, [pc, #56]	; (800fb28 <vPortFree+0xb8>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	43db      	mvns	r3, r3
 800faf2:	401a      	ands	r2, r3
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800faf8:	f7fe fb86 	bl	800e208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	4b0a      	ldr	r3, [pc, #40]	; (800fb2c <vPortFree+0xbc>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4413      	add	r3, r2
 800fb06:	4a09      	ldr	r2, [pc, #36]	; (800fb2c <vPortFree+0xbc>)
 800fb08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb0a:	6938      	ldr	r0, [r7, #16]
 800fb0c:	f000 f874 	bl	800fbf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fb10:	4b07      	ldr	r3, [pc, #28]	; (800fb30 <vPortFree+0xc0>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3301      	adds	r3, #1
 800fb16:	4a06      	ldr	r2, [pc, #24]	; (800fb30 <vPortFree+0xc0>)
 800fb18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fb1a:	f7fe fb83 	bl	800e224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb1e:	bf00      	nop
 800fb20:	3718      	adds	r7, #24
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	20006d70 	.word	0x20006d70
 800fb2c:	20006d60 	.word	0x20006d60
 800fb30:	20006d6c 	.word	0x20006d6c

0800fb34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fb3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb40:	4b27      	ldr	r3, [pc, #156]	; (800fbe0 <prvHeapInit+0xac>)
 800fb42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f003 0307 	and.w	r3, r3, #7
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d00c      	beq.n	800fb68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3307      	adds	r3, #7
 800fb52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f023 0307 	bic.w	r3, r3, #7
 800fb5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	4a1f      	ldr	r2, [pc, #124]	; (800fbe0 <prvHeapInit+0xac>)
 800fb64:	4413      	add	r3, r2
 800fb66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb6c:	4a1d      	ldr	r2, [pc, #116]	; (800fbe4 <prvHeapInit+0xb0>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb72:	4b1c      	ldr	r3, [pc, #112]	; (800fbe4 <prvHeapInit+0xb0>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fb80:	2208      	movs	r2, #8
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	1a9b      	subs	r3, r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f023 0307 	bic.w	r3, r3, #7
 800fb8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4a15      	ldr	r2, [pc, #84]	; (800fbe8 <prvHeapInit+0xb4>)
 800fb94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fb96:	4b14      	ldr	r3, [pc, #80]	; (800fbe8 <prvHeapInit+0xb4>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fb9e:	4b12      	ldr	r3, [pc, #72]	; (800fbe8 <prvHeapInit+0xb4>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2200      	movs	r2, #0
 800fba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	1ad2      	subs	r2, r2, r3
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbb4:	4b0c      	ldr	r3, [pc, #48]	; (800fbe8 <prvHeapInit+0xb4>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	4a0a      	ldr	r2, [pc, #40]	; (800fbec <prvHeapInit+0xb8>)
 800fbc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	4a09      	ldr	r2, [pc, #36]	; (800fbf0 <prvHeapInit+0xbc>)
 800fbca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <prvHeapInit+0xc0>)
 800fbce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbd2:	601a      	str	r2, [r3, #0]
}
 800fbd4:	bf00      	nop
 800fbd6:	3714      	adds	r7, #20
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr
 800fbe0:	20003154 	.word	0x20003154
 800fbe4:	20006d54 	.word	0x20006d54
 800fbe8:	20006d5c 	.word	0x20006d5c
 800fbec:	20006d64 	.word	0x20006d64
 800fbf0:	20006d60 	.word	0x20006d60
 800fbf4:	20006d70 	.word	0x20006d70

0800fbf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b085      	sub	sp, #20
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc00:	4b28      	ldr	r3, [pc, #160]	; (800fca4 <prvInsertBlockIntoFreeList+0xac>)
 800fc02:	60fb      	str	r3, [r7, #12]
 800fc04:	e002      	b.n	800fc0c <prvInsertBlockIntoFreeList+0x14>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d8f7      	bhi.n	800fc06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	4413      	add	r3, r2
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d108      	bne.n	800fc3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	441a      	add	r2, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	441a      	add	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d118      	bne.n	800fc80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	4b15      	ldr	r3, [pc, #84]	; (800fca8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d00d      	beq.n	800fc76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	685a      	ldr	r2, [r3, #4]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	441a      	add	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	681a      	ldr	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	601a      	str	r2, [r3, #0]
 800fc74:	e008      	b.n	800fc88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc76:	4b0c      	ldr	r3, [pc, #48]	; (800fca8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	e003      	b.n	800fc88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d002      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc96:	bf00      	nop
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	20006d54 	.word	0x20006d54
 800fca8:	20006d5c 	.word	0x20006d5c

0800fcac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	4912      	ldr	r1, [pc, #72]	; (800fcfc <MX_USB_DEVICE_Init+0x50>)
 800fcb4:	4812      	ldr	r0, [pc, #72]	; (800fd00 <MX_USB_DEVICE_Init+0x54>)
 800fcb6:	f7f7 fbaf 	bl	8007418 <USBD_Init>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d001      	beq.n	800fcc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fcc0:	f7f1 ffcc 	bl	8001c5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fcc4:	490f      	ldr	r1, [pc, #60]	; (800fd04 <MX_USB_DEVICE_Init+0x58>)
 800fcc6:	480e      	ldr	r0, [pc, #56]	; (800fd00 <MX_USB_DEVICE_Init+0x54>)
 800fcc8:	f7f7 fbd6 	bl	8007478 <USBD_RegisterClass>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fcd2:	f7f1 ffc3 	bl	8001c5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fcd6:	490c      	ldr	r1, [pc, #48]	; (800fd08 <MX_USB_DEVICE_Init+0x5c>)
 800fcd8:	4809      	ldr	r0, [pc, #36]	; (800fd00 <MX_USB_DEVICE_Init+0x54>)
 800fcda:	f7f7 fac7 	bl	800726c <USBD_CDC_RegisterInterface>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fce4:	f7f1 ffba 	bl	8001c5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fce8:	4805      	ldr	r0, [pc, #20]	; (800fd00 <MX_USB_DEVICE_Init+0x54>)
 800fcea:	f7f7 fbfb 	bl	80074e4 <USBD_Start>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fcf4:	f7f1 ffb2 	bl	8001c5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fcf8:	bf00      	nop
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	200000c8 	.word	0x200000c8
 800fd00:	20006d74 	.word	0x20006d74
 800fd04:	20000030 	.word	0x20000030
 800fd08:	200000b4 	.word	0x200000b4

0800fd0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd10:	2200      	movs	r2, #0
 800fd12:	4905      	ldr	r1, [pc, #20]	; (800fd28 <CDC_Init_FS+0x1c>)
 800fd14:	4805      	ldr	r0, [pc, #20]	; (800fd2c <CDC_Init_FS+0x20>)
 800fd16:	f7f7 fac3 	bl	80072a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd1a:	4905      	ldr	r1, [pc, #20]	; (800fd30 <CDC_Init_FS+0x24>)
 800fd1c:	4803      	ldr	r0, [pc, #12]	; (800fd2c <CDC_Init_FS+0x20>)
 800fd1e:	f7f7 fae1 	bl	80072e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20007438 	.word	0x20007438
 800fd2c:	20006d74 	.word	0x20006d74
 800fd30:	20007050 	.word	0x20007050

0800fd34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd34:	b480      	push	{r7}
 800fd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	6039      	str	r1, [r7, #0]
 800fd4e:	71fb      	strb	r3, [r7, #7]
 800fd50:	4613      	mov	r3, r2
 800fd52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd54:	79fb      	ldrb	r3, [r7, #7]
 800fd56:	2b23      	cmp	r3, #35	; 0x23
 800fd58:	d84a      	bhi.n	800fdf0 <CDC_Control_FS+0xac>
 800fd5a:	a201      	add	r2, pc, #4	; (adr r2, 800fd60 <CDC_Control_FS+0x1c>)
 800fd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd60:	0800fdf1 	.word	0x0800fdf1
 800fd64:	0800fdf1 	.word	0x0800fdf1
 800fd68:	0800fdf1 	.word	0x0800fdf1
 800fd6c:	0800fdf1 	.word	0x0800fdf1
 800fd70:	0800fdf1 	.word	0x0800fdf1
 800fd74:	0800fdf1 	.word	0x0800fdf1
 800fd78:	0800fdf1 	.word	0x0800fdf1
 800fd7c:	0800fdf1 	.word	0x0800fdf1
 800fd80:	0800fdf1 	.word	0x0800fdf1
 800fd84:	0800fdf1 	.word	0x0800fdf1
 800fd88:	0800fdf1 	.word	0x0800fdf1
 800fd8c:	0800fdf1 	.word	0x0800fdf1
 800fd90:	0800fdf1 	.word	0x0800fdf1
 800fd94:	0800fdf1 	.word	0x0800fdf1
 800fd98:	0800fdf1 	.word	0x0800fdf1
 800fd9c:	0800fdf1 	.word	0x0800fdf1
 800fda0:	0800fdf1 	.word	0x0800fdf1
 800fda4:	0800fdf1 	.word	0x0800fdf1
 800fda8:	0800fdf1 	.word	0x0800fdf1
 800fdac:	0800fdf1 	.word	0x0800fdf1
 800fdb0:	0800fdf1 	.word	0x0800fdf1
 800fdb4:	0800fdf1 	.word	0x0800fdf1
 800fdb8:	0800fdf1 	.word	0x0800fdf1
 800fdbc:	0800fdf1 	.word	0x0800fdf1
 800fdc0:	0800fdf1 	.word	0x0800fdf1
 800fdc4:	0800fdf1 	.word	0x0800fdf1
 800fdc8:	0800fdf1 	.word	0x0800fdf1
 800fdcc:	0800fdf1 	.word	0x0800fdf1
 800fdd0:	0800fdf1 	.word	0x0800fdf1
 800fdd4:	0800fdf1 	.word	0x0800fdf1
 800fdd8:	0800fdf1 	.word	0x0800fdf1
 800fddc:	0800fdf1 	.word	0x0800fdf1
 800fde0:	0800fdf1 	.word	0x0800fdf1
 800fde4:	0800fdf1 	.word	0x0800fdf1
 800fde8:	0800fdf1 	.word	0x0800fdf1
 800fdec:	0800fdf1 	.word	0x0800fdf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fdf0:	bf00      	nop
  }

  return (USBD_OK);
 800fdf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe0a:	6879      	ldr	r1, [r7, #4]
 800fe0c:	4805      	ldr	r0, [pc, #20]	; (800fe24 <CDC_Receive_FS+0x24>)
 800fe0e:	f7f7 fa69 	bl	80072e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe12:	4804      	ldr	r0, [pc, #16]	; (800fe24 <CDC_Receive_FS+0x24>)
 800fe14:	f7f7 faca 	bl	80073ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20006d74 	.word	0x20006d74

0800fe28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe38:	4b0d      	ldr	r3, [pc, #52]	; (800fe70 <CDC_Transmit_FS+0x48>)
 800fe3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e00b      	b.n	800fe66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe4e:	887b      	ldrh	r3, [r7, #2]
 800fe50:	461a      	mov	r2, r3
 800fe52:	6879      	ldr	r1, [r7, #4]
 800fe54:	4806      	ldr	r0, [pc, #24]	; (800fe70 <CDC_Transmit_FS+0x48>)
 800fe56:	f7f7 fa23 	bl	80072a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe5a:	4805      	ldr	r0, [pc, #20]	; (800fe70 <CDC_Transmit_FS+0x48>)
 800fe5c:	f7f7 fa60 	bl	8007320 <USBD_CDC_TransmitPacket>
 800fe60:	4603      	mov	r3, r0
 800fe62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20006d74 	.word	0x20006d74

0800fe74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b087      	sub	sp, #28
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe82:	2300      	movs	r3, #0
 800fe84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	371c      	adds	r7, #28
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
	...

0800fe98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	6039      	str	r1, [r7, #0]
 800fea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	2212      	movs	r2, #18
 800fea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800feaa:	4b03      	ldr	r3, [pc, #12]	; (800feb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800feac:	4618      	mov	r0, r3
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	200000e4 	.word	0x200000e4

0800febc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	6039      	str	r1, [r7, #0]
 800fec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	2204      	movs	r2, #4
 800fecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fece:	4b03      	ldr	r3, [pc, #12]	; (800fedc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	200000f8 	.word	0x200000f8

0800fee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	6039      	str	r1, [r7, #0]
 800feea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800feec:	79fb      	ldrb	r3, [r7, #7]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d105      	bne.n	800fefe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	4907      	ldr	r1, [pc, #28]	; (800ff14 <USBD_FS_ProductStrDescriptor+0x34>)
 800fef6:	4808      	ldr	r0, [pc, #32]	; (800ff18 <USBD_FS_ProductStrDescriptor+0x38>)
 800fef8:	f7f8 fca0 	bl	800883c <USBD_GetString>
 800fefc:	e004      	b.n	800ff08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	4904      	ldr	r1, [pc, #16]	; (800ff14 <USBD_FS_ProductStrDescriptor+0x34>)
 800ff02:	4805      	ldr	r0, [pc, #20]	; (800ff18 <USBD_FS_ProductStrDescriptor+0x38>)
 800ff04:	f7f8 fc9a 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff08:	4b02      	ldr	r3, [pc, #8]	; (800ff14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20007820 	.word	0x20007820
 800ff18:	080113c4 	.word	0x080113c4

0800ff1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	6039      	str	r1, [r7, #0]
 800ff26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	4904      	ldr	r1, [pc, #16]	; (800ff3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff2c:	4804      	ldr	r0, [pc, #16]	; (800ff40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff2e:	f7f8 fc85 	bl	800883c <USBD_GetString>
  return USBD_StrDesc;
 800ff32:	4b02      	ldr	r3, [pc, #8]	; (800ff3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	20007820 	.word	0x20007820
 800ff40:	080113dc 	.word	0x080113dc

0800ff44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	6039      	str	r1, [r7, #0]
 800ff4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	221a      	movs	r2, #26
 800ff54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff56:	f000 f843 	bl	800ffe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ff5a:	4b02      	ldr	r3, [pc, #8]	; (800ff64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3708      	adds	r7, #8
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	200000fc 	.word	0x200000fc

0800ff68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	6039      	str	r1, [r7, #0]
 800ff72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d105      	bne.n	800ff86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff7a:	683a      	ldr	r2, [r7, #0]
 800ff7c:	4907      	ldr	r1, [pc, #28]	; (800ff9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff7e:	4808      	ldr	r0, [pc, #32]	; (800ffa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff80:	f7f8 fc5c 	bl	800883c <USBD_GetString>
 800ff84:	e004      	b.n	800ff90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	4904      	ldr	r1, [pc, #16]	; (800ff9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ff8a:	4805      	ldr	r0, [pc, #20]	; (800ffa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ff8c:	f7f8 fc56 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff90:	4b02      	ldr	r3, [pc, #8]	; (800ff9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20007820 	.word	0x20007820
 800ffa0:	080113f0 	.word	0x080113f0

0800ffa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	6039      	str	r1, [r7, #0]
 800ffae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffb0:	79fb      	ldrb	r3, [r7, #7]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d105      	bne.n	800ffc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffb6:	683a      	ldr	r2, [r7, #0]
 800ffb8:	4907      	ldr	r1, [pc, #28]	; (800ffd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffba:	4808      	ldr	r0, [pc, #32]	; (800ffdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffbc:	f7f8 fc3e 	bl	800883c <USBD_GetString>
 800ffc0:	e004      	b.n	800ffcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	4904      	ldr	r1, [pc, #16]	; (800ffd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ffc6:	4805      	ldr	r0, [pc, #20]	; (800ffdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ffc8:	f7f8 fc38 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffcc:	4b02      	ldr	r3, [pc, #8]	; (800ffd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20007820 	.word	0x20007820
 800ffdc:	080113fc 	.word	0x080113fc

0800ffe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ffe6:	4b0f      	ldr	r3, [pc, #60]	; (8010024 <Get_SerialNum+0x44>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ffec:	4b0e      	ldr	r3, [pc, #56]	; (8010028 <Get_SerialNum+0x48>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fff2:	4b0e      	ldr	r3, [pc, #56]	; (801002c <Get_SerialNum+0x4c>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4413      	add	r3, r2
 800fffe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d009      	beq.n	801001a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010006:	2208      	movs	r2, #8
 8010008:	4909      	ldr	r1, [pc, #36]	; (8010030 <Get_SerialNum+0x50>)
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f000 f814 	bl	8010038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010010:	2204      	movs	r2, #4
 8010012:	4908      	ldr	r1, [pc, #32]	; (8010034 <Get_SerialNum+0x54>)
 8010014:	68b8      	ldr	r0, [r7, #8]
 8010016:	f000 f80f 	bl	8010038 <IntToUnicode>
  }
}
 801001a:	bf00      	nop
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	1fff7a10 	.word	0x1fff7a10
 8010028:	1fff7a14 	.word	0x1fff7a14
 801002c:	1fff7a18 	.word	0x1fff7a18
 8010030:	200000fe 	.word	0x200000fe
 8010034:	2000010e 	.word	0x2000010e

08010038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010038:	b480      	push	{r7}
 801003a:	b087      	sub	sp, #28
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	4613      	mov	r3, r2
 8010044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010046:	2300      	movs	r3, #0
 8010048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801004a:	2300      	movs	r3, #0
 801004c:	75fb      	strb	r3, [r7, #23]
 801004e:	e027      	b.n	80100a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	0f1b      	lsrs	r3, r3, #28
 8010054:	2b09      	cmp	r3, #9
 8010056:	d80b      	bhi.n	8010070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	0f1b      	lsrs	r3, r3, #28
 801005c:	b2da      	uxtb	r2, r3
 801005e:	7dfb      	ldrb	r3, [r7, #23]
 8010060:	005b      	lsls	r3, r3, #1
 8010062:	4619      	mov	r1, r3
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	440b      	add	r3, r1
 8010068:	3230      	adds	r2, #48	; 0x30
 801006a:	b2d2      	uxtb	r2, r2
 801006c:	701a      	strb	r2, [r3, #0]
 801006e:	e00a      	b.n	8010086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	0f1b      	lsrs	r3, r3, #28
 8010074:	b2da      	uxtb	r2, r3
 8010076:	7dfb      	ldrb	r3, [r7, #23]
 8010078:	005b      	lsls	r3, r3, #1
 801007a:	4619      	mov	r1, r3
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	440b      	add	r3, r1
 8010080:	3237      	adds	r2, #55	; 0x37
 8010082:	b2d2      	uxtb	r2, r2
 8010084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	011b      	lsls	r3, r3, #4
 801008a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801008c:	7dfb      	ldrb	r3, [r7, #23]
 801008e:	005b      	lsls	r3, r3, #1
 8010090:	3301      	adds	r3, #1
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	4413      	add	r3, r2
 8010096:	2200      	movs	r2, #0
 8010098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801009a:	7dfb      	ldrb	r3, [r7, #23]
 801009c:	3301      	adds	r3, #1
 801009e:	75fb      	strb	r3, [r7, #23]
 80100a0:	7dfa      	ldrb	r2, [r7, #23]
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d3d3      	bcc.n	8010050 <IntToUnicode+0x18>
  }
}
 80100a8:	bf00      	nop
 80100aa:	bf00      	nop
 80100ac:	371c      	adds	r7, #28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
	...

080100b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b08a      	sub	sp, #40	; 0x28
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100c0:	f107 0314 	add.w	r3, r7, #20
 80100c4:	2200      	movs	r2, #0
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	605a      	str	r2, [r3, #4]
 80100ca:	609a      	str	r2, [r3, #8]
 80100cc:	60da      	str	r2, [r3, #12]
 80100ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80100d8:	d13a      	bne.n	8010150 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100da:	2300      	movs	r3, #0
 80100dc:	613b      	str	r3, [r7, #16]
 80100de:	4b1e      	ldr	r3, [pc, #120]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 80100e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e2:	4a1d      	ldr	r2, [pc, #116]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 80100e4:	f043 0301 	orr.w	r3, r3, #1
 80100e8:	6313      	str	r3, [r2, #48]	; 0x30
 80100ea:	4b1b      	ldr	r3, [pc, #108]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 80100ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	613b      	str	r3, [r7, #16]
 80100f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80100f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80100fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100fc:	2302      	movs	r3, #2
 80100fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010100:	2300      	movs	r3, #0
 8010102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010104:	2303      	movs	r3, #3
 8010106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010108:	230a      	movs	r3, #10
 801010a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801010c:	f107 0314 	add.w	r3, r7, #20
 8010110:	4619      	mov	r1, r3
 8010112:	4812      	ldr	r0, [pc, #72]	; (801015c <HAL_PCD_MspInit+0xa4>)
 8010114:	f7f2 f8a6 	bl	8002264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010118:	4b0f      	ldr	r3, [pc, #60]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 801011a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801011c:	4a0e      	ldr	r2, [pc, #56]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 801011e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010122:	6353      	str	r3, [r2, #52]	; 0x34
 8010124:	2300      	movs	r3, #0
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	4b0b      	ldr	r3, [pc, #44]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 801012a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801012c:	4a0a      	ldr	r2, [pc, #40]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 801012e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010132:	6453      	str	r3, [r2, #68]	; 0x44
 8010134:	4b08      	ldr	r3, [pc, #32]	; (8010158 <HAL_PCD_MspInit+0xa0>)
 8010136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010140:	2200      	movs	r2, #0
 8010142:	2105      	movs	r1, #5
 8010144:	2043      	movs	r0, #67	; 0x43
 8010146:	f7f2 f863 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801014a:	2043      	movs	r0, #67	; 0x43
 801014c:	f7f2 f87c 	bl	8002248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010150:	bf00      	nop
 8010152:	3728      	adds	r7, #40	; 0x28
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	40023800 	.word	0x40023800
 801015c:	40020000 	.word	0x40020000

08010160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010174:	4619      	mov	r1, r3
 8010176:	4610      	mov	r0, r2
 8010178:	f7f7 fa01 	bl	800757e <USBD_LL_SetupStage>
}
 801017c:	bf00      	nop
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010196:	78fa      	ldrb	r2, [r7, #3]
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	4613      	mov	r3, r2
 801019c:	00db      	lsls	r3, r3, #3
 801019e:	4413      	add	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	440b      	add	r3, r1
 80101a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	78fb      	ldrb	r3, [r7, #3]
 80101ac:	4619      	mov	r1, r3
 80101ae:	f7f7 fa3b 	bl	8007628 <USBD_LL_DataOutStage>
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	460b      	mov	r3, r1
 80101c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80101cc:	78fa      	ldrb	r2, [r7, #3]
 80101ce:	6879      	ldr	r1, [r7, #4]
 80101d0:	4613      	mov	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	4413      	add	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	440b      	add	r3, r1
 80101da:	334c      	adds	r3, #76	; 0x4c
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	78fb      	ldrb	r3, [r7, #3]
 80101e0:	4619      	mov	r1, r3
 80101e2:	f7f7 fad4 	bl	800778e <USBD_LL_DataInStage>
}
 80101e6:	bf00      	nop
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b082      	sub	sp, #8
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7f7 fc08 	bl	8007a12 <USBD_LL_SOF>
}
 8010202:	bf00      	nop
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010212:	2301      	movs	r3, #1
 8010214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d001      	beq.n	8010222 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801021e:	f7f1 fd1d 	bl	8001c5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010228:	7bfa      	ldrb	r2, [r7, #15]
 801022a:	4611      	mov	r1, r2
 801022c:	4618      	mov	r0, r3
 801022e:	f7f7 fbb2 	bl	8007996 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010238:	4618      	mov	r0, r3
 801023a:	f7f7 fb5a 	bl	80078f2 <USBD_LL_Reset>
}
 801023e:	bf00      	nop
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
	...

08010248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010256:	4618      	mov	r0, r3
 8010258:	f7f7 fbad 	bl	80079b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	6812      	ldr	r2, [r2, #0]
 801026a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801026e:	f043 0301 	orr.w	r3, r3, #1
 8010272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d005      	beq.n	8010288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801027c:	4b04      	ldr	r3, [pc, #16]	; (8010290 <HAL_PCD_SuspendCallback+0x48>)
 801027e:	691b      	ldr	r3, [r3, #16]
 8010280:	4a03      	ldr	r2, [pc, #12]	; (8010290 <HAL_PCD_SuspendCallback+0x48>)
 8010282:	f043 0306 	orr.w	r3, r3, #6
 8010286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010288:	bf00      	nop
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	e000ed00 	.word	0xe000ed00

08010294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7f7 fb9d 	bl	80079e2 <USBD_LL_Resume>
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102c2:	78fa      	ldrb	r2, [r7, #3]
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f7 fbf5 	bl	8007ab6 <USBD_LL_IsoOUTIncomplete>
}
 80102cc:	bf00      	nop
 80102ce:	3708      	adds	r7, #8
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	460b      	mov	r3, r1
 80102de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102e6:	78fa      	ldrb	r2, [r7, #3]
 80102e8:	4611      	mov	r1, r2
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f7 fbb1 	bl	8007a52 <USBD_LL_IsoINIncomplete>
}
 80102f0:	bf00      	nop
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010306:	4618      	mov	r0, r3
 8010308:	f7f7 fc07 	bl	8007b1a <USBD_LL_DevConnected>
}
 801030c:	bf00      	nop
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010322:	4618      	mov	r0, r3
 8010324:	f7f7 fc04 	bl	8007b30 <USBD_LL_DevDisconnected>
}
 8010328:	bf00      	nop
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d13c      	bne.n	80103ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010340:	4a20      	ldr	r2, [pc, #128]	; (80103c4 <USBD_LL_Init+0x94>)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	4a1e      	ldr	r2, [pc, #120]	; (80103c4 <USBD_LL_Init+0x94>)
 801034c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010350:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <USBD_LL_Init+0x94>)
 8010352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010358:	4b1a      	ldr	r3, [pc, #104]	; (80103c4 <USBD_LL_Init+0x94>)
 801035a:	2204      	movs	r2, #4
 801035c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801035e:	4b19      	ldr	r3, [pc, #100]	; (80103c4 <USBD_LL_Init+0x94>)
 8010360:	2202      	movs	r2, #2
 8010362:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010364:	4b17      	ldr	r3, [pc, #92]	; (80103c4 <USBD_LL_Init+0x94>)
 8010366:	2200      	movs	r2, #0
 8010368:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801036a:	4b16      	ldr	r3, [pc, #88]	; (80103c4 <USBD_LL_Init+0x94>)
 801036c:	2202      	movs	r2, #2
 801036e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010370:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <USBD_LL_Init+0x94>)
 8010372:	2200      	movs	r2, #0
 8010374:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010376:	4b13      	ldr	r3, [pc, #76]	; (80103c4 <USBD_LL_Init+0x94>)
 8010378:	2200      	movs	r2, #0
 801037a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801037c:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <USBD_LL_Init+0x94>)
 801037e:	2200      	movs	r2, #0
 8010380:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010382:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <USBD_LL_Init+0x94>)
 8010384:	2200      	movs	r2, #0
 8010386:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010388:	4b0e      	ldr	r3, [pc, #56]	; (80103c4 <USBD_LL_Init+0x94>)
 801038a:	2200      	movs	r2, #0
 801038c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801038e:	480d      	ldr	r0, [pc, #52]	; (80103c4 <USBD_LL_Init+0x94>)
 8010390:	f7f2 f905 	bl	800259e <HAL_PCD_Init>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d001      	beq.n	801039e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801039a:	f7f1 fc5f 	bl	8001c5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801039e:	2180      	movs	r1, #128	; 0x80
 80103a0:	4808      	ldr	r0, [pc, #32]	; (80103c4 <USBD_LL_Init+0x94>)
 80103a2:	f7f3 fb5c 	bl	8003a5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80103a6:	2240      	movs	r2, #64	; 0x40
 80103a8:	2100      	movs	r1, #0
 80103aa:	4806      	ldr	r0, [pc, #24]	; (80103c4 <USBD_LL_Init+0x94>)
 80103ac:	f7f3 fb10 	bl	80039d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80103b0:	2280      	movs	r2, #128	; 0x80
 80103b2:	2101      	movs	r1, #1
 80103b4:	4803      	ldr	r0, [pc, #12]	; (80103c4 <USBD_LL_Init+0x94>)
 80103b6:	f7f3 fb0b 	bl	80039d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	20007a20 	.word	0x20007a20

080103c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103de:	4618      	mov	r0, r3
 80103e0:	f7f2 f9fa 	bl	80027d8 <HAL_PCD_Start>
 80103e4:	4603      	mov	r3, r0
 80103e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 f942 	bl	8010674 <USBD_Get_USB_Status>
 80103f0:	4603      	mov	r3, r0
 80103f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b084      	sub	sp, #16
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	4608      	mov	r0, r1
 8010408:	4611      	mov	r1, r2
 801040a:	461a      	mov	r2, r3
 801040c:	4603      	mov	r3, r0
 801040e:	70fb      	strb	r3, [r7, #3]
 8010410:	460b      	mov	r3, r1
 8010412:	70bb      	strb	r3, [r7, #2]
 8010414:	4613      	mov	r3, r2
 8010416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010418:	2300      	movs	r3, #0
 801041a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010426:	78bb      	ldrb	r3, [r7, #2]
 8010428:	883a      	ldrh	r2, [r7, #0]
 801042a:	78f9      	ldrb	r1, [r7, #3]
 801042c:	f7f2 fecb 	bl	80031c6 <HAL_PCD_EP_Open>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f91c 	bl	8010674 <USBD_Get_USB_Status>
 801043c:	4603      	mov	r3, r0
 801043e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010440:	7bbb      	ldrb	r3, [r7, #14]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	460b      	mov	r3, r1
 8010454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010456:	2300      	movs	r3, #0
 8010458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010464:	78fa      	ldrb	r2, [r7, #3]
 8010466:	4611      	mov	r1, r2
 8010468:	4618      	mov	r0, r3
 801046a:	f7f2 ff14 	bl	8003296 <HAL_PCD_EP_Close>
 801046e:	4603      	mov	r3, r0
 8010470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010472:	7bfb      	ldrb	r3, [r7, #15]
 8010474:	4618      	mov	r0, r3
 8010476:	f000 f8fd 	bl	8010674 <USBD_Get_USB_Status>
 801047a:	4603      	mov	r3, r0
 801047c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010498:	2300      	movs	r3, #0
 801049a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104a2:	78fa      	ldrb	r2, [r7, #3]
 80104a4:	4611      	mov	r1, r2
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7f2 ffec 	bl	8003484 <HAL_PCD_EP_SetStall>
 80104ac:	4603      	mov	r3, r0
 80104ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b0:	7bfb      	ldrb	r3, [r7, #15]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f000 f8de 	bl	8010674 <USBD_Get_USB_Status>
 80104b8:	4603      	mov	r3, r0
 80104ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b084      	sub	sp, #16
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	460b      	mov	r3, r1
 80104d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d2:	2300      	movs	r3, #0
 80104d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104e0:	78fa      	ldrb	r2, [r7, #3]
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f3 f831 	bl	800354c <HAL_PCD_EP_ClrStall>
 80104ea:	4603      	mov	r3, r0
 80104ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f000 f8bf 	bl	8010674 <USBD_Get_USB_Status>
 80104f6:	4603      	mov	r3, r0
 80104f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801051c:	2b00      	cmp	r3, #0
 801051e:	da0b      	bge.n	8010538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010520:	78fb      	ldrb	r3, [r7, #3]
 8010522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010526:	68f9      	ldr	r1, [r7, #12]
 8010528:	4613      	mov	r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	4413      	add	r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	440b      	add	r3, r1
 8010532:	333e      	adds	r3, #62	; 0x3e
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	e00b      	b.n	8010550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010538:	78fb      	ldrb	r3, [r7, #3]
 801053a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801053e:	68f9      	ldr	r1, [r7, #12]
 8010540:	4613      	mov	r3, r2
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	4413      	add	r3, r2
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	440b      	add	r3, r1
 801054a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801054e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010550:	4618      	mov	r0, r3
 8010552:	3714      	adds	r7, #20
 8010554:	46bd      	mov	sp, r7
 8010556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055a:	4770      	bx	lr

0801055c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	460b      	mov	r3, r1
 8010566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010576:	78fa      	ldrb	r2, [r7, #3]
 8010578:	4611      	mov	r1, r2
 801057a:	4618      	mov	r0, r3
 801057c:	f7f2 fdfe 	bl	800317c <HAL_PCD_SetAddress>
 8010580:	4603      	mov	r3, r0
 8010582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4618      	mov	r0, r3
 8010588:	f000 f874 	bl	8010674 <USBD_Get_USB_Status>
 801058c:	4603      	mov	r3, r0
 801058e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010590:	7bbb      	ldrb	r3, [r7, #14]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b086      	sub	sp, #24
 801059e:	af00      	add	r7, sp, #0
 80105a0:	60f8      	str	r0, [r7, #12]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
 80105a6:	460b      	mov	r3, r1
 80105a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ae:	2300      	movs	r3, #0
 80105b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80105b8:	7af9      	ldrb	r1, [r7, #11]
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	f7f2 ff17 	bl	80033f0 <HAL_PCD_EP_Transmit>
 80105c2:	4603      	mov	r3, r0
 80105c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c6:	7dfb      	ldrb	r3, [r7, #23]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 f853 	bl	8010674 <USBD_Get_USB_Status>
 80105ce:	4603      	mov	r3, r0
 80105d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3718      	adds	r7, #24
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b086      	sub	sp, #24
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	607a      	str	r2, [r7, #4]
 80105e6:	603b      	str	r3, [r7, #0]
 80105e8:	460b      	mov	r3, r1
 80105ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80105fa:	7af9      	ldrb	r1, [r7, #11]
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	f7f2 fe93 	bl	800332a <HAL_PCD_EP_Receive>
 8010604:	4603      	mov	r3, r0
 8010606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010608:	7dfb      	ldrb	r3, [r7, #23]
 801060a:	4618      	mov	r0, r3
 801060c:	f000 f832 	bl	8010674 <USBD_Get_USB_Status>
 8010610:	4603      	mov	r3, r0
 8010612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010614:	7dbb      	ldrb	r3, [r7, #22]
}
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801061e:	b580      	push	{r7, lr}
 8010620:	b082      	sub	sp, #8
 8010622:	af00      	add	r7, sp, #0
 8010624:	6078      	str	r0, [r7, #4]
 8010626:	460b      	mov	r3, r1
 8010628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010630:	78fa      	ldrb	r2, [r7, #3]
 8010632:	4611      	mov	r1, r2
 8010634:	4618      	mov	r0, r3
 8010636:	f7f2 fec3 	bl	80033c0 <HAL_PCD_EP_GetRxCount>
 801063a:	4603      	mov	r3, r0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801064c:	4b03      	ldr	r3, [pc, #12]	; (801065c <USBD_static_malloc+0x18>)
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	20007f2c 	.word	0x20007f2c

08010660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]

}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
 801067a:	4603      	mov	r3, r0
 801067c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	2b03      	cmp	r3, #3
 8010686:	d817      	bhi.n	80106b8 <USBD_Get_USB_Status+0x44>
 8010688:	a201      	add	r2, pc, #4	; (adr r2, 8010690 <USBD_Get_USB_Status+0x1c>)
 801068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801068e:	bf00      	nop
 8010690:	080106a1 	.word	0x080106a1
 8010694:	080106a7 	.word	0x080106a7
 8010698:	080106ad 	.word	0x080106ad
 801069c:	080106b3 	.word	0x080106b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73fb      	strb	r3, [r7, #15]
    break;
 80106a4:	e00b      	b.n	80106be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106a6:	2303      	movs	r3, #3
 80106a8:	73fb      	strb	r3, [r7, #15]
    break;
 80106aa:	e008      	b.n	80106be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106ac:	2301      	movs	r3, #1
 80106ae:	73fb      	strb	r3, [r7, #15]
    break;
 80106b0:	e005      	b.n	80106be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106b2:	2303      	movs	r3, #3
 80106b4:	73fb      	strb	r3, [r7, #15]
    break;
 80106b6:	e002      	b.n	80106be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80106b8:	2303      	movs	r3, #3
 80106ba:	73fb      	strb	r3, [r7, #15]
    break;
 80106bc:	bf00      	nop
  }
  return usb_status;
 80106be:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3714      	adds	r7, #20
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <__errno>:
 80106cc:	4b01      	ldr	r3, [pc, #4]	; (80106d4 <__errno+0x8>)
 80106ce:	6818      	ldr	r0, [r3, #0]
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	20000118 	.word	0x20000118

080106d8 <__libc_init_array>:
 80106d8:	b570      	push	{r4, r5, r6, lr}
 80106da:	4d0d      	ldr	r5, [pc, #52]	; (8010710 <__libc_init_array+0x38>)
 80106dc:	4c0d      	ldr	r4, [pc, #52]	; (8010714 <__libc_init_array+0x3c>)
 80106de:	1b64      	subs	r4, r4, r5
 80106e0:	10a4      	asrs	r4, r4, #2
 80106e2:	2600      	movs	r6, #0
 80106e4:	42a6      	cmp	r6, r4
 80106e6:	d109      	bne.n	80106fc <__libc_init_array+0x24>
 80106e8:	4d0b      	ldr	r5, [pc, #44]	; (8010718 <__libc_init_array+0x40>)
 80106ea:	4c0c      	ldr	r4, [pc, #48]	; (801071c <__libc_init_array+0x44>)
 80106ec:	f000 fcf8 	bl	80110e0 <_init>
 80106f0:	1b64      	subs	r4, r4, r5
 80106f2:	10a4      	asrs	r4, r4, #2
 80106f4:	2600      	movs	r6, #0
 80106f6:	42a6      	cmp	r6, r4
 80106f8:	d105      	bne.n	8010706 <__libc_init_array+0x2e>
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010700:	4798      	blx	r3
 8010702:	3601      	adds	r6, #1
 8010704:	e7ee      	b.n	80106e4 <__libc_init_array+0xc>
 8010706:	f855 3b04 	ldr.w	r3, [r5], #4
 801070a:	4798      	blx	r3
 801070c:	3601      	adds	r6, #1
 801070e:	e7f2      	b.n	80106f6 <__libc_init_array+0x1e>
 8010710:	0801193c 	.word	0x0801193c
 8010714:	0801193c 	.word	0x0801193c
 8010718:	0801193c 	.word	0x0801193c
 801071c:	08011940 	.word	0x08011940

08010720 <__retarget_lock_acquire_recursive>:
 8010720:	4770      	bx	lr

08010722 <__retarget_lock_release_recursive>:
 8010722:	4770      	bx	lr

08010724 <memcpy>:
 8010724:	440a      	add	r2, r1
 8010726:	4291      	cmp	r1, r2
 8010728:	f100 33ff 	add.w	r3, r0, #4294967295
 801072c:	d100      	bne.n	8010730 <memcpy+0xc>
 801072e:	4770      	bx	lr
 8010730:	b510      	push	{r4, lr}
 8010732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010736:	f803 4f01 	strb.w	r4, [r3, #1]!
 801073a:	4291      	cmp	r1, r2
 801073c:	d1f9      	bne.n	8010732 <memcpy+0xe>
 801073e:	bd10      	pop	{r4, pc}

08010740 <memset>:
 8010740:	4402      	add	r2, r0
 8010742:	4603      	mov	r3, r0
 8010744:	4293      	cmp	r3, r2
 8010746:	d100      	bne.n	801074a <memset+0xa>
 8010748:	4770      	bx	lr
 801074a:	f803 1b01 	strb.w	r1, [r3], #1
 801074e:	e7f9      	b.n	8010744 <memset+0x4>

08010750 <sbrk_aligned>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	4e0e      	ldr	r6, [pc, #56]	; (801078c <sbrk_aligned+0x3c>)
 8010754:	460c      	mov	r4, r1
 8010756:	6831      	ldr	r1, [r6, #0]
 8010758:	4605      	mov	r5, r0
 801075a:	b911      	cbnz	r1, 8010762 <sbrk_aligned+0x12>
 801075c:	f000 f8f6 	bl	801094c <_sbrk_r>
 8010760:	6030      	str	r0, [r6, #0]
 8010762:	4621      	mov	r1, r4
 8010764:	4628      	mov	r0, r5
 8010766:	f000 f8f1 	bl	801094c <_sbrk_r>
 801076a:	1c43      	adds	r3, r0, #1
 801076c:	d00a      	beq.n	8010784 <sbrk_aligned+0x34>
 801076e:	1cc4      	adds	r4, r0, #3
 8010770:	f024 0403 	bic.w	r4, r4, #3
 8010774:	42a0      	cmp	r0, r4
 8010776:	d007      	beq.n	8010788 <sbrk_aligned+0x38>
 8010778:	1a21      	subs	r1, r4, r0
 801077a:	4628      	mov	r0, r5
 801077c:	f000 f8e6 	bl	801094c <_sbrk_r>
 8010780:	3001      	adds	r0, #1
 8010782:	d101      	bne.n	8010788 <sbrk_aligned+0x38>
 8010784:	f04f 34ff 	mov.w	r4, #4294967295
 8010788:	4620      	mov	r0, r4
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	20008154 	.word	0x20008154

08010790 <_malloc_r>:
 8010790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	1ccd      	adds	r5, r1, #3
 8010796:	f025 0503 	bic.w	r5, r5, #3
 801079a:	3508      	adds	r5, #8
 801079c:	2d0c      	cmp	r5, #12
 801079e:	bf38      	it	cc
 80107a0:	250c      	movcc	r5, #12
 80107a2:	2d00      	cmp	r5, #0
 80107a4:	4607      	mov	r7, r0
 80107a6:	db01      	blt.n	80107ac <_malloc_r+0x1c>
 80107a8:	42a9      	cmp	r1, r5
 80107aa:	d905      	bls.n	80107b8 <_malloc_r+0x28>
 80107ac:	230c      	movs	r3, #12
 80107ae:	603b      	str	r3, [r7, #0]
 80107b0:	2600      	movs	r6, #0
 80107b2:	4630      	mov	r0, r6
 80107b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b8:	4e2e      	ldr	r6, [pc, #184]	; (8010874 <_malloc_r+0xe4>)
 80107ba:	f000 f8f7 	bl	80109ac <__malloc_lock>
 80107be:	6833      	ldr	r3, [r6, #0]
 80107c0:	461c      	mov	r4, r3
 80107c2:	bb34      	cbnz	r4, 8010812 <_malloc_r+0x82>
 80107c4:	4629      	mov	r1, r5
 80107c6:	4638      	mov	r0, r7
 80107c8:	f7ff ffc2 	bl	8010750 <sbrk_aligned>
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	4604      	mov	r4, r0
 80107d0:	d14d      	bne.n	801086e <_malloc_r+0xde>
 80107d2:	6834      	ldr	r4, [r6, #0]
 80107d4:	4626      	mov	r6, r4
 80107d6:	2e00      	cmp	r6, #0
 80107d8:	d140      	bne.n	801085c <_malloc_r+0xcc>
 80107da:	6823      	ldr	r3, [r4, #0]
 80107dc:	4631      	mov	r1, r6
 80107de:	4638      	mov	r0, r7
 80107e0:	eb04 0803 	add.w	r8, r4, r3
 80107e4:	f000 f8b2 	bl	801094c <_sbrk_r>
 80107e8:	4580      	cmp	r8, r0
 80107ea:	d13a      	bne.n	8010862 <_malloc_r+0xd2>
 80107ec:	6821      	ldr	r1, [r4, #0]
 80107ee:	3503      	adds	r5, #3
 80107f0:	1a6d      	subs	r5, r5, r1
 80107f2:	f025 0503 	bic.w	r5, r5, #3
 80107f6:	3508      	adds	r5, #8
 80107f8:	2d0c      	cmp	r5, #12
 80107fa:	bf38      	it	cc
 80107fc:	250c      	movcc	r5, #12
 80107fe:	4629      	mov	r1, r5
 8010800:	4638      	mov	r0, r7
 8010802:	f7ff ffa5 	bl	8010750 <sbrk_aligned>
 8010806:	3001      	adds	r0, #1
 8010808:	d02b      	beq.n	8010862 <_malloc_r+0xd2>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	442b      	add	r3, r5
 801080e:	6023      	str	r3, [r4, #0]
 8010810:	e00e      	b.n	8010830 <_malloc_r+0xa0>
 8010812:	6822      	ldr	r2, [r4, #0]
 8010814:	1b52      	subs	r2, r2, r5
 8010816:	d41e      	bmi.n	8010856 <_malloc_r+0xc6>
 8010818:	2a0b      	cmp	r2, #11
 801081a:	d916      	bls.n	801084a <_malloc_r+0xba>
 801081c:	1961      	adds	r1, r4, r5
 801081e:	42a3      	cmp	r3, r4
 8010820:	6025      	str	r5, [r4, #0]
 8010822:	bf18      	it	ne
 8010824:	6059      	strne	r1, [r3, #4]
 8010826:	6863      	ldr	r3, [r4, #4]
 8010828:	bf08      	it	eq
 801082a:	6031      	streq	r1, [r6, #0]
 801082c:	5162      	str	r2, [r4, r5]
 801082e:	604b      	str	r3, [r1, #4]
 8010830:	4638      	mov	r0, r7
 8010832:	f104 060b 	add.w	r6, r4, #11
 8010836:	f000 f8bf 	bl	80109b8 <__malloc_unlock>
 801083a:	f026 0607 	bic.w	r6, r6, #7
 801083e:	1d23      	adds	r3, r4, #4
 8010840:	1af2      	subs	r2, r6, r3
 8010842:	d0b6      	beq.n	80107b2 <_malloc_r+0x22>
 8010844:	1b9b      	subs	r3, r3, r6
 8010846:	50a3      	str	r3, [r4, r2]
 8010848:	e7b3      	b.n	80107b2 <_malloc_r+0x22>
 801084a:	6862      	ldr	r2, [r4, #4]
 801084c:	42a3      	cmp	r3, r4
 801084e:	bf0c      	ite	eq
 8010850:	6032      	streq	r2, [r6, #0]
 8010852:	605a      	strne	r2, [r3, #4]
 8010854:	e7ec      	b.n	8010830 <_malloc_r+0xa0>
 8010856:	4623      	mov	r3, r4
 8010858:	6864      	ldr	r4, [r4, #4]
 801085a:	e7b2      	b.n	80107c2 <_malloc_r+0x32>
 801085c:	4634      	mov	r4, r6
 801085e:	6876      	ldr	r6, [r6, #4]
 8010860:	e7b9      	b.n	80107d6 <_malloc_r+0x46>
 8010862:	230c      	movs	r3, #12
 8010864:	603b      	str	r3, [r7, #0]
 8010866:	4638      	mov	r0, r7
 8010868:	f000 f8a6 	bl	80109b8 <__malloc_unlock>
 801086c:	e7a1      	b.n	80107b2 <_malloc_r+0x22>
 801086e:	6025      	str	r5, [r4, #0]
 8010870:	e7de      	b.n	8010830 <_malloc_r+0xa0>
 8010872:	bf00      	nop
 8010874:	20008150 	.word	0x20008150

08010878 <cleanup_glue>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	460c      	mov	r4, r1
 801087c:	6809      	ldr	r1, [r1, #0]
 801087e:	4605      	mov	r5, r0
 8010880:	b109      	cbz	r1, 8010886 <cleanup_glue+0xe>
 8010882:	f7ff fff9 	bl	8010878 <cleanup_glue>
 8010886:	4621      	mov	r1, r4
 8010888:	4628      	mov	r0, r5
 801088a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801088e:	f000 b899 	b.w	80109c4 <_free_r>
	...

08010894 <_reclaim_reent>:
 8010894:	4b2c      	ldr	r3, [pc, #176]	; (8010948 <_reclaim_reent+0xb4>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4283      	cmp	r3, r0
 801089a:	b570      	push	{r4, r5, r6, lr}
 801089c:	4604      	mov	r4, r0
 801089e:	d051      	beq.n	8010944 <_reclaim_reent+0xb0>
 80108a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80108a2:	b143      	cbz	r3, 80108b6 <_reclaim_reent+0x22>
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d14a      	bne.n	8010940 <_reclaim_reent+0xac>
 80108aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108ac:	6819      	ldr	r1, [r3, #0]
 80108ae:	b111      	cbz	r1, 80108b6 <_reclaim_reent+0x22>
 80108b0:	4620      	mov	r0, r4
 80108b2:	f000 f887 	bl	80109c4 <_free_r>
 80108b6:	6961      	ldr	r1, [r4, #20]
 80108b8:	b111      	cbz	r1, 80108c0 <_reclaim_reent+0x2c>
 80108ba:	4620      	mov	r0, r4
 80108bc:	f000 f882 	bl	80109c4 <_free_r>
 80108c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80108c2:	b111      	cbz	r1, 80108ca <_reclaim_reent+0x36>
 80108c4:	4620      	mov	r0, r4
 80108c6:	f000 f87d 	bl	80109c4 <_free_r>
 80108ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80108cc:	b111      	cbz	r1, 80108d4 <_reclaim_reent+0x40>
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 f878 	bl	80109c4 <_free_r>
 80108d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80108d6:	b111      	cbz	r1, 80108de <_reclaim_reent+0x4a>
 80108d8:	4620      	mov	r0, r4
 80108da:	f000 f873 	bl	80109c4 <_free_r>
 80108de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80108e0:	b111      	cbz	r1, 80108e8 <_reclaim_reent+0x54>
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 f86e 	bl	80109c4 <_free_r>
 80108e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80108ea:	b111      	cbz	r1, 80108f2 <_reclaim_reent+0x5e>
 80108ec:	4620      	mov	r0, r4
 80108ee:	f000 f869 	bl	80109c4 <_free_r>
 80108f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80108f4:	b111      	cbz	r1, 80108fc <_reclaim_reent+0x68>
 80108f6:	4620      	mov	r0, r4
 80108f8:	f000 f864 	bl	80109c4 <_free_r>
 80108fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108fe:	b111      	cbz	r1, 8010906 <_reclaim_reent+0x72>
 8010900:	4620      	mov	r0, r4
 8010902:	f000 f85f 	bl	80109c4 <_free_r>
 8010906:	69a3      	ldr	r3, [r4, #24]
 8010908:	b1e3      	cbz	r3, 8010944 <_reclaim_reent+0xb0>
 801090a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801090c:	4620      	mov	r0, r4
 801090e:	4798      	blx	r3
 8010910:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010912:	b1b9      	cbz	r1, 8010944 <_reclaim_reent+0xb0>
 8010914:	4620      	mov	r0, r4
 8010916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801091a:	f7ff bfad 	b.w	8010878 <cleanup_glue>
 801091e:	5949      	ldr	r1, [r1, r5]
 8010920:	b941      	cbnz	r1, 8010934 <_reclaim_reent+0xa0>
 8010922:	3504      	adds	r5, #4
 8010924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010926:	2d80      	cmp	r5, #128	; 0x80
 8010928:	68d9      	ldr	r1, [r3, #12]
 801092a:	d1f8      	bne.n	801091e <_reclaim_reent+0x8a>
 801092c:	4620      	mov	r0, r4
 801092e:	f000 f849 	bl	80109c4 <_free_r>
 8010932:	e7ba      	b.n	80108aa <_reclaim_reent+0x16>
 8010934:	680e      	ldr	r6, [r1, #0]
 8010936:	4620      	mov	r0, r4
 8010938:	f000 f844 	bl	80109c4 <_free_r>
 801093c:	4631      	mov	r1, r6
 801093e:	e7ef      	b.n	8010920 <_reclaim_reent+0x8c>
 8010940:	2500      	movs	r5, #0
 8010942:	e7ef      	b.n	8010924 <_reclaim_reent+0x90>
 8010944:	bd70      	pop	{r4, r5, r6, pc}
 8010946:	bf00      	nop
 8010948:	20000118 	.word	0x20000118

0801094c <_sbrk_r>:
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	4d06      	ldr	r5, [pc, #24]	; (8010968 <_sbrk_r+0x1c>)
 8010950:	2300      	movs	r3, #0
 8010952:	4604      	mov	r4, r0
 8010954:	4608      	mov	r0, r1
 8010956:	602b      	str	r3, [r5, #0]
 8010958:	f7f1 faca 	bl	8001ef0 <_sbrk>
 801095c:	1c43      	adds	r3, r0, #1
 801095e:	d102      	bne.n	8010966 <_sbrk_r+0x1a>
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	b103      	cbz	r3, 8010966 <_sbrk_r+0x1a>
 8010964:	6023      	str	r3, [r4, #0]
 8010966:	bd38      	pop	{r3, r4, r5, pc}
 8010968:	20008158 	.word	0x20008158

0801096c <siprintf>:
 801096c:	b40e      	push	{r1, r2, r3}
 801096e:	b500      	push	{lr}
 8010970:	b09c      	sub	sp, #112	; 0x70
 8010972:	ab1d      	add	r3, sp, #116	; 0x74
 8010974:	9002      	str	r0, [sp, #8]
 8010976:	9006      	str	r0, [sp, #24]
 8010978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801097c:	4809      	ldr	r0, [pc, #36]	; (80109a4 <siprintf+0x38>)
 801097e:	9107      	str	r1, [sp, #28]
 8010980:	9104      	str	r1, [sp, #16]
 8010982:	4909      	ldr	r1, [pc, #36]	; (80109a8 <siprintf+0x3c>)
 8010984:	f853 2b04 	ldr.w	r2, [r3], #4
 8010988:	9105      	str	r1, [sp, #20]
 801098a:	6800      	ldr	r0, [r0, #0]
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	a902      	add	r1, sp, #8
 8010990:	f000 f8c0 	bl	8010b14 <_svfiprintf_r>
 8010994:	9b02      	ldr	r3, [sp, #8]
 8010996:	2200      	movs	r2, #0
 8010998:	701a      	strb	r2, [r3, #0]
 801099a:	b01c      	add	sp, #112	; 0x70
 801099c:	f85d eb04 	ldr.w	lr, [sp], #4
 80109a0:	b003      	add	sp, #12
 80109a2:	4770      	bx	lr
 80109a4:	20000118 	.word	0x20000118
 80109a8:	ffff0208 	.word	0xffff0208

080109ac <__malloc_lock>:
 80109ac:	4801      	ldr	r0, [pc, #4]	; (80109b4 <__malloc_lock+0x8>)
 80109ae:	f7ff beb7 	b.w	8010720 <__retarget_lock_acquire_recursive>
 80109b2:	bf00      	nop
 80109b4:	2000814c 	.word	0x2000814c

080109b8 <__malloc_unlock>:
 80109b8:	4801      	ldr	r0, [pc, #4]	; (80109c0 <__malloc_unlock+0x8>)
 80109ba:	f7ff beb2 	b.w	8010722 <__retarget_lock_release_recursive>
 80109be:	bf00      	nop
 80109c0:	2000814c 	.word	0x2000814c

080109c4 <_free_r>:
 80109c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109c6:	2900      	cmp	r1, #0
 80109c8:	d044      	beq.n	8010a54 <_free_r+0x90>
 80109ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ce:	9001      	str	r0, [sp, #4]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f1a1 0404 	sub.w	r4, r1, #4
 80109d6:	bfb8      	it	lt
 80109d8:	18e4      	addlt	r4, r4, r3
 80109da:	f7ff ffe7 	bl	80109ac <__malloc_lock>
 80109de:	4a1e      	ldr	r2, [pc, #120]	; (8010a58 <_free_r+0x94>)
 80109e0:	9801      	ldr	r0, [sp, #4]
 80109e2:	6813      	ldr	r3, [r2, #0]
 80109e4:	b933      	cbnz	r3, 80109f4 <_free_r+0x30>
 80109e6:	6063      	str	r3, [r4, #4]
 80109e8:	6014      	str	r4, [r2, #0]
 80109ea:	b003      	add	sp, #12
 80109ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109f0:	f7ff bfe2 	b.w	80109b8 <__malloc_unlock>
 80109f4:	42a3      	cmp	r3, r4
 80109f6:	d908      	bls.n	8010a0a <_free_r+0x46>
 80109f8:	6825      	ldr	r5, [r4, #0]
 80109fa:	1961      	adds	r1, r4, r5
 80109fc:	428b      	cmp	r3, r1
 80109fe:	bf01      	itttt	eq
 8010a00:	6819      	ldreq	r1, [r3, #0]
 8010a02:	685b      	ldreq	r3, [r3, #4]
 8010a04:	1949      	addeq	r1, r1, r5
 8010a06:	6021      	streq	r1, [r4, #0]
 8010a08:	e7ed      	b.n	80109e6 <_free_r+0x22>
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	b10b      	cbz	r3, 8010a14 <_free_r+0x50>
 8010a10:	42a3      	cmp	r3, r4
 8010a12:	d9fa      	bls.n	8010a0a <_free_r+0x46>
 8010a14:	6811      	ldr	r1, [r2, #0]
 8010a16:	1855      	adds	r5, r2, r1
 8010a18:	42a5      	cmp	r5, r4
 8010a1a:	d10b      	bne.n	8010a34 <_free_r+0x70>
 8010a1c:	6824      	ldr	r4, [r4, #0]
 8010a1e:	4421      	add	r1, r4
 8010a20:	1854      	adds	r4, r2, r1
 8010a22:	42a3      	cmp	r3, r4
 8010a24:	6011      	str	r1, [r2, #0]
 8010a26:	d1e0      	bne.n	80109ea <_free_r+0x26>
 8010a28:	681c      	ldr	r4, [r3, #0]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	6053      	str	r3, [r2, #4]
 8010a2e:	4421      	add	r1, r4
 8010a30:	6011      	str	r1, [r2, #0]
 8010a32:	e7da      	b.n	80109ea <_free_r+0x26>
 8010a34:	d902      	bls.n	8010a3c <_free_r+0x78>
 8010a36:	230c      	movs	r3, #12
 8010a38:	6003      	str	r3, [r0, #0]
 8010a3a:	e7d6      	b.n	80109ea <_free_r+0x26>
 8010a3c:	6825      	ldr	r5, [r4, #0]
 8010a3e:	1961      	adds	r1, r4, r5
 8010a40:	428b      	cmp	r3, r1
 8010a42:	bf04      	itt	eq
 8010a44:	6819      	ldreq	r1, [r3, #0]
 8010a46:	685b      	ldreq	r3, [r3, #4]
 8010a48:	6063      	str	r3, [r4, #4]
 8010a4a:	bf04      	itt	eq
 8010a4c:	1949      	addeq	r1, r1, r5
 8010a4e:	6021      	streq	r1, [r4, #0]
 8010a50:	6054      	str	r4, [r2, #4]
 8010a52:	e7ca      	b.n	80109ea <_free_r+0x26>
 8010a54:	b003      	add	sp, #12
 8010a56:	bd30      	pop	{r4, r5, pc}
 8010a58:	20008150 	.word	0x20008150

08010a5c <__ssputs_r>:
 8010a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a60:	688e      	ldr	r6, [r1, #8]
 8010a62:	429e      	cmp	r6, r3
 8010a64:	4682      	mov	sl, r0
 8010a66:	460c      	mov	r4, r1
 8010a68:	4690      	mov	r8, r2
 8010a6a:	461f      	mov	r7, r3
 8010a6c:	d838      	bhi.n	8010ae0 <__ssputs_r+0x84>
 8010a6e:	898a      	ldrh	r2, [r1, #12]
 8010a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a74:	d032      	beq.n	8010adc <__ssputs_r+0x80>
 8010a76:	6825      	ldr	r5, [r4, #0]
 8010a78:	6909      	ldr	r1, [r1, #16]
 8010a7a:	eba5 0901 	sub.w	r9, r5, r1
 8010a7e:	6965      	ldr	r5, [r4, #20]
 8010a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a88:	3301      	adds	r3, #1
 8010a8a:	444b      	add	r3, r9
 8010a8c:	106d      	asrs	r5, r5, #1
 8010a8e:	429d      	cmp	r5, r3
 8010a90:	bf38      	it	cc
 8010a92:	461d      	movcc	r5, r3
 8010a94:	0553      	lsls	r3, r2, #21
 8010a96:	d531      	bpl.n	8010afc <__ssputs_r+0xa0>
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7ff fe79 	bl	8010790 <_malloc_r>
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	b950      	cbnz	r0, 8010ab8 <__ssputs_r+0x5c>
 8010aa2:	230c      	movs	r3, #12
 8010aa4:	f8ca 3000 	str.w	r3, [sl]
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab8:	6921      	ldr	r1, [r4, #16]
 8010aba:	464a      	mov	r2, r9
 8010abc:	f7ff fe32 	bl	8010724 <memcpy>
 8010ac0:	89a3      	ldrh	r3, [r4, #12]
 8010ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aca:	81a3      	strh	r3, [r4, #12]
 8010acc:	6126      	str	r6, [r4, #16]
 8010ace:	6165      	str	r5, [r4, #20]
 8010ad0:	444e      	add	r6, r9
 8010ad2:	eba5 0509 	sub.w	r5, r5, r9
 8010ad6:	6026      	str	r6, [r4, #0]
 8010ad8:	60a5      	str	r5, [r4, #8]
 8010ada:	463e      	mov	r6, r7
 8010adc:	42be      	cmp	r6, r7
 8010ade:	d900      	bls.n	8010ae2 <__ssputs_r+0x86>
 8010ae0:	463e      	mov	r6, r7
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	4632      	mov	r2, r6
 8010ae6:	4641      	mov	r1, r8
 8010ae8:	f000 faa8 	bl	801103c <memmove>
 8010aec:	68a3      	ldr	r3, [r4, #8]
 8010aee:	1b9b      	subs	r3, r3, r6
 8010af0:	60a3      	str	r3, [r4, #8]
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	4433      	add	r3, r6
 8010af6:	6023      	str	r3, [r4, #0]
 8010af8:	2000      	movs	r0, #0
 8010afa:	e7db      	b.n	8010ab4 <__ssputs_r+0x58>
 8010afc:	462a      	mov	r2, r5
 8010afe:	f000 fab7 	bl	8011070 <_realloc_r>
 8010b02:	4606      	mov	r6, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d1e1      	bne.n	8010acc <__ssputs_r+0x70>
 8010b08:	6921      	ldr	r1, [r4, #16]
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f7ff ff5a 	bl	80109c4 <_free_r>
 8010b10:	e7c7      	b.n	8010aa2 <__ssputs_r+0x46>
	...

08010b14 <_svfiprintf_r>:
 8010b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b18:	4698      	mov	r8, r3
 8010b1a:	898b      	ldrh	r3, [r1, #12]
 8010b1c:	061b      	lsls	r3, r3, #24
 8010b1e:	b09d      	sub	sp, #116	; 0x74
 8010b20:	4607      	mov	r7, r0
 8010b22:	460d      	mov	r5, r1
 8010b24:	4614      	mov	r4, r2
 8010b26:	d50e      	bpl.n	8010b46 <_svfiprintf_r+0x32>
 8010b28:	690b      	ldr	r3, [r1, #16]
 8010b2a:	b963      	cbnz	r3, 8010b46 <_svfiprintf_r+0x32>
 8010b2c:	2140      	movs	r1, #64	; 0x40
 8010b2e:	f7ff fe2f 	bl	8010790 <_malloc_r>
 8010b32:	6028      	str	r0, [r5, #0]
 8010b34:	6128      	str	r0, [r5, #16]
 8010b36:	b920      	cbnz	r0, 8010b42 <_svfiprintf_r+0x2e>
 8010b38:	230c      	movs	r3, #12
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b40:	e0d1      	b.n	8010ce6 <_svfiprintf_r+0x1d2>
 8010b42:	2340      	movs	r3, #64	; 0x40
 8010b44:	616b      	str	r3, [r5, #20]
 8010b46:	2300      	movs	r3, #0
 8010b48:	9309      	str	r3, [sp, #36]	; 0x24
 8010b4a:	2320      	movs	r3, #32
 8010b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b54:	2330      	movs	r3, #48	; 0x30
 8010b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010d00 <_svfiprintf_r+0x1ec>
 8010b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b5e:	f04f 0901 	mov.w	r9, #1
 8010b62:	4623      	mov	r3, r4
 8010b64:	469a      	mov	sl, r3
 8010b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b6a:	b10a      	cbz	r2, 8010b70 <_svfiprintf_r+0x5c>
 8010b6c:	2a25      	cmp	r2, #37	; 0x25
 8010b6e:	d1f9      	bne.n	8010b64 <_svfiprintf_r+0x50>
 8010b70:	ebba 0b04 	subs.w	fp, sl, r4
 8010b74:	d00b      	beq.n	8010b8e <_svfiprintf_r+0x7a>
 8010b76:	465b      	mov	r3, fp
 8010b78:	4622      	mov	r2, r4
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	f7ff ff6d 	bl	8010a5c <__ssputs_r>
 8010b82:	3001      	adds	r0, #1
 8010b84:	f000 80aa 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b8a:	445a      	add	r2, fp
 8010b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f000 80a2 	beq.w	8010cdc <_svfiprintf_r+0x1c8>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ba2:	f10a 0a01 	add.w	sl, sl, #1
 8010ba6:	9304      	str	r3, [sp, #16]
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bae:	931a      	str	r3, [sp, #104]	; 0x68
 8010bb0:	4654      	mov	r4, sl
 8010bb2:	2205      	movs	r2, #5
 8010bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb8:	4851      	ldr	r0, [pc, #324]	; (8010d00 <_svfiprintf_r+0x1ec>)
 8010bba:	f7ef fb19 	bl	80001f0 <memchr>
 8010bbe:	9a04      	ldr	r2, [sp, #16]
 8010bc0:	b9d8      	cbnz	r0, 8010bfa <_svfiprintf_r+0xe6>
 8010bc2:	06d0      	lsls	r0, r2, #27
 8010bc4:	bf44      	itt	mi
 8010bc6:	2320      	movmi	r3, #32
 8010bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bcc:	0711      	lsls	r1, r2, #28
 8010bce:	bf44      	itt	mi
 8010bd0:	232b      	movmi	r3, #43	; 0x2b
 8010bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8010bda:	2b2a      	cmp	r3, #42	; 0x2a
 8010bdc:	d015      	beq.n	8010c0a <_svfiprintf_r+0xf6>
 8010bde:	9a07      	ldr	r2, [sp, #28]
 8010be0:	4654      	mov	r4, sl
 8010be2:	2000      	movs	r0, #0
 8010be4:	f04f 0c0a 	mov.w	ip, #10
 8010be8:	4621      	mov	r1, r4
 8010bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bee:	3b30      	subs	r3, #48	; 0x30
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	d94e      	bls.n	8010c92 <_svfiprintf_r+0x17e>
 8010bf4:	b1b0      	cbz	r0, 8010c24 <_svfiprintf_r+0x110>
 8010bf6:	9207      	str	r2, [sp, #28]
 8010bf8:	e014      	b.n	8010c24 <_svfiprintf_r+0x110>
 8010bfa:	eba0 0308 	sub.w	r3, r0, r8
 8010bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8010c02:	4313      	orrs	r3, r2
 8010c04:	9304      	str	r3, [sp, #16]
 8010c06:	46a2      	mov	sl, r4
 8010c08:	e7d2      	b.n	8010bb0 <_svfiprintf_r+0x9c>
 8010c0a:	9b03      	ldr	r3, [sp, #12]
 8010c0c:	1d19      	adds	r1, r3, #4
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	9103      	str	r1, [sp, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfbb      	ittet	lt
 8010c16:	425b      	neglt	r3, r3
 8010c18:	f042 0202 	orrlt.w	r2, r2, #2
 8010c1c:	9307      	strge	r3, [sp, #28]
 8010c1e:	9307      	strlt	r3, [sp, #28]
 8010c20:	bfb8      	it	lt
 8010c22:	9204      	strlt	r2, [sp, #16]
 8010c24:	7823      	ldrb	r3, [r4, #0]
 8010c26:	2b2e      	cmp	r3, #46	; 0x2e
 8010c28:	d10c      	bne.n	8010c44 <_svfiprintf_r+0x130>
 8010c2a:	7863      	ldrb	r3, [r4, #1]
 8010c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010c2e:	d135      	bne.n	8010c9c <_svfiprintf_r+0x188>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	9203      	str	r2, [sp, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	bfb8      	it	lt
 8010c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c40:	3402      	adds	r4, #2
 8010c42:	9305      	str	r3, [sp, #20]
 8010c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d10 <_svfiprintf_r+0x1fc>
 8010c48:	7821      	ldrb	r1, [r4, #0]
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	4650      	mov	r0, sl
 8010c4e:	f7ef facf 	bl	80001f0 <memchr>
 8010c52:	b140      	cbz	r0, 8010c66 <_svfiprintf_r+0x152>
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	eba0 000a 	sub.w	r0, r0, sl
 8010c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c5e:	9b04      	ldr	r3, [sp, #16]
 8010c60:	4303      	orrs	r3, r0
 8010c62:	3401      	adds	r4, #1
 8010c64:	9304      	str	r3, [sp, #16]
 8010c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c6a:	4826      	ldr	r0, [pc, #152]	; (8010d04 <_svfiprintf_r+0x1f0>)
 8010c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c70:	2206      	movs	r2, #6
 8010c72:	f7ef fabd 	bl	80001f0 <memchr>
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d038      	beq.n	8010cec <_svfiprintf_r+0x1d8>
 8010c7a:	4b23      	ldr	r3, [pc, #140]	; (8010d08 <_svfiprintf_r+0x1f4>)
 8010c7c:	bb1b      	cbnz	r3, 8010cc6 <_svfiprintf_r+0x1b2>
 8010c7e:	9b03      	ldr	r3, [sp, #12]
 8010c80:	3307      	adds	r3, #7
 8010c82:	f023 0307 	bic.w	r3, r3, #7
 8010c86:	3308      	adds	r3, #8
 8010c88:	9303      	str	r3, [sp, #12]
 8010c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c8c:	4433      	add	r3, r6
 8010c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c90:	e767      	b.n	8010b62 <_svfiprintf_r+0x4e>
 8010c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c96:	460c      	mov	r4, r1
 8010c98:	2001      	movs	r0, #1
 8010c9a:	e7a5      	b.n	8010be8 <_svfiprintf_r+0xd4>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	3401      	adds	r4, #1
 8010ca0:	9305      	str	r3, [sp, #20]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	f04f 0c0a 	mov.w	ip, #10
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cae:	3a30      	subs	r2, #48	; 0x30
 8010cb0:	2a09      	cmp	r2, #9
 8010cb2:	d903      	bls.n	8010cbc <_svfiprintf_r+0x1a8>
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d0c5      	beq.n	8010c44 <_svfiprintf_r+0x130>
 8010cb8:	9105      	str	r1, [sp, #20]
 8010cba:	e7c3      	b.n	8010c44 <_svfiprintf_r+0x130>
 8010cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e7f0      	b.n	8010ca8 <_svfiprintf_r+0x194>
 8010cc6:	ab03      	add	r3, sp, #12
 8010cc8:	9300      	str	r3, [sp, #0]
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cce:	a904      	add	r1, sp, #16
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	f3af 8000 	nop.w
 8010cd6:	1c42      	adds	r2, r0, #1
 8010cd8:	4606      	mov	r6, r0
 8010cda:	d1d6      	bne.n	8010c8a <_svfiprintf_r+0x176>
 8010cdc:	89ab      	ldrh	r3, [r5, #12]
 8010cde:	065b      	lsls	r3, r3, #25
 8010ce0:	f53f af2c 	bmi.w	8010b3c <_svfiprintf_r+0x28>
 8010ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ce6:	b01d      	add	sp, #116	; 0x74
 8010ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cec:	ab03      	add	r3, sp, #12
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	4b06      	ldr	r3, [pc, #24]	; (8010d0c <_svfiprintf_r+0x1f8>)
 8010cf4:	a904      	add	r1, sp, #16
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	f000 f87a 	bl	8010df0 <_printf_i>
 8010cfc:	e7eb      	b.n	8010cd6 <_svfiprintf_r+0x1c2>
 8010cfe:	bf00      	nop
 8010d00:	08011900 	.word	0x08011900
 8010d04:	0801190a 	.word	0x0801190a
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	08010a5d 	.word	0x08010a5d
 8010d10:	08011906 	.word	0x08011906

08010d14 <_printf_common>:
 8010d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	4616      	mov	r6, r2
 8010d1a:	4699      	mov	r9, r3
 8010d1c:	688a      	ldr	r2, [r1, #8]
 8010d1e:	690b      	ldr	r3, [r1, #16]
 8010d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d24:	4293      	cmp	r3, r2
 8010d26:	bfb8      	it	lt
 8010d28:	4613      	movlt	r3, r2
 8010d2a:	6033      	str	r3, [r6, #0]
 8010d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d30:	4607      	mov	r7, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b10a      	cbz	r2, 8010d3a <_printf_common+0x26>
 8010d36:	3301      	adds	r3, #1
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	0699      	lsls	r1, r3, #26
 8010d3e:	bf42      	ittt	mi
 8010d40:	6833      	ldrmi	r3, [r6, #0]
 8010d42:	3302      	addmi	r3, #2
 8010d44:	6033      	strmi	r3, [r6, #0]
 8010d46:	6825      	ldr	r5, [r4, #0]
 8010d48:	f015 0506 	ands.w	r5, r5, #6
 8010d4c:	d106      	bne.n	8010d5c <_printf_common+0x48>
 8010d4e:	f104 0a19 	add.w	sl, r4, #25
 8010d52:	68e3      	ldr	r3, [r4, #12]
 8010d54:	6832      	ldr	r2, [r6, #0]
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	42ab      	cmp	r3, r5
 8010d5a:	dc26      	bgt.n	8010daa <_printf_common+0x96>
 8010d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d60:	1e13      	subs	r3, r2, #0
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	bf18      	it	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	0692      	lsls	r2, r2, #26
 8010d6a:	d42b      	bmi.n	8010dc4 <_printf_common+0xb0>
 8010d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d70:	4649      	mov	r1, r9
 8010d72:	4638      	mov	r0, r7
 8010d74:	47c0      	blx	r8
 8010d76:	3001      	adds	r0, #1
 8010d78:	d01e      	beq.n	8010db8 <_printf_common+0xa4>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	68e5      	ldr	r5, [r4, #12]
 8010d7e:	6832      	ldr	r2, [r6, #0]
 8010d80:	f003 0306 	and.w	r3, r3, #6
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	bf08      	it	eq
 8010d88:	1aad      	subeq	r5, r5, r2
 8010d8a:	68a3      	ldr	r3, [r4, #8]
 8010d8c:	6922      	ldr	r2, [r4, #16]
 8010d8e:	bf0c      	ite	eq
 8010d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d94:	2500      	movne	r5, #0
 8010d96:	4293      	cmp	r3, r2
 8010d98:	bfc4      	itt	gt
 8010d9a:	1a9b      	subgt	r3, r3, r2
 8010d9c:	18ed      	addgt	r5, r5, r3
 8010d9e:	2600      	movs	r6, #0
 8010da0:	341a      	adds	r4, #26
 8010da2:	42b5      	cmp	r5, r6
 8010da4:	d11a      	bne.n	8010ddc <_printf_common+0xc8>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e008      	b.n	8010dbc <_printf_common+0xa8>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4649      	mov	r1, r9
 8010db0:	4638      	mov	r0, r7
 8010db2:	47c0      	blx	r8
 8010db4:	3001      	adds	r0, #1
 8010db6:	d103      	bne.n	8010dc0 <_printf_common+0xac>
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	e7c6      	b.n	8010d52 <_printf_common+0x3e>
 8010dc4:	18e1      	adds	r1, r4, r3
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	2030      	movs	r0, #48	; 0x30
 8010dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dce:	4422      	add	r2, r4
 8010dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dd8:	3302      	adds	r3, #2
 8010dda:	e7c7      	b.n	8010d6c <_printf_common+0x58>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4622      	mov	r2, r4
 8010de0:	4649      	mov	r1, r9
 8010de2:	4638      	mov	r0, r7
 8010de4:	47c0      	blx	r8
 8010de6:	3001      	adds	r0, #1
 8010de8:	d0e6      	beq.n	8010db8 <_printf_common+0xa4>
 8010dea:	3601      	adds	r6, #1
 8010dec:	e7d9      	b.n	8010da2 <_printf_common+0x8e>
	...

08010df0 <_printf_i>:
 8010df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	7e0f      	ldrb	r7, [r1, #24]
 8010df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df8:	2f78      	cmp	r7, #120	; 0x78
 8010dfa:	4691      	mov	r9, r2
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	469a      	mov	sl, r3
 8010e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e06:	d807      	bhi.n	8010e18 <_printf_i+0x28>
 8010e08:	2f62      	cmp	r7, #98	; 0x62
 8010e0a:	d80a      	bhi.n	8010e22 <_printf_i+0x32>
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	f000 80d8 	beq.w	8010fc2 <_printf_i+0x1d2>
 8010e12:	2f58      	cmp	r7, #88	; 0x58
 8010e14:	f000 80a3 	beq.w	8010f5e <_printf_i+0x16e>
 8010e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e20:	e03a      	b.n	8010e98 <_printf_i+0xa8>
 8010e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e26:	2b15      	cmp	r3, #21
 8010e28:	d8f6      	bhi.n	8010e18 <_printf_i+0x28>
 8010e2a:	a101      	add	r1, pc, #4	; (adr r1, 8010e30 <_printf_i+0x40>)
 8010e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e30:	08010e89 	.word	0x08010e89
 8010e34:	08010e9d 	.word	0x08010e9d
 8010e38:	08010e19 	.word	0x08010e19
 8010e3c:	08010e19 	.word	0x08010e19
 8010e40:	08010e19 	.word	0x08010e19
 8010e44:	08010e19 	.word	0x08010e19
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08010e19 	.word	0x08010e19
 8010e50:	08010e19 	.word	0x08010e19
 8010e54:	08010e19 	.word	0x08010e19
 8010e58:	08010e19 	.word	0x08010e19
 8010e5c:	08010fa9 	.word	0x08010fa9
 8010e60:	08010ecd 	.word	0x08010ecd
 8010e64:	08010f8b 	.word	0x08010f8b
 8010e68:	08010e19 	.word	0x08010e19
 8010e6c:	08010e19 	.word	0x08010e19
 8010e70:	08010fcb 	.word	0x08010fcb
 8010e74:	08010e19 	.word	0x08010e19
 8010e78:	08010ecd 	.word	0x08010ecd
 8010e7c:	08010e19 	.word	0x08010e19
 8010e80:	08010e19 	.word	0x08010e19
 8010e84:	08010f93 	.word	0x08010f93
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	1d1a      	adds	r2, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	602a      	str	r2, [r5, #0]
 8010e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e0a3      	b.n	8010fe4 <_printf_i+0x1f4>
 8010e9c:	6820      	ldr	r0, [r4, #0]
 8010e9e:	6829      	ldr	r1, [r5, #0]
 8010ea0:	0606      	lsls	r6, r0, #24
 8010ea2:	f101 0304 	add.w	r3, r1, #4
 8010ea6:	d50a      	bpl.n	8010ebe <_printf_i+0xce>
 8010ea8:	680e      	ldr	r6, [r1, #0]
 8010eaa:	602b      	str	r3, [r5, #0]
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	da03      	bge.n	8010eb8 <_printf_i+0xc8>
 8010eb0:	232d      	movs	r3, #45	; 0x2d
 8010eb2:	4276      	negs	r6, r6
 8010eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eb8:	485e      	ldr	r0, [pc, #376]	; (8011034 <_printf_i+0x244>)
 8010eba:	230a      	movs	r3, #10
 8010ebc:	e019      	b.n	8010ef2 <_printf_i+0x102>
 8010ebe:	680e      	ldr	r6, [r1, #0]
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ec6:	bf18      	it	ne
 8010ec8:	b236      	sxthne	r6, r6
 8010eca:	e7ef      	b.n	8010eac <_printf_i+0xbc>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	6820      	ldr	r0, [r4, #0]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	6029      	str	r1, [r5, #0]
 8010ed4:	0601      	lsls	r1, r0, #24
 8010ed6:	d501      	bpl.n	8010edc <_printf_i+0xec>
 8010ed8:	681e      	ldr	r6, [r3, #0]
 8010eda:	e002      	b.n	8010ee2 <_printf_i+0xf2>
 8010edc:	0646      	lsls	r6, r0, #25
 8010ede:	d5fb      	bpl.n	8010ed8 <_printf_i+0xe8>
 8010ee0:	881e      	ldrh	r6, [r3, #0]
 8010ee2:	4854      	ldr	r0, [pc, #336]	; (8011034 <_printf_i+0x244>)
 8010ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8010ee6:	bf0c      	ite	eq
 8010ee8:	2308      	moveq	r3, #8
 8010eea:	230a      	movne	r3, #10
 8010eec:	2100      	movs	r1, #0
 8010eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ef2:	6865      	ldr	r5, [r4, #4]
 8010ef4:	60a5      	str	r5, [r4, #8]
 8010ef6:	2d00      	cmp	r5, #0
 8010ef8:	bfa2      	ittt	ge
 8010efa:	6821      	ldrge	r1, [r4, #0]
 8010efc:	f021 0104 	bicge.w	r1, r1, #4
 8010f00:	6021      	strge	r1, [r4, #0]
 8010f02:	b90e      	cbnz	r6, 8010f08 <_printf_i+0x118>
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	d04d      	beq.n	8010fa4 <_printf_i+0x1b4>
 8010f08:	4615      	mov	r5, r2
 8010f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8010f12:	5dc7      	ldrb	r7, [r0, r7]
 8010f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f18:	4637      	mov	r7, r6
 8010f1a:	42bb      	cmp	r3, r7
 8010f1c:	460e      	mov	r6, r1
 8010f1e:	d9f4      	bls.n	8010f0a <_printf_i+0x11a>
 8010f20:	2b08      	cmp	r3, #8
 8010f22:	d10b      	bne.n	8010f3c <_printf_i+0x14c>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	07de      	lsls	r6, r3, #31
 8010f28:	d508      	bpl.n	8010f3c <_printf_i+0x14c>
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6861      	ldr	r1, [r4, #4]
 8010f2e:	4299      	cmp	r1, r3
 8010f30:	bfde      	ittt	le
 8010f32:	2330      	movle	r3, #48	; 0x30
 8010f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f3c:	1b52      	subs	r2, r2, r5
 8010f3e:	6122      	str	r2, [r4, #16]
 8010f40:	f8cd a000 	str.w	sl, [sp]
 8010f44:	464b      	mov	r3, r9
 8010f46:	aa03      	add	r2, sp, #12
 8010f48:	4621      	mov	r1, r4
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	f7ff fee2 	bl	8010d14 <_printf_common>
 8010f50:	3001      	adds	r0, #1
 8010f52:	d14c      	bne.n	8010fee <_printf_i+0x1fe>
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	b004      	add	sp, #16
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	4835      	ldr	r0, [pc, #212]	; (8011034 <_printf_i+0x244>)
 8010f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f64:	6829      	ldr	r1, [r5, #0]
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f6c:	6029      	str	r1, [r5, #0]
 8010f6e:	061d      	lsls	r5, r3, #24
 8010f70:	d514      	bpl.n	8010f9c <_printf_i+0x1ac>
 8010f72:	07df      	lsls	r7, r3, #31
 8010f74:	bf44      	itt	mi
 8010f76:	f043 0320 	orrmi.w	r3, r3, #32
 8010f7a:	6023      	strmi	r3, [r4, #0]
 8010f7c:	b91e      	cbnz	r6, 8010f86 <_printf_i+0x196>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	f023 0320 	bic.w	r3, r3, #32
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	2310      	movs	r3, #16
 8010f88:	e7b0      	b.n	8010eec <_printf_i+0xfc>
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	f043 0320 	orr.w	r3, r3, #32
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	2378      	movs	r3, #120	; 0x78
 8010f94:	4828      	ldr	r0, [pc, #160]	; (8011038 <_printf_i+0x248>)
 8010f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f9a:	e7e3      	b.n	8010f64 <_printf_i+0x174>
 8010f9c:	0659      	lsls	r1, r3, #25
 8010f9e:	bf48      	it	mi
 8010fa0:	b2b6      	uxthmi	r6, r6
 8010fa2:	e7e6      	b.n	8010f72 <_printf_i+0x182>
 8010fa4:	4615      	mov	r5, r2
 8010fa6:	e7bb      	b.n	8010f20 <_printf_i+0x130>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	6826      	ldr	r6, [r4, #0]
 8010fac:	6961      	ldr	r1, [r4, #20]
 8010fae:	1d18      	adds	r0, r3, #4
 8010fb0:	6028      	str	r0, [r5, #0]
 8010fb2:	0635      	lsls	r5, r6, #24
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	d501      	bpl.n	8010fbc <_printf_i+0x1cc>
 8010fb8:	6019      	str	r1, [r3, #0]
 8010fba:	e002      	b.n	8010fc2 <_printf_i+0x1d2>
 8010fbc:	0670      	lsls	r0, r6, #25
 8010fbe:	d5fb      	bpl.n	8010fb8 <_printf_i+0x1c8>
 8010fc0:	8019      	strh	r1, [r3, #0]
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	4615      	mov	r5, r2
 8010fc8:	e7ba      	b.n	8010f40 <_printf_i+0x150>
 8010fca:	682b      	ldr	r3, [r5, #0]
 8010fcc:	1d1a      	adds	r2, r3, #4
 8010fce:	602a      	str	r2, [r5, #0]
 8010fd0:	681d      	ldr	r5, [r3, #0]
 8010fd2:	6862      	ldr	r2, [r4, #4]
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7ef f90a 	bl	80001f0 <memchr>
 8010fdc:	b108      	cbz	r0, 8010fe2 <_printf_i+0x1f2>
 8010fde:	1b40      	subs	r0, r0, r5
 8010fe0:	6060      	str	r0, [r4, #4]
 8010fe2:	6863      	ldr	r3, [r4, #4]
 8010fe4:	6123      	str	r3, [r4, #16]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fec:	e7a8      	b.n	8010f40 <_printf_i+0x150>
 8010fee:	6923      	ldr	r3, [r4, #16]
 8010ff0:	462a      	mov	r2, r5
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	47d0      	blx	sl
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	d0ab      	beq.n	8010f54 <_printf_i+0x164>
 8010ffc:	6823      	ldr	r3, [r4, #0]
 8010ffe:	079b      	lsls	r3, r3, #30
 8011000:	d413      	bmi.n	801102a <_printf_i+0x23a>
 8011002:	68e0      	ldr	r0, [r4, #12]
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	4298      	cmp	r0, r3
 8011008:	bfb8      	it	lt
 801100a:	4618      	movlt	r0, r3
 801100c:	e7a4      	b.n	8010f58 <_printf_i+0x168>
 801100e:	2301      	movs	r3, #1
 8011010:	4632      	mov	r2, r6
 8011012:	4649      	mov	r1, r9
 8011014:	4640      	mov	r0, r8
 8011016:	47d0      	blx	sl
 8011018:	3001      	adds	r0, #1
 801101a:	d09b      	beq.n	8010f54 <_printf_i+0x164>
 801101c:	3501      	adds	r5, #1
 801101e:	68e3      	ldr	r3, [r4, #12]
 8011020:	9903      	ldr	r1, [sp, #12]
 8011022:	1a5b      	subs	r3, r3, r1
 8011024:	42ab      	cmp	r3, r5
 8011026:	dcf2      	bgt.n	801100e <_printf_i+0x21e>
 8011028:	e7eb      	b.n	8011002 <_printf_i+0x212>
 801102a:	2500      	movs	r5, #0
 801102c:	f104 0619 	add.w	r6, r4, #25
 8011030:	e7f5      	b.n	801101e <_printf_i+0x22e>
 8011032:	bf00      	nop
 8011034:	08011911 	.word	0x08011911
 8011038:	08011922 	.word	0x08011922

0801103c <memmove>:
 801103c:	4288      	cmp	r0, r1
 801103e:	b510      	push	{r4, lr}
 8011040:	eb01 0402 	add.w	r4, r1, r2
 8011044:	d902      	bls.n	801104c <memmove+0x10>
 8011046:	4284      	cmp	r4, r0
 8011048:	4623      	mov	r3, r4
 801104a:	d807      	bhi.n	801105c <memmove+0x20>
 801104c:	1e43      	subs	r3, r0, #1
 801104e:	42a1      	cmp	r1, r4
 8011050:	d008      	beq.n	8011064 <memmove+0x28>
 8011052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011056:	f803 2f01 	strb.w	r2, [r3, #1]!
 801105a:	e7f8      	b.n	801104e <memmove+0x12>
 801105c:	4402      	add	r2, r0
 801105e:	4601      	mov	r1, r0
 8011060:	428a      	cmp	r2, r1
 8011062:	d100      	bne.n	8011066 <memmove+0x2a>
 8011064:	bd10      	pop	{r4, pc}
 8011066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801106a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801106e:	e7f7      	b.n	8011060 <memmove+0x24>

08011070 <_realloc_r>:
 8011070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011074:	4680      	mov	r8, r0
 8011076:	4614      	mov	r4, r2
 8011078:	460e      	mov	r6, r1
 801107a:	b921      	cbnz	r1, 8011086 <_realloc_r+0x16>
 801107c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011080:	4611      	mov	r1, r2
 8011082:	f7ff bb85 	b.w	8010790 <_malloc_r>
 8011086:	b92a      	cbnz	r2, 8011094 <_realloc_r+0x24>
 8011088:	f7ff fc9c 	bl	80109c4 <_free_r>
 801108c:	4625      	mov	r5, r4
 801108e:	4628      	mov	r0, r5
 8011090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011094:	f000 f81b 	bl	80110ce <_malloc_usable_size_r>
 8011098:	4284      	cmp	r4, r0
 801109a:	4607      	mov	r7, r0
 801109c:	d802      	bhi.n	80110a4 <_realloc_r+0x34>
 801109e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110a2:	d812      	bhi.n	80110ca <_realloc_r+0x5a>
 80110a4:	4621      	mov	r1, r4
 80110a6:	4640      	mov	r0, r8
 80110a8:	f7ff fb72 	bl	8010790 <_malloc_r>
 80110ac:	4605      	mov	r5, r0
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d0ed      	beq.n	801108e <_realloc_r+0x1e>
 80110b2:	42bc      	cmp	r4, r7
 80110b4:	4622      	mov	r2, r4
 80110b6:	4631      	mov	r1, r6
 80110b8:	bf28      	it	cs
 80110ba:	463a      	movcs	r2, r7
 80110bc:	f7ff fb32 	bl	8010724 <memcpy>
 80110c0:	4631      	mov	r1, r6
 80110c2:	4640      	mov	r0, r8
 80110c4:	f7ff fc7e 	bl	80109c4 <_free_r>
 80110c8:	e7e1      	b.n	801108e <_realloc_r+0x1e>
 80110ca:	4635      	mov	r5, r6
 80110cc:	e7df      	b.n	801108e <_realloc_r+0x1e>

080110ce <_malloc_usable_size_r>:
 80110ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110d2:	1f18      	subs	r0, r3, #4
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	bfbc      	itt	lt
 80110d8:	580b      	ldrlt	r3, [r1, r0]
 80110da:	18c0      	addlt	r0, r0, r3
 80110dc:	4770      	bx	lr
	...

080110e0 <_init>:
 80110e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e2:	bf00      	nop
 80110e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110e6:	bc08      	pop	{r3}
 80110e8:	469e      	mov	lr, r3
 80110ea:	4770      	bx	lr

080110ec <_fini>:
 80110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ee:	bf00      	nop
 80110f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f2:	bc08      	pop	{r3}
 80110f4:	469e      	mov	lr, r3
 80110f6:	4770      	bx	lr
